import{_ as t,H as o,X as c,Y as l,Z as n,a0 as s,a1 as p,$ as a}from"./framework-47f15ee6.js";const u={},i=a(`<h1 id="状压dp" tabindex="-1"><a class="header-anchor" href="#状压dp" aria-hidden="true">#</a> 状压DP</h1><p>[toc]</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>二进制枚举的题目一般元素仅有0,1，就要优先想到二进制，然后再具体看是什么题目。如果题目恰好有集合相关概念，就可以考虑二进制表示集合，开始进行进一步分析。</p><p>如果碰到有限个数表示的题，也要想到二进制表示子集。</p><p>技巧： 枚举 <code>mask</code> 的子集有一个经典的小技巧，对应的代码如下：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>subset <span class="token operator">=</span> mask
<span class="token keyword">while</span> subset<span class="token punctuation">:</span>
    <span class="token comment"># 处理 subset 的逻辑, subset 是 mask 的一个子集，可以用其进行状态转移</span>
    subset <span class="token operator">=</span> <span class="token punctuation">(</span>subset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask
    <span class="token comment"># 使用按位与运算在 O(1) 的时间快速得到下一个（即更小的）mask 的子集</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r=n("blockquote",null,[n("p",null,[s("使用该技巧的动态规划的时间复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mn",null,"3"),n("mi",null,"n")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(3^n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord"},"3"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("。由于长度为 n 且包含 k 个 1 的二进制表示有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"k"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"(n/k)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mclose"},")")])])]),s("个，其有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"k")])]),n("annotation",{encoding:"application/x-tex"},"2^k")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8491em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8491em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.03148em"}},"k")])])])])])])])])])]),s("子集。动态规划的时间复杂度即为每个二进制表示的子集个数之和。")])],-1),d=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),k=n("h3",{id:"单子集前后并列关系设计题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#单子集前后并列关系设计题目","aria-hidden":"true"},"#"),s(" 单子集前后并列关系设计题目")],-1),m={id:"_2397-被列覆盖的最多行数",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_2397-被列覆盖的最多行数","aria-hidden":"true"},"#",-1),v={href:"https://leetcode.cn/problems/maximum-rows-covered-by-columns/",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>给你一个下标从 <strong>0</strong> 开始的 <code>m x n</code> 二进制矩阵 <code>mat</code> 和一个整数 <code>cols</code> ，表示你需要选出的列数。</p><p>如果一行中，所有的 <code>1</code> 都被你选中的列所覆盖，那么我们称这一行 <strong>被覆盖</strong> 了。</p><p>请你返回在选择 <code>cols</code> 列的情况下，<strong>被覆盖</strong> 的行数 <strong>最大</strong> 为多少。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/rowscovered.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cols <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span>
解释：
如上图所示，覆盖 <span class="token number">3</span> 行的一种可行办法是选择第 <span class="token number">0</span> 和第 <span class="token number">2</span> 列。
可以看出，不存在大于 <span class="token number">3</span> 行被覆盖的方案，所以我们返回 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/rowscovered2-20230728235800381.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cols <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">2</span>
解释：
选择唯一的一列，两行都被覆盖了，原因是整个矩阵都被覆盖了。
所以我们返回 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 12</code></li><li><code>mat[i][j]</code> 要么是 <code>0</code> 要么是 <code>1</code> 。</li><li><code>1 &lt;= cols &lt;= n</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),h={id:"_1494-并行课程-ii",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_1494-并行课程-ii","aria-hidden":"true"},"#",-1),j={href:"https://leetcode.cn/problems/parallel-courses-ii/",target:"_blank",rel:"noopener noreferrer"},f=a(`<p>给你一个整数 <code>n</code> 表示某所大学里课程的数目，编号为 <code>1</code> 到 <code>n</code> ，数组 <code>relations</code> 中， <code>relations[i] = [xi, yi]</code> 表示一个先修课的关系，也就是课程 <code>xi</code> 必须在课程 <code>yi</code> 之前上。同时你还有一个整数 <code>k</code> 。</p><p>在一个学期中，你 <strong>最多</strong> 可以同时上 <code>k</code> 门课，前提是这些课的先修课在之前的学期里已经上过了。</p><p>请你返回上完所有课最少需要多少个学期。题目保证一定存在一种上完所有课的方式。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/leetcode_parallel_courses_1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span> 
解释：上图展示了题目输入的图。在第一个学期中，我们可以上课程 <span class="token number">2</span> 和课程 <span class="token number">3</span> 。然后第二个学期上课程 <span class="token number">1</span> ，第三个学期上课程 <span class="token number">4</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/leetcode_parallel_courses_2-20240217081742551.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">4</span> 
解释：上图展示了题目输入的图。一个最优方案是：第一学期上课程 <span class="token number">2</span> 和 <span class="token number">3</span>，第二学期上课程 <span class="token number">4</span> ，第三学期上课程 <span class="token number">1</span> ，第四学期上课程 <span class="token number">5</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 15</code></li><li><code>1 &lt;= k &lt;= n</code></li><li><code>0 &lt;= relations.length &lt;= n * (n-1) / 2</code></li><li><code>relations[i].length == 2</code></li><li><code>1 &lt;= xi, yi &lt;= n</code></li><li><code>xi != yi</code></li><li>所有先修关系都是不同的，也就是说 <code>relations[i] != relations[j]</code> 。</li><li>题目输入的图是个有向无环图。</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),x={id:"_1986-完成任务的最少工作时间段",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#_1986-完成任务的最少工作时间段","aria-hidden":"true"},"#",-1),y={href:"https://leetcode.cn/problems/minimum-number-of-work-sessions-to-finish-the-tasks/",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>你被安排了 <code>n</code> 个任务。任务需要花费的时间用长度为 <code>n</code> 的整数数组 <code>tasks</code> 表示，第 <code>i</code> 个任务需要花费 <code>tasks[i]</code> 小时完成。一个 <strong>工作时间段</strong> 中，你可以 <strong>至多</strong> 连续工作 <code>sessionTime</code> 个小时，然后休息一会儿。</p><p>你需要按照如下条件完成给定任务：</p><ul><li>如果你在某一个时间段开始一个任务，你需要在 <strong>同一个</strong> 时间段完成它。</li><li>完成一个任务后，你可以 <strong>立马</strong> 开始一个新的任务。</li><li>你可以按 <strong>任意顺序</strong> 完成任务。</li></ul><p>给你 <code>tasks</code> 和 <code>sessionTime</code> ，请你按照上述要求，返回完成所有任务所需要的 <strong>最少</strong> 数目的 <strong>工作时间段</strong> 。</p><p>测试数据保证 <code>sessionTime</code> <strong>大于等于</strong> <code>tasks[i]</code> 中的 <strong>最大值</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sessionTime <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">2</span>
解释：你可以在两个工作时间段内完成所有任务。
<span class="token operator">-</span> 第一个工作时间段：完成第一和第二个任务，花费 <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">3</span> 小时。
<span class="token operator">-</span> 第二个工作时间段：完成第三个任务，花费 <span class="token number">3</span> 小时。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sessionTime <span class="token operator">=</span> <span class="token number">8</span>
输出：<span class="token number">2</span>
解释：你可以在两个工作时间段内完成所有任务。
<span class="token operator">-</span> 第一个工作时间段：完成除了最后一个任务以外的所有任务，花费 <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">8</span> 小时。
<span class="token operator">-</span> 第二个工作时间段，完成最后一个任务，花费 <span class="token number">1</span> 小时。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sessionTime <span class="token operator">=</span> <span class="token number">15</span>
输出：<span class="token number">1</span>
解释：你可以在一个工作时间段以内完成所有任务。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == tasks.length</code></li><li><code>1 &lt;= n &lt;= 14</code></li><li><code>1 &lt;= tasks[i] &lt;= 10</code></li><li><code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),A={id:"_2741-特别的排列",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#_2741-特别的排列","aria-hidden":"true"},"#",-1),D={href:"https://leetcode.cn/problems/special-permutations/",target:"_blank",rel:"noopener noreferrer"},N=a(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，它包含 <code>n</code> 个 <strong>互不相同</strong> 的正整数。如果 <code>nums</code> 的一个排列满足以下条件，我们称它是一个特别的排列：</p><ul><li>对于 <code>0 &lt;= i &lt; n - 1</code> 的下标 <code>i</code> ，要么 <code>nums[i] % nums[i+1] == 0</code> ，要么 <code>nums[i+1] % nums[i] == 0</code> 。</li></ul><p>请你返回特别排列的总数目，由于答案可能很大，请将它对 <code>10^9 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 是 nums 两个特别的排列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 是 nums 两个特别的排列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 14</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),O={id:"_996-正方形数组的数目",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#_996-正方形数组的数目","aria-hidden":"true"},"#",-1),R={href:"https://leetcode.cn/problems/number-of-squareful-arrays/description/",target:"_blank",rel:"noopener noreferrer"},S=a(`<p>给定一个非负整数数组 <code>A</code>，如果该数组每对相邻元素之和是一个完全平方数，则称这一数组为<em>正方形</em>数组。</p><p>返回 A 的正方形排列的数目。两个排列 <code>A1</code> 和 <code>A2</code> 不同的充要条件是存在某个索引 <code>i</code>，使得 A1[i] != A2[i]。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 都是有效的排列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><p><code>1 &lt;= A.length &lt;= 12</code></p></li><li><p><code>0 &lt;= A[i] &lt;= 1e9</code></p></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,11),$={id:"_465-最优账单平衡",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#_465-最优账单平衡","aria-hidden":"true"},"#",-1),T={href:"https://leetcode.cn/problems/optimal-account-balancing",target:"_blank",rel:"noopener noreferrer"},I=a(`<p>给你一个表示交易的数组 <code>transactions</code> ，其中 <code>transactions[i] = [fromi, toi, amounti]</code> 表示 <code>ID = fromi</code> 的人给 <code>ID = toi</code> 的人共计 <code>amounti $</code> 。</p><p>请你计算并返回还清所有债务的最小交易笔数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：transactions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：
#<span class="token number">0</span> 给 #<span class="token number">1</span> $10 。
#<span class="token number">2</span> 给 #<span class="token number">0</span> $5 。
需要进行两笔交易。一种结清债务的方式是 #<span class="token number">1</span> 给 #<span class="token number">0</span> 和 #<span class="token number">2</span> 各 $5 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：transactions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">1</span>
解释：
#<span class="token number">0</span> 给 #<span class="token number">1</span> $10 。
#<span class="token number">1</span> 给 #<span class="token number">0</span> $1 。
#<span class="token number">1</span> 给 #<span class="token number">2</span> $5 。
#<span class="token number">2</span> 给 #<span class="token number">0</span> $5 。
因此，#<span class="token number">1</span> 只需要给 #<span class="token number">0</span> $4 ，所有的债务即可还清。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= transactions.length &lt;= 8</code></li><li><code>transactions[i].length == 3</code></li><li><code>0 &lt;= fromi, toi &lt; 12</code></li><li><code>fromi != toi</code></li><li><code>1 &lt;= amounti &lt;= 100</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="两个子集匹配问题" tabindex="-1"><a class="header-anchor" href="#两个子集匹配问题" aria-hidden="true">#</a> 两个子集匹配问题</h3>`,12),L={id:"_1655-分配重复整数",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_1655-分配重复整数","aria-hidden":"true"},"#",-1),C={href:"https://leetcode.cn/problems/distribute-repeating-integers/",target:"_blank",rel:"noopener noreferrer"},E=a(`<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，这个数组中至多有 <code>50</code> 个不同的值。同时你有 <code>m</code> 个顾客的订单 <code>quantity</code> ，其中，整数 <code>quantity[i]</code> 是第 <code>i</code> 位顾客订单的数目。请你判断是否能将 <code>nums</code> 中的整数分配给这些顾客，且满足：</p><ul><li>第 <code>i</code> 位顾客 <strong>恰好</strong> 有 <code>quantity[i]</code> 个整数。</li><li>第 <code>i</code> 位顾客拿到的整数都是 <strong>相同的</strong> 。</li><li>每位顾客都满足上述两个要求。</li></ul><p>如果你可以分配 <code>nums</code> 中的整数满足上面的要求，那么请返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> quantity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token boolean">false</span>
解释：第 <span class="token number">0</span> 位顾客没办法得到两个相同的整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> quantity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token boolean">true</span>
解释：第 <span class="token number">0</span> 位顾客得到 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。整数 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 都没有被使用。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> quantity <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token boolean">true</span>
解释：第 <span class="token number">0</span> 位顾客得到 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> ，第 <span class="token number">1</span> 位顾客得到 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 1000</code></li><li><code>m == quantity.length</code></li><li><code>1 &lt;= m &lt;= 10</code></li><li><code>1 &lt;= quantity[i] &lt;= 10^5</code></li><li><code>nums</code> 中至多有 <code>50</code> 个不同的数字。</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),P={id:"_1681-最小不兼容性",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#_1681-最小不兼容性","aria-hidden":"true"},"#",-1),H={href:"https://leetcode.cn/problems/minimum-incompatibility/",target:"_blank",rel:"noopener noreferrer"},J=a(`<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。你需要将这个数组划分到 <code>k</code> 个相同大小的子集中，使得同一个子集里面没有两个相同的元素。</p><p>一个子集的 <strong>不兼容性</strong> 是该子集里面最大值和最小值的差。</p><p>请你返回将数组分成 <code>k</code> 个子集后，各子集 <strong>不兼容性</strong> 的 <strong>和</strong> 的 <strong>最小值</strong> ，如果无法分成分成 <code>k</code> 个子集，返回 <code>-1</code> 。</p><p>子集的定义是数组中一些数字的集合，对数字顺序没有要求。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">4</span>
解释：最优的分配是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。
<span class="token function">不兼容性和为</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span> 。
注意到 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 可以得到更小的和，但是第一个集合有 <span class="token number">2</span> 个相同的元素，所以不可行。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">6</span>
解释：最优的子集分配为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>，<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>，<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token function">不兼容性和为</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token operator">-</span><span class="token number">1</span>
解释：没办法将这些数字分配到 <span class="token number">3</span> 个子集且满足每个子集里没有相同数字。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 16</code></li><li><code>nums.length</code> 能被 <code>k</code> 整除。</li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,15),W={id:"_1723-完成所有工作的最短时间",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#_1723-完成所有工作的最短时间","aria-hidden":"true"},"#",-1),Z={href:"https://leetcode.cn/problems/find-minimum-time-to-finish-all-jobs/",target:"_blank",rel:"noopener noreferrer"},F=a(`<p>给你一个整数数组 <code>jobs</code> ，其中 <code>jobs[i]</code> 是完成第 <code>i</code> 项工作要花费的时间。</p><p>请你将这些工作分配给 <code>k</code> 位工人。所有工作都应该分配给工人，且每项工作只能分配给一位工人。工人的 <strong>工作时间</strong> 是完成分配给他们的所有工作花费时间的总和。请你设计一套最佳的工作分配方案，使工人的 <strong>最大工作时间</strong> 得以 <strong>最小化</strong> 。</p><p>返回分配方案中尽可能 <strong>最小</strong> 的 <strong>最大工作时间</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：jobs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">3</span>
解释：给每位工人分配一项工作，最大工作时间是 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：jobs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">11</span>
解释：按下述方式分配工作：
<span class="token number">1</span> 号工人：<span class="token number">1</span>、<span class="token number">2</span>、<span class="token number">8</span>（工作时间 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">11</span>）
<span class="token number">2</span> 号工人：<span class="token number">4</span>、<span class="token number">7</span>（工作时间 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">11</span>）
最大工作时间是 <span class="token number">11</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= jobs.length &lt;= 12</code></li><li><code>1 &lt;= jobs[i] &lt;= 10^7</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),G={id:"_2305-公平分发饼干",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#_2305-公平分发饼干","aria-hidden":"true"},"#",-1),Q={href:"https://leetcode.cn/problems/fair-distribution-of-cookies/",target:"_blank",rel:"noopener noreferrer"},U=a(`<p>给你一个整数数组 <code>cookies</code> ，其中 <code>cookies[i]</code> 表示在第 <code>i</code> 个零食包中的饼干数量。另给你一个整数 <code>k</code> 表示等待分发零食包的孩子数量，<strong>所有</strong> 零食包都需要分发。在同一个零食包中的所有饼干都必须分发给同一个孩子，不能分开。</p><p>分发的 <strong>不公平程度</strong> 定义为单个孩子在分发过程中能够获得饼干的最大总数。</p><p>返回所有分发的最小不公平程度。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：cookies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">31</span>
解释：一种最优方案是 <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 第 <span class="token number">1</span> 个孩子分到 <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> ，总计 <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">31</span> 块饼干。
<span class="token operator">-</span> 第 <span class="token number">2</span> 个孩子分到 <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> ，总计 <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">20</span> <span class="token operator">=</span> <span class="token number">30</span> 块饼干。
分发的不公平程度为 <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">31</span> 。
可以证明不存在不公平程度小于 <span class="token number">31</span> 的分发方案。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：cookies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">7</span>
解释：一种最优方案是 <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>、<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 第 <span class="token number">1</span> 个孩子分到 <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> ，总计 <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">7</span> 块饼干。 
<span class="token operator">-</span> 第 <span class="token number">2</span> 个孩子分到 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> ，总计 <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span> 块饼干。
<span class="token operator">-</span> 第 <span class="token number">3</span> 个孩子分到 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> ，总计 <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">7</span> 块饼干。
分发的不公平程度为 <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span> 。
可以证明不存在不公平程度小于 <span class="token number">7</span> 的分发方案。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= cookies.length &lt;= 8</code></li><li><code>1 &lt;= cookies[i] &lt;= 10^5</code></li><li><code>2 &lt;= k &lt;= cookies.length</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),nn={id:"_1125-最小的必要团队",tabindex:"-1"},sn=n("a",{class:"header-anchor",href:"#_1125-最小的必要团队","aria-hidden":"true"},"#",-1),an={href:"https://leetcode.cn/problems/smallest-sufficient-team/",target:"_blank",rel:"noopener noreferrer"},en=a(`<p>作为项目经理，你规划了一份需求的技能清单 <code>req_skills</code>，并打算从备选人员名单 <code>people</code> 中选出些人组成一个「必要团队」（ 编号为 <code>i</code> 的备选人员 <code>people[i]</code> 含有一份该备选人员掌握的技能列表）。</p><p>所谓「必要团队」，就是在这个团队中，对于所需求的技能列表 <code>req_skills</code> 中列出的每项技能，团队中至少有一名成员已经掌握。可以用每个人的编号来表示团队中的成员：</p><ul><li>例如，团队 <code>team = [0, 1, 3]</code> 表示掌握技能分别为 <code>people[0]</code>，<code>people[1]</code>，和 <code>people[3]</code> 的备选人员。</li></ul><p>请你返回 <strong>任一</strong> 规模最小的必要团队，团队成员用人员编号表示。你可以按 <strong>任意顺序</strong> 返回答案，题目数据保证答案存在。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：req_skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：req_skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;algorithms&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aws&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;algorithms&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;algorithms&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aws&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;aws&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= req_skills.length &lt;= 16</code></li><li><code>1 &lt;= req_skills[i].length &lt;= 16</code></li><li><code>req_skills[i]</code> 由小写英文字母组成</li><li><code>req_skills</code> 中的所有字符串 <strong>互不相同</strong></li><li><code>1 &lt;= people.length &lt;= 60</code></li><li><code>0 &lt;= people[i].length &lt;= 16</code></li><li><code>1 &lt;= people[i][j].length &lt;= 16</code></li><li><code>people[i][j]</code> 由小写英文字母组成</li><li><code>people[i]</code> 中的所有字符串 <strong>互不相同</strong></li><li><code>people[i]</code> 中的每个技能是 <code>req_skills</code> 中的技能</li><li>题目数据保证「必要团队」一定存在</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),pn={id:"_1879-两个数组最小的异或值之和",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#_1879-两个数组最小的异或值之和","aria-hidden":"true"},"#",-1),on={href:"https://leetcode.cn/problems/minimum-xor-sum-of-two-arrays/",target:"_blank",rel:"noopener noreferrer"},cn=a(`<p>给你两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，它们长度都为 <code>n</code> 。</p><p>两个数组的 <strong>异或值之和</strong> 为 <code>(nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1])</code> （<strong>下标从 0 开始</strong>）。</p><ul><li>比方说，<code>[1,2,3]</code> 和 <code>[3,2,1]</code> 的 <strong>异或值之和</strong> 等于 <code>(1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4</code> 。</li></ul><p>请你将 <code>nums2</code> 中的元素重新排列，使得 <strong>异或值之和</strong> <strong>最小</strong> 。</p><p>请你返回重新排列之后的 <strong>异或值之和</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：将 nums2 重新排列得到 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
<span class="token function">异或值之和为</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token constant">XOR</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token constant">XOR</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">8</span>
解释：将 nums2 重新排列得到 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token function">异或值之和为</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token constant">XOR</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token constant">XOR</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token constant">XOR</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">8</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == nums1.length</code></li><li><code>n == nums2.length</code></li><li><code>1 &lt;= n &lt;= 14</code></li><li><code>0 &lt;= nums1[i], nums2[i] &lt;= 10^7</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),ln={id:"_2172-数组的最大与和",tabindex:"-1"},un=n("a",{class:"header-anchor",href:"#_2172-数组的最大与和","aria-hidden":"true"},"#",-1),rn={href:"https://leetcode.cn/problems/maximum-and-sum-of-array/",target:"_blank",rel:"noopener noreferrer"},dn=a(`<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>numSlots</code> ，满足<code>2 * numSlots &gt;= n</code> 。总共有 <code>numSlots</code> 个篮子，编号为 <code>1</code> 到 <code>numSlots</code> 。</p><p>你需要把所有 <code>n</code> 个整数分到这些篮子中，且每个篮子 <strong>至多</strong> 有 2 个整数。一种分配方案的 <strong>与和</strong> 定义为每个数与它所在篮子编号的 <strong>按位与运算</strong> 结果之和。</p><ul><li>比方说，将数字 <code>[1, 3]</code> 放入篮子 <code>1</code> 中，<code>[4, 6]</code> 放入篮子<code>2</code> 中，这个方案的与和为 <code>(1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4</code> 。</li></ul><p>请你返回将 <code>nums</code> 中所有数放入 <code>numSlots</code> 个篮子中的最大与和。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> numSlots <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">9</span>
解释：一个可行的方案是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">1</span> 中，<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">2</span> 中，<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">3</span> 中。
<span class="token function">最大与和为</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token constant">AND</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token constant">AND</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token constant">AND</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token constant">AND</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token constant">AND</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token constant">AND</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">9</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> numSlots <span class="token operator">=</span> <span class="token number">9</span>
输出：<span class="token number">24</span>
解释：一个可行的方案是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">1</span> 中，<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">3</span> 中，<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">4</span> 中，<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">7</span> 中，<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> 放入篮子 <span class="token number">9</span> 中。
<span class="token function">最大与和为</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token constant">AND</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token constant">AND</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token constant">AND</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token constant">AND</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token constant">AND</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token constant">AND</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">24</span> 。
注意，篮子 <span class="token number">2</span> ，<span class="token number">5</span> ，<span class="token number">6</span> 和 <span class="token number">8</span> 是空的，这是允许的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= numSlots &lt;= 9</code></li><li><code>1 &lt;= n &lt;= 2 * numSlots</code></li><li><code>1 &lt;= nums[i] &lt;= 15</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),kn={id:"_1595-连通两组点的最小成本",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#_1595-连通两组点的最小成本","aria-hidden":"true"},"#",-1),bn={href:"https://leetcode.cn/problems/minimum-cost-to-connect-two-groups-of-points/",target:"_blank",rel:"noopener noreferrer"},vn=a(`<p>给你两组点，其中第一组中有 <code>size1</code> 个点，第二组中有 <code>size2</code> 个点，且 <code>size1 &gt;= size2</code> 。</p><p>任意两点间的连接成本 <code>cost</code> 由大小为 <code>size1 x size2</code> 矩阵给出，其中 <code>cost[i][j]</code> 是第一组中的点 <code>i</code> 和第二组中的点 <code>j</code> 的连接成本。<strong>如果两个组中的每个点都与另一组中的一个或多个点连接，则称这两组点是连通的</strong>。换言之，第一组中的每个点必须至少与第二组中的一个点连接，且第二组中的每个点必须至少与第一组中的一个点连接。</p><p>返回连通两组点所需的最小成本。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/ex1-20240217082428129.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">17</span>
解释：连通两组点的最佳方法是：
<span class="token number">1</span><span class="token operator">--</span><span class="token constant">A</span>
<span class="token number">2</span><span class="token operator">--</span><span class="token constant">B</span>
总成本为 <span class="token number">17</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/ex2-20240217082428176.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：连通两组点的最佳方法是：
<span class="token number">1</span><span class="token operator">--</span><span class="token constant">A</span>
<span class="token number">2</span><span class="token operator">--</span><span class="token constant">B</span>
<span class="token number">2</span><span class="token operator">--</span><span class="token constant">C</span>
<span class="token number">3</span><span class="token operator">--</span><span class="token constant">A</span>
最小成本为 <span class="token number">4</span> 。
请注意，虽然有多个点连接到第一组中的点 <span class="token number">2</span> 和第二组中的点 <span class="token constant">A</span> ，但由于题目并不限制连接点的数目，所以只需要关心最低总成本。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>size1 == cost.length</code></li><li><code>size2 == cost[i].length</code></li><li><code>1 &lt;= size1, size2 &lt;= 12</code></li><li><code>size1 &gt;= size2</code></li><li><code>0 &lt;= cost[i][j] &lt;= 100</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),gn={id:"_2572-无平方子集计数",tabindex:"-1"},hn=n("a",{class:"header-anchor",href:"#_2572-无平方子集计数","aria-hidden":"true"},"#",-1),_n={href:"https://leetcode.cn/problems/count-the-number-of-square-free-subsets/description/",target:"_blank",rel:"noopener noreferrer"},jn=a(`<p>给你一个正整数数组 <code>nums</code> 。</p><p>如果数组 <code>nums</code> 的子集中的元素乘积是一个 <strong>无平方因子数</strong> ，则认为该子集是一个 <strong>无平方</strong> 子集。</p><p><strong>无平方因子数</strong> 是无法被除 <code>1</code> 之外任何平方数整除的数字。</p><p>返回数组 <code>nums</code> 中 <strong>无平方</strong> 且 <strong>非空</strong> 的子集数目。因为答案可能很大，返回对 <code>109 + 7</code> 取余的结果。</p><p><code>nums</code> 的 <strong>非空子集</strong> 是可以由删除 <code>nums</code> 中一些元素（可以不删除，但不能全部删除）得到的一个数组。如果构成两个子集时选择删除的下标不同，则认为这两个子集不同。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：示例中有 <span class="token number">3</span> 个无平方子集：
<span class="token operator">-</span> 由第 <span class="token number">0</span> 个元素 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 组成的子集。其元素的乘积是 <span class="token number">3</span> ，这是一个无平方因子数。
<span class="token operator">-</span> 由第 <span class="token number">3</span> 个元素 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> 组成的子集。其元素的乘积是 <span class="token number">5</span> ，这是一个无平方因子数。
<span class="token operator">-</span> 由第 <span class="token number">0</span> 个和第 <span class="token number">3</span> 个元素 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> 组成的子集。其元素的乘积是 <span class="token number">15</span> ，这是一个无平方因子数。
可以证明给定数组中不存在超过 <span class="token number">3</span> 个无平方子集。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">1</span>
解释：示例中有 <span class="token number">1</span> 个无平方子集：
<span class="token operator">-</span> 由第 <span class="token number">0</span> 个元素 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 组成的子集。其元素的乘积是 <span class="token number">1</span> ，这是一个无平方因子数。
可以证明给定数组中不存在超过 <span class="token number">1</span> 个无平方子集。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 30</code></li></ul><blockquote><p>思路：</p><p>​ 状压<code>dp</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),fn={id:"lcp-53-守护太空城",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#lcp-53-守护太空城","aria-hidden":"true"},"#",-1),qn={href:"https://leetcode.cn/problems/EJvmW4/",target:"_blank",rel:"noopener noreferrer"},yn=a(`<p>各位勇者请注意，力扣太空城发布陨石雨红色预警。</p><p>太空城中的一些舱室将要受到陨石雨的冲击，这些舱室按照编号 <code>0 ~ N</code> 的顺序依次排列。为了阻挡陨石损毁舱室，太空城可以使用能量展开防护屏障，具体消耗如下：</p><ul><li>选择一个舱室开启屏障，能量消耗为 <code>2</code></li><li>选择相邻两个舱室开启联合屏障，能量消耗为 <code>3</code></li><li>对于已开启的 <strong>一个</strong> 屏障，<strong>多维持一时刻</strong>，能量消耗为 <code>1</code></li></ul><p>已知陨石雨的影响范围和到达时刻，<code>time[i]</code> 和 <code>position[i]</code> 分别表示该陨石的到达时刻和冲击位置。请返回太空舱能够守护所有舱室所需要的最少能量。</p><p><strong>注意：</strong></p><ul><li>同一时间，一个舱室不能被多个屏障覆盖</li><li>陨石雨仅在到达时刻对冲击位置处的舱室有影响</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：time <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>

输出：<span class="token number">5</span>

解释：时刻 <span class="token number">1</span>，分别开启编号 <span class="token number">3</span>、<span class="token number">6</span> 舱室的屏障，能量消耗 <span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span>。时刻 <span class="token number">2</span>，维持编号 <span class="token number">3</span> 舱室的屏障，能量消耗 <span class="token number">1</span>。因此，最少需要能量 <span class="token number">5</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：time <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> position <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>

输出：<span class="token number">9</span>

解释：时刻 <span class="token number">1</span>，开启编号 <span class="token number">1</span>、<span class="token number">2</span> 舱室的联合屏障，能量消耗 <span class="token number">3</span>。时刻 <span class="token number">1</span>，开启编号 <span class="token number">3</span> 舱室的屏障，能量消耗 <span class="token number">2</span> 。时刻 <span class="token number">2</span>，维持编号 <span class="token number">1</span>、<span class="token number">2</span> 舱室的联合屏障，能量消耗 <span class="token number">1</span>。时刻 <span class="token number">3</span>，维持编号 <span class="token number">1</span>、<span class="token number">2</span> 舱室的联合屏障，能量消耗 <span class="token number">1</span>。时刻 <span class="token number">5</span>，重新开启编号 <span class="token number">3</span> 舱室的屏障，能量消耗 <span class="token number">2</span>。因此，最少需要能量 <span class="token number">9</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= time.length == position.length &lt;= 500</code></li><li><code>1 &lt;= time[i] &lt;= 5</code></li><li><code>0 &lt;= position[i] &lt;= 100</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,15);function wn(An,zn){const e=o("ExternalLinkIcon");return c(),l("div",null,[i,r,d,k,n("h4",m,[b,s(),n("a",v,[s("2397. 被列覆盖的最多行数"),p(e)])]),g,n("h4",h,[_,s(),n("a",j,[s("1494. 并行课程 II"),p(e)])]),f,n("h4",x,[q,s(),n("a",y,[s("1986. 完成任务的最少工作时间段"),p(e)])]),w,n("h4",A,[z,s(),n("a",D,[s("2741. 特别的排列"),p(e)])]),N,n("h4",O,[X,s(),n("a",R,[s("996. 正方形数组的数目"),p(e)])]),S,n("h4",$,[M,s(),n("a",T,[s("465. 最优账单平衡"),p(e)])]),I,n("h4",L,[B,s(),n("a",C,[s("1655. 分配重复整数"),p(e)])]),E,n("h4",P,[V,s(),n("a",H,[s("1681. 最小不兼容性"),p(e)])]),J,n("h4",W,[Y,s(),n("a",Z,[s("1723. 完成所有工作的最短时间"),p(e)])]),F,n("h4",G,[K,s(),n("a",Q,[s("2305. 公平分发饼干"),p(e)])]),U,n("h4",nn,[sn,s(),n("a",an,[s("1125. 最小的必要团队"),p(e)])]),en,n("h4",pn,[tn,s(),n("a",on,[s("1879. 两个数组最小的异或值之和"),p(e)])]),cn,n("h4",ln,[un,s(),n("a",rn,[s("2172. 数组的最大与和"),p(e)])]),dn,n("h4",kn,[mn,s(),n("a",bn,[s("1595. 连通两组点的最小成本"),p(e)])]),vn,n("h4",gn,[hn,s(),n("a",_n,[s("2572. 无平方子集计数"),p(e)])]),jn,n("h4",fn,[xn,s(),n("a",qn,[s("LCP 53. 守护太空城"),p(e)])]),yn])}const Nn=t(u,[["render",wn],["__file","stateCompressDP.html.vue"]]);export{Nn as default};
