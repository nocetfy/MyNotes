const n=JSON.parse('{"key":"v-19988bf9","path":"/leetcode/array/binarySearch.html","title":"二分查找","lang":"zh-CN","frontmatter":{"description":"二分查找 [TOC] 二分查找 本质： 「二分」不是单纯指从有序数组中快速找某个数，这只是「二分」的一个应用。 「二分」的本质是两段性，并非单调性。只要一段满足某个性质，另外一段不满足某个性质，就可以用「二分」。 经过旋转的数组，显然前半段满足 &gt;= nums[0]，而后半段不满足 &gt;= nums[0]。我们可以以此作为依据，通过「二分」找到旋转点。可以使用红蓝染色法，旋转点左边为红色，其本身及之右为蓝色。 循环不变量: 关键不在于区间里的元素具有什么性质，而是区间外面的元素具有什么性质 也就是看最终左右指针会停在哪里。如果我们要找第一个大于等于x的位置，那么我就假设L最终会停在第一个大于等于x的位置，R停在L的左边。 此时的循环不变量即：L的左边恒小于x，R的右边恒大于等于x 所以各条件如下： while(L &lt;= R) // R会停在L的左侧，即终止条件，R &lt; L if(mid &lt; x) L = mid + 1 // 根据循环不变量 if(mid &gt;= x) R = mid - 1 // 根据循环不变量 L = 0, R = length - 1 // 0的左边可以看做负无穷，恒小于x，R取第一个一定满足条件的，如length - 1（length开始可以看作正无穷，恒大于等于x) 模板: 寻找数组中第一个大于等于target的位置 private int lowerBound(int[] nums, int target) { int left = 0, right = nums.length - 1; // 闭区间 [left, right] while (left &lt;= right) { // 区间不为空 // 循环不变量： // nums[left-1] &lt; target // nums[right+1] &gt;= target int mid = left + (right - left) / 2; if (nums[mid] &lt; target) // 由上面的循环不变量可得，此时mid在[0,left-1]范围内，left肯定大于mid，可以先让left赋mid + 1的位置 left = mid + 1; // 范围缩小到 [mid+1, right] else right = mid - 1; // 范围缩小到 [left, mid-1] } return left; // 或者 right+1 } 各种情况 &gt;= : 即模板 &gt; : 转化为 &gt;= (target + 1) &lt; : 转化为 (&gt;= target) - 1 &lt;= : 转化为 (&gt; target) - 1 即：(&gt;= target + 1) - 1","head":[["meta",{"property":"og:url","content":"https://newzone.top/MyNotes/leetcode/array/binarySearch.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"二分查找"}],["meta",{"property":"og:description","content":"二分查找 [TOC] 二分查找 本质： 「二分」不是单纯指从有序数组中快速找某个数，这只是「二分」的一个应用。 「二分」的本质是两段性，并非单调性。只要一段满足某个性质，另外一段不满足某个性质，就可以用「二分」。 经过旋转的数组，显然前半段满足 &gt;= nums[0]，而后半段不满足 &gt;= nums[0]。我们可以以此作为依据，通过「二分」找到旋转点。可以使用红蓝染色法，旋转点左边为红色，其本身及之右为蓝色。 循环不变量: 关键不在于区间里的元素具有什么性质，而是区间外面的元素具有什么性质 也就是看最终左右指针会停在哪里。如果我们要找第一个大于等于x的位置，那么我就假设L最终会停在第一个大于等于x的位置，R停在L的左边。 此时的循环不变量即：L的左边恒小于x，R的右边恒大于等于x 所以各条件如下： while(L &lt;= R) // R会停在L的左侧，即终止条件，R &lt; L if(mid &lt; x) L = mid + 1 // 根据循环不变量 if(mid &gt;= x) R = mid - 1 // 根据循环不变量 L = 0, R = length - 1 // 0的左边可以看做负无穷，恒小于x，R取第一个一定满足条件的，如length - 1（length开始可以看作正无穷，恒大于等于x) 模板: 寻找数组中第一个大于等于target的位置 private int lowerBound(int[] nums, int target) { int left = 0, right = nums.length - 1; // 闭区间 [left, right] while (left &lt;= right) { // 区间不为空 // 循环不变量： // nums[left-1] &lt; target // nums[right+1] &gt;= target int mid = left + (right - left) / 2; if (nums[mid] &lt; target) // 由上面的循环不变量可得，此时mid在[0,left-1]范围内，left肯定大于mid，可以先让left赋mid + 1的位置 left = mid + 1; // 范围缩小到 [mid+1, right] else right = mid - 1; // 范围缩小到 [left, mid-1] } return left; // 或者 right+1 } 各种情况 &gt;= : 即模板 &gt; : 转化为 &gt;= (target + 1) &lt; : 转化为 (&gt;= target) - 1 &lt;= : 转化为 (&gt; target) - 1 即：(&gt;= target + 1) - 1"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分查找\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"二分查找","slug":"二分查找-1","link":"#二分查找-1","children":[{"level":3,"title":"基础问题","slug":"基础问题","link":"#基础问题","children":[]},{"level":3,"title":"二分答案","slug":"二分答案","link":"#二分答案","children":[]},{"level":3,"title":"最小化最大值","slug":"最小化最大值","link":"#最小化最大值","children":[]},{"level":3,"title":"最大化最小值","slug":"最大化最小值","link":"#最大化最小值","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":69.97,"words":20992},"filePathRelative":"leetcode/array/binarySearch.md","excerpt":"<h1> 二分查找</h1>\\n<p>[TOC]</p>\\n<h2> 二分查找</h2>\\n<blockquote>\\n<p><strong>本质</strong>：</p>\\n<p>「二分」不是单纯指从有序数组中快速找某个数，这只是「二分」的一个应用。</p>\\n<p>「二分」的本质是两段性，并非单调性。只要一段满足某个性质，另外一段不满足某个性质，就可以用「二分」。</p>\\n<p>经过旋转的数组，显然前半段满足 <code>&gt;= nums[0]</code>，而后半段不满足 <code>&gt;= nums[0]</code>。我们可以以此作为依据，通过「二分」找到旋转点。可以使用红蓝染色法，旋转点左边为红色，其本身及之右为蓝色。</p>\\n<p><strong>循环不变量</strong>: 关键不在于区间里的元素具有什么性质，而是区间外面的元素具有什么性质</p>\\n<p>也就是看最终左右指针会停在哪里。如果我们要找第一个大于等于<code>x</code>的位置，那么我就假设<code>L</code>最终会停在第一个大于等于<code>x</code>的位置，<code>R</code>停在<code>L</code>的左边。</p>\\n<p>此时的循环不变量即：<strong><code>L</code>的左边恒小于<code>x</code>，<code>R</code>的右边恒大于等于<code>x</code></strong></p>\\n<p>所以各条件如下：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">L</span> <span class=\\"token operator\\">&lt;=</span> <span class=\\"token class-name\\">R</span><span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// R会停在L的左侧，即终止条件，R &lt; L</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>mid <span class=\\"token operator\\">&lt;</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">L</span> <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span> <span class=\\"token comment\\">// 根据循环不变量</span>\\n<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>mid <span class=\\"token operator\\">&gt;=</span> x<span class=\\"token punctuation\\">)</span> <span class=\\"token class-name\\">R</span> <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token comment\\">// 根据循环不变量</span>\\n<span class=\\"token class-name\\">L</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">R</span> <span class=\\"token operator\\">=</span> length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token comment\\">// 0的左边可以看做负无穷，恒小于x，R取第一个一定满足条件的，如length - 1（length开始可以看作正无穷，恒大于等于x)</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>模板</strong>: 寻找数组中第一个大于等于target的位置</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">lowerBound</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">int</span> left <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> right <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 闭区间 [left, right]</span>\\n   <span class=\\"token keyword\\">while</span> <span class=\\"token punctuation\\">(</span>left <span class=\\"token operator\\">&lt;=</span> right<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token comment\\">// 区间不为空</span>\\n         <span class=\\"token comment\\">// 循环不变量：</span>\\n         <span class=\\"token comment\\">// nums[left-1] &lt; target</span>\\n         <span class=\\"token comment\\">// nums[right+1] &gt;= target</span>\\n         <span class=\\"token keyword\\">int</span> mid <span class=\\"token operator\\">=</span> left <span class=\\"token operator\\">+</span> <span class=\\"token punctuation\\">(</span>right <span class=\\"token operator\\">-</span> left<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">/</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n         <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>mid<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&lt;</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token comment\\">// 由上面的循环不变量可得，此时mid在[0,left-1]范围内，left肯定大于mid，可以先让left赋mid + 1的位置</span>\\n             left <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 范围缩小到 [mid+1, right]</span>\\n         <span class=\\"token keyword\\">else</span>\\n             right <span class=\\"token operator\\">=</span> mid <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 范围缩小到 [left, mid-1]</span>\\n     <span class=\\"token punctuation\\">}</span>\\n     <span class=\\"token keyword\\">return</span> left<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// 或者 right+1</span>\\n   <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><p><strong>各种情况</strong></p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token operator\\">&gt;=</span> <span class=\\"token operator\\">:</span> 即模板\\n<span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">:</span> 转化为 <span class=\\"token operator\\">&gt;=</span> <span class=\\"token punctuation\\">(</span>target <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token operator\\">&lt;</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">转化为</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&gt;=</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n<span class=\\"token operator\\">&lt;=</span> <span class=\\"token operator\\">:</span> <span class=\\"token function\\">转化为</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&gt;</span> target<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span> <span class=\\"token function\\">即：</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">&gt;=</span> target <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></blockquote>","autoDesc":true}');export{n as data};
