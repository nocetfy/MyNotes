const e=JSON.parse('{"key":"v-d525d8d2","path":"/interview/MQ/RabbitMQ.html","title":"RabbitMQ","lang":"zh-CN","frontmatter":{"description":"RabbitMQ [toc] 概述 RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。 AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。 RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括： 可靠性: RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。 消息集群: 多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。 高可用: 队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。 多种协议: RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。 多语言客户端: RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。 管理界面: RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。 插件机制: RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。","head":[["meta",{"property":"og:url","content":"https://newzone.top/MyNotes/interview/MQ/RabbitMQ.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"RabbitMQ"}],["meta",{"property":"og:description","content":"RabbitMQ [toc] 概述 RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。 AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。 RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括： 可靠性: RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。 消息集群: 多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。 高可用: 队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。 多种协议: RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。 多语言客户端: RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。 管理界面: RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。 插件机制: RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RabbitMQ\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"AMQP 中的消息路由","slug":"amqp-中的消息路由","link":"#amqp-中的消息路由","children":[{"level":3,"title":"Exchange 类型","slug":"exchange-类型","link":"#exchange-类型","children":[]}]},{"level":2,"title":"RabbitMQ 常见的五种模式","slug":"rabbitmq-常见的五种模式","link":"#rabbitmq-常见的五种模式","children":[]},{"level":2,"title":"RabbitMQ 消费模式","slug":"rabbitmq-消费模式","link":"#rabbitmq-消费模式","children":[]},{"level":2,"title":"RabbitMQ 死信队列","slug":"rabbitmq-死信队列","link":"#rabbitmq-死信队列","children":[]},{"level":2,"title":"RabbitMQ 延迟队列","slug":"rabbitmq-延迟队列","link":"#rabbitmq-延迟队列","children":[]},{"level":2,"title":"RabbitMQ集群","slug":"rabbitmq集群","link":"#rabbitmq集群","children":[{"level":3,"title":"普通集群","slug":"普通集群","link":"#普通集群","children":[]},{"level":3,"title":"镜像集群","slug":"镜像集群","link":"#镜像集群","children":[]}]},{"level":2,"title":"消息队列常见问题","slug":"消息队列常见问题","link":"#消息队列常见问题","children":[{"level":3,"title":"多消费者订阅同一队列","slug":"多消费者订阅同一队列","link":"#多消费者订阅同一队列","children":[]},{"level":3,"title":"消息可靠传输","slug":"消息可靠传输","link":"#消息可靠传输","children":[]},{"level":3,"title":"Spring中提供的确认模式","slug":"spring中提供的确认模式","link":"#spring中提供的确认模式","children":[]},{"level":3,"title":"消息积压","slug":"消息积压","link":"#消息积压","children":[]},{"level":3,"title":"消息幂等","slug":"消息幂等","link":"#消息幂等","children":[]},{"level":3,"title":"消息顺序","slug":"消息顺序","link":"#消息顺序","children":[]},{"level":3,"title":"提高吞吐量","slug":"提高吞吐量","link":"#提高吞吐量","children":[]},{"level":3,"title":"削峰","slug":"削峰","link":"#削峰","children":[]}]},{"level":2,"title":"RabbitMQ 与Spring的集成","slug":"rabbitmq-与spring的集成","link":"#rabbitmq-与spring的集成","children":[{"level":3,"title":"与Springboot的集成","slug":"与springboot的集成","link":"#与springboot的集成","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":25.26,"words":7578},"filePathRelative":"interview/MQ/RabbitMQ.md","excerpt":"<h1> RabbitMQ</h1>\\n<p>[toc]</p>\\n<h2> 概述</h2>\\n<p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</p>\\n<p>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p>\\n<p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：</p>\\n<ol>\\n<li>\\n<p>可靠性: RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</p>\\n</li>\\n<li>\\n<p>消息集群: 多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</p>\\n</li>\\n<li>\\n<p>高可用: 队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</p>\\n</li>\\n<li>\\n<p>多种协议: RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。</p>\\n</li>\\n<li>\\n<p>多语言客户端: RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。</p>\\n</li>\\n<li>\\n<p>管理界面: RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</p>\\n</li>\\n<li>\\n<p>插件机制: RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
