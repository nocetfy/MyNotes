import{_ as n,X as s,Y as a,$ as p}from"./framework-1ee2252c.js";const e={},t=p(`<h1 id="树状数组" tabindex="-1"><a class="header-anchor" href="#树状数组" aria-hidden="true">#</a> 树状数组</h1><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h2><p>动态地支持「单点增加」和「区间求和」</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/bit131.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>单点增加，这其实是一种自左向右的爬树过程。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/bit14.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>区间求和，从右向左的爬树相加过程。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/bit13.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Fenwick</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bit<span class="token punctuation">;</span>

    <span class="token class-name">Fenwick</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 更新树状数组中的某个元素  </span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> bit<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+=</span> delta<span class="token punctuation">;</span>
            index <span class="token operator">+=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> index <span class="token operator">&amp;</span> <span class="token operator">-</span>index<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算从1到index的前缀和  </span>
    <span class="token keyword">int</span> <span class="token function">getPrefixSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sum <span class="token operator">+=</span> bit<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
            index <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="变形" tabindex="-1"><a class="header-anchor" href="#变形" aria-hidden="true">#</a> 变形</h2><p>支持区间维护、 单点查询。使用差分思想来维护。</p><p>新定义一个数组 <code>b</code>，元素全部初始化为 <code>0</code>。 每次操作区间 <code>[l,r]</code> 上的每个 <code>a[x] += d</code> 的时候：</p><ol><li><p>让 <code>b[l]</code> 单点增加 <code>d</code></p></li><li><p>让 <code>b[r+1]</code> 单点减少 <code>d</code></p></li></ol><p>如此一来，<code>b</code> 数组的区间和即反映了原数组 <code>a</code> 的变化：</p><ol><li><p><code>b[1, l-1]</code> 区间上的前缀和没有发生变化。</p></li><li><p><code>b[l, r]</code> 区间上的前缀和全部增加了 <code>d</code>，对应着 <code>a</code> 数组在此区间上的每一项元素增加了 <code>d</code>。</p></li><li><p><code>b[r+1, n]</code> 区间上的前缀和没有发生变化，因为在 <code>b[r+1]</code> 处消除了影响。</p></li></ol><p>也就是说， <code>b</code> 的前缀和 <code>sum(b[1, x])</code> 映射到原数组的元素 <code>a[x]</code>，二者同步变化。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/bit31.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>然后，建立一个树状数组维护 <code>b</code> 的前缀和即可，单点查询 <code>a[x]</code> 即查询 <code>b</code> 的前缀和 <code>sum(b[1, x])</code>，再加上 <code>a[i]</code> 的初始值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">operate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">BinaryIndexedTree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinaryIndexedTree</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">:</span> oper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> x <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                tree<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tree<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> x <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> res <span class="token operator">=</span> a<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">.</span><span class="token function">getPrefixSum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2>`,21),o=[t];function c(i,l){return s(),a("div",null,o)}const d=n(e,[["render",c],["__file","BinaryIndexTree.html.vue"]]);export{d as default};
