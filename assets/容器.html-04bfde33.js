const e=JSON.parse('{"key":"v-19db6cac","path":"/interview/DevOps/%E5%AE%B9%E5%99%A8.html","title":"运维","lang":"zh-CN","frontmatter":{"description":"运维 [toc] 容器 docker容器之间怎么隔离? ​\\tLinux中的PID、IPC、网络等资源是全局的，而Linux的NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰。 ​\\tNamespace实际上修改了应用进程看待整个计算机“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些指定的内容。对于宿主机来说，这些被“隔离”了的进程跟其他进程并没有区别。","head":[["meta",{"property":"og:url","content":"https://newzone.top/MyNotes/interview/DevOps/%E5%AE%B9%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"运维"}],["meta",{"property":"og:description","content":"运维 [toc] 容器 docker容器之间怎么隔离? ​\\tLinux中的PID、IPC、网络等资源是全局的，而Linux的NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰。 ​\\tNamespace实际上修改了应用进程看待整个计算机“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些指定的内容。对于宿主机来说，这些被“隔离”了的进程跟其他进程并没有区别。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"运维\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"容器","slug":"容器","link":"#容器","children":[{"level":3,"title":"docker容器之间怎么隔离?","slug":"docker容器之间怎么隔离","link":"#docker容器之间怎么隔离","children":[]}]},{"level":2,"title":"k8s","slug":"k8s","link":"#k8s","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"架构","slug":"架构","link":"#架构","children":[]}]},{"level":2,"title":"命令","slug":"命令","link":"#命令","children":[{"level":3,"title":"top","slug":"top","link":"#top","children":[]}]}],"git":{},"readingTime":{"minutes":6.53,"words":1958},"filePathRelative":"interview/DevOps/容器.md","excerpt":"<h1> 运维</h1>\\n<p>[toc]</p>\\n<h2> 容器</h2>\\n<h3> docker容器之间怎么隔离?</h3>\\n<p>​\\tLinux中的PID、IPC、网络等资源是全局的，而Linux的NameSpace机制是一种资源隔离方案，在该机制下这些资源就不再是全局的了，而是属于某个特定的NameSpace，各个NameSpace下的资源互不干扰。</p>\\n<p>​\\t<strong>Namespace实际上修改了应用进程看待整个计算机“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些指定的内容</strong>。对于宿主机来说，这些被“隔离”了的进程跟其他进程并没有区别。</p>","autoDesc":true}');export{e as data};
