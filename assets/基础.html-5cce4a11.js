const t=JSON.parse('{"key":"v-ea457246","path":"/interview/MQ/%E5%9F%BA%E7%A1%80.html","title":"基础","lang":"zh-CN","frontmatter":{"description":"基础 消息队列的优缺点 优点： 解耦 ​ 对于项目的变化，很难预测到未来的变动。消息中间件在处理过程中间插入了一个隐含、基于数据的接口层，两边的处理过程都要实现这一接口，但是两边都可以独立的扩展或则修改自己的处理过程，只要确保他们遵守同样的接口约束即可 异步 ​ 传统模式下使用串行接口调用的方式，一些非必要的业务逻辑以同步的方式运行，阻塞后续接口的调用，耗费时间。如果使用消息中间件方式，将消息写入消息队列，非必要的业务逻辑以异步的方式运行，可以加快响应速度。 削峰 ​ 一个系统访问流量有高峰时期，也有低峰时期，如果高峰期流量太大，我们的系统、数据库可能就会崩溃。这时如果使用 MQ 进行流量削峰，将用户的大量消息直接放到 MQ 里面，然后我们的系统去按自己的最大消费能力去消费这些消息，就可以保证系统的稳定，随后跟进业务逻辑，给用户返回特定页面或者稍后通过其他方式通知其结果。","head":[["meta",{"property":"og:url","content":"https://newzone.top/MyNotes/interview/MQ/%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"基础"}],["meta",{"property":"og:description","content":"基础 消息队列的优缺点 优点： 解耦 ​ 对于项目的变化，很难预测到未来的变动。消息中间件在处理过程中间插入了一个隐含、基于数据的接口层，两边的处理过程都要实现这一接口，但是两边都可以独立的扩展或则修改自己的处理过程，只要确保他们遵守同样的接口约束即可 异步 ​ 传统模式下使用串行接口调用的方式，一些非必要的业务逻辑以同步的方式运行，阻塞后续接口的调用，耗费时间。如果使用消息中间件方式，将消息写入消息队列，非必要的业务逻辑以异步的方式运行，可以加快响应速度。 削峰 ​ 一个系统访问流量有高峰时期，也有低峰时期，如果高峰期流量太大，我们的系统、数据库可能就会崩溃。这时如果使用 MQ 进行流量削峰，将用户的大量消息直接放到 MQ 里面，然后我们的系统去按自己的最大消费能力去消费这些消息，就可以保证系统的稳定，随后跟进业务逻辑，给用户返回特定页面或者稍后通过其他方式通知其结果。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":5.14,"words":1543},"filePathRelative":"interview/MQ/基础.md","excerpt":"<h1> 基础</h1>\\n<ul>\\n<li>消息队列的优缺点</li>\\n</ul>\\n<p>优点：</p>\\n<blockquote>\\n<ul>\\n<li>解耦</li>\\n</ul>\\n<p>​    对于项目的变化，很难预测到未来的变动。消息中间件在处理过程中间插入了一个隐含、基于数据的接口层，两边的处理过程都要实现这一接口，但是两边都可以独立的扩展或则修改自己的处理过程，只要确保他们遵守同样的接口约束即可</p>\\n<ul>\\n<li>异步</li>\\n</ul>\\n<p>​    传统模式下使用串行接口调用的方式，一些非必要的业务逻辑以同步的方式运行，阻塞后续接口的调用，耗费时间。如果使用消息中间件方式，将消息写入消息队列，非必要的业务逻辑以异步的方式运行，可以加快响应速度。</p>\\n<ul>\\n<li>削峰</li>\\n</ul>\\n<p>​    一个系统访问流量有高峰时期，也有低峰时期，如果高峰期流量太大，我们的系统、数据库可能就会崩溃。这时如果使用 MQ 进行流量削峰，将用户的大量消息直接放到 MQ 里面，然后我们的系统去按自己的最大消费能力去消费这些消息，就可以保证系统的稳定，随后跟进业务逻辑，给用户返回特定页面或者稍后通过其他方式通知其结果。</p>\\n</blockquote>","autoDesc":true}');export{t as data};
