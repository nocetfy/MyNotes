const e=JSON.parse('{"key":"v-0b889a38","path":"/interview/Java/Java%20IO.html","title":"Java IO","lang":"zh-CN","frontmatter":{"description":"Java IO 阻塞IO 本地IO 大致可以概括为如下几个过程： in.read(buf)执行时，程序向内核发起 read()系统调用； 操作系统发生上下文切换，由用户态(User mode)切换到内核态(Kernel mode)，把数据读取到内核缓冲区 （buffer）中； 内核把数据从内核空间拷贝到用户空间，同时由内核态转为用户态； 继续执行 out.write(buf)； 再次发生上下文切换，将数据从用户空间buffer拷贝到内核空间buffer中，由内核把数据写入文件。","head":[["meta",{"property":"og:url","content":"https://newzone.top/MyNotes/interview/Java/Java%20IO.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"Java IO"}],["meta",{"property":"og:description","content":"Java IO 阻塞IO 本地IO 大致可以概括为如下几个过程： in.read(buf)执行时，程序向内核发起 read()系统调用； 操作系统发生上下文切换，由用户态(User mode)切换到内核态(Kernel mode)，把数据读取到内核缓冲区 （buffer）中； 内核把数据从内核空间拷贝到用户空间，同时由内核态转为用户态； 继续执行 out.write(buf)； 再次发生上下文切换，将数据从用户空间buffer拷贝到内核空间buffer中，由内核把数据写入文件。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java IO\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"阻塞IO","slug":"阻塞io","link":"#阻塞io","children":[]},{"level":3,"title":"非阻塞IO","slug":"非阻塞io","link":"#非阻塞io","children":[]},{"level":3,"title":"IO多路复用","slug":"io多路复用","link":"#io多路复用","children":[]},{"level":3,"title":"IO分类","slug":"io分类","link":"#io分类","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":49.97,"words":14991},"filePathRelative":"interview/Java/Java IO.md","excerpt":"<h1> Java IO</h1>\\n<h3> 阻塞IO</h3>\\n<h4> 本地IO</h4>\\n<figure><img src=\\"https://raw.githubusercontent.com/nocetfy/image/main/img/image-20230604224850936.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>大致可以概括为如下几个过程：</p>\\n<ul>\\n<li><code>in.read(buf)</code>执行时，程序向内核发起 <code>read()</code>系统调用；</li>\\n<li>操作系统发生上下文切换，由用户态(User mode)切换到内核态(Kernel mode)，把数据读取到内核缓冲区 （buffer）中；</li>\\n<li>内核把数据从内核空间拷贝到用户空间，同时由内核态转为用户态；</li>\\n<li>继续执行 <code>out.write(buf)</code>；</li>\\n<li>再次发生上下文切换，将数据从用户空间buffer拷贝到内核空间buffer中，由内核把数据写入文件。</li>\\n</ul>","autoDesc":true}');export{e as data};
