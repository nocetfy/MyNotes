import{_ as p,X as o,Y as c,Z as n,a0 as s,a1 as e,$ as t,H as l}from"./framework-1ee2252c.js";const i={},u=t(`<h1 id="分组循环" tabindex="-1"><a class="header-anchor" href="#分组循环" aria-hidden="true">#</a> 分组循环</h1><p>[toc]</p><h2 id="模板" tabindex="-1"><a class="header-anchor" href="#模板" aria-hidden="true">#</a> 模板</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
    start <span class="token operator">=</span> i
    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> n <span class="token keyword">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token comment"># 从 start 到 i-1 是一组</span>
    <span class="token comment"># 下一组从 i 开始，无需 i += 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2>`,6),r={id:"_1446-连续字符",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_1446-连续字符","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/consecutive-characters/",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>给你一个字符串 <code>s</code> ，字符串的<strong>能量</strong>定义为：只包含一种字符的最长非空子字符串的长度。</p><p>请你返回字符串 <code>s</code> 的 <strong>能量</strong>。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;leetcode&quot;</span>
输出：<span class="token number">2</span>
解释：子字符串 <span class="token string">&quot;ee&quot;</span> 长度为 <span class="token number">2</span> ，只包含字符 <span class="token string">&#39;e&#39;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;abbcccddddeeeeedcba&quot;</span>
输出：<span class="token number">5</span>
解释：子字符串 <span class="token string">&quot;eeeee&quot;</span> 长度为 <span class="token number">5</span> ，只包含字符 <span class="token string">&#39;e&#39;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s</code> 只包含小写英文字母。</li></ul><blockquote><p>思路：</p><p>​ 分组循环模板</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxPower</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> start <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),b={id:"_1869-哪种连续子字符串更长",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#_1869-哪种连续子字符串更长","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/longer-contiguous-segments-of-ones-than-zeros/",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>给你一个二进制字符串 <code>s</code> 。如果字符串中由 <code>1</code> 组成的 <strong>最长</strong> 连续子字符串 <strong>严格长于</strong> 由 <code>0</code> 组成的 <strong>最长</strong> 连续子字符串，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><ul><li>例如，<code>s = &quot;110100010&quot;</code> 中，由 <code>1</code> 组成的最长连续子字符串的长度是 <code>2</code> ，由 <code>0</code> 组成的最长连续子字符串的长度是 <code>3</code> 。</li></ul><p>注意，如果字符串中不存在 <code>0</code> ，此时认为由 <code>0</code> 组成的最长连续子字符串的长度是 <code>0</code> 。字符串中不存在 <code>1</code> 的情况也适用此规则。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;1101&quot;</span>
输出：<span class="token boolean">true</span>
解释：
由 <span class="token number">1</span> 组成的最长连续子字符串的长度是 <span class="token number">2</span>：<span class="token string">&quot;1101&quot;</span>
由 <span class="token number">0</span> 组成的最长连续子字符串的长度是 <span class="token number">1</span>：<span class="token string">&quot;1101&quot;</span>
由 <span class="token number">1</span> 组成的子字符串更长，故返回 <span class="token boolean">true</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;111000&quot;</span>
输出：<span class="token boolean">false</span>
解释：
由 <span class="token number">1</span> 组成的最长连续子字符串的长度是 <span class="token number">3</span>：<span class="token string">&quot;111000&quot;</span>
由 <span class="token number">0</span> 组成的最长连续子字符串的长度是 <span class="token number">3</span>：<span class="token string">&quot;111000&quot;</span>
由 <span class="token number">1</span> 组成的子字符串不比由 <span class="token number">0</span> 组成的子字符串长，故返回 <span class="token boolean">false</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;110100010&quot;</span>
输出：<span class="token boolean">false</span>
解释：
由 <span class="token number">1</span> 组成的最长连续子字符串的长度是 <span class="token number">2</span>：<span class="token string">&quot;110100010&quot;</span>
由 <span class="token number">0</span> 组成的最长连续子字符串的长度是 <span class="token number">3</span>：<span class="token string">&quot;110100010&quot;</span>
由 <span class="token number">1</span> 组成的子字符串不比由 <span class="token number">0</span> 组成的子字符串长，故返回 <span class="token boolean">false</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s[i]</code> 不是 <code>&#39;0&#39;</code> 就是 <code>&#39;1&#39;</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),q={id:"_1957-删除字符使字符串变好",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_1957-删除字符使字符串变好","aria-hidden":"true"},"#",-1),j={href:"https://leetcode.cn/problems/delete-characters-to-make-fancy-string/",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>一个字符串如果没有 <strong>三个连续</strong> 相同字符，那么它就是一个 <strong>好字符串</strong> 。</p><p>给你一个字符串 <code>s</code> ，请你从 <code>s</code> 删除 <strong>最少</strong> 的字符，使它变成一个 <strong>好字符串</strong> 。</p><p>请你返回删除后的字符串。题目数据保证答案总是 <strong>唯一的</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;leeetcode&quot;</span>
输出：<span class="token string">&quot;leetcode&quot;</span>
解释：
从第一组 <span class="token string">&#39;e&#39;</span> 里面删除一个 <span class="token string">&#39;e&#39;</span> ，得到 <span class="token string">&quot;leetcode&quot;</span> 。
没有连续三个相同字符，所以返回 <span class="token string">&quot;leetcode&quot;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;aaabaaaa&quot;</span>
输出：<span class="token string">&quot;aabaa&quot;</span>
解释：
从第一组 <span class="token string">&#39;a&#39;</span> 里面删除一个 <span class="token string">&#39;a&#39;</span> ，得到 <span class="token string">&quot;aabaaaa&quot;</span> 。
从第二组 <span class="token string">&#39;a&#39;</span> 里面删除两个 <span class="token string">&#39;a&#39;</span> ，得到 <span class="token string">&quot;aabaa&quot;</span> 。
没有连续三个相同字符，所以返回 <span class="token string">&quot;aabaa&quot;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;aab&quot;</span>
输出：<span class="token string">&quot;aab&quot;</span>
解释：没有连续三个相同字符，所以返回 <span class="token string">&quot;aab&quot;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 只包含小写英文字母。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),x={id:"_2038-如果相邻两个颜色均相同则删除当前颜色",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_2038-如果相邻两个颜色均相同则删除当前颜色","aria-hidden":"true"},"#",-1),A={href:"https://leetcode.cn/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/",target:"_blank",rel:"noopener noreferrer"},w=t(`<p>总共有 <code>n</code> 个颜色片段排成一列，每个颜色片段要么是 <code>&#39;A&#39;</code> 要么是 <code>&#39;B&#39;</code> 。给你一个长度为 <code>n</code> 的字符串 <code>colors</code> ，其中 <code>colors[i]</code> 表示第 <code>i</code> 个颜色片段的颜色。</p><p>Alice 和 Bob 在玩一个游戏，他们 <strong>轮流</strong> 从这个字符串中删除颜色。Alice <strong>先手</strong> 。</p><ul><li>如果一个颜色片段为 <code>&#39;A&#39;</code> 且 <strong>相邻两个颜色</strong> 都是颜色 <code>&#39;A&#39;</code> ，那么 Alice 可以删除该颜色片段。Alice <strong>不可以</strong> 删除任何颜色 <code>&#39;B&#39;</code> 片段。</li><li>如果一个颜色片段为 <code>&#39;B&#39;</code> 且 <strong>相邻两个颜色</strong> 都是颜色 <code>&#39;B&#39;</code> ，那么 Bob 可以删除该颜色片段。Bob <strong>不可以</strong> 删除任何颜色 <code>&#39;A&#39;</code> 片段。</li><li>Alice 和 Bob <strong>不能</strong> 从字符串两端删除颜色片段。</li><li>如果其中一人无法继续操作，则该玩家 <strong>输</strong> 掉游戏且另一玩家 <strong>获胜</strong> 。</li></ul><p>假设 Alice 和 Bob 都采用最优策略，如果 Alice 获胜，请返回 <code>true</code>，否则 Bob 获胜，返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：colors <span class="token operator">=</span> <span class="token string">&quot;AAABABB&quot;</span>
输出：<span class="token boolean">true</span>
解释：
<span class="token constant">AAABABB</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token constant">AABABB</span>
Alice 先操作。
她删除从左数第二个 <span class="token string">&#39;A&#39;</span> ，这也是唯一一个相邻颜色片段都是 <span class="token string">&#39;A&#39;</span> 的 <span class="token string">&#39;A&#39;</span> 。

现在轮到 Bob 操作。
Bob 无法执行任何操作，因为没有相邻位置都是 <span class="token string">&#39;B&#39;</span> 的颜色片段 <span class="token string">&#39;B&#39;</span> 。
因此，Alice 获胜，返回 <span class="token boolean">true</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：colors <span class="token operator">=</span> <span class="token string">&quot;AA&quot;</span>
输出：<span class="token boolean">false</span>
解释：
Alice 先操作。
只有 <span class="token number">2</span> 个 <span class="token string">&#39;A&#39;</span> 且它们都在字符串的两端，所以她无法执行任何操作。
因此，Bob 获胜，返回 <span class="token boolean">false</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：colors <span class="token operator">=</span> <span class="token string">&quot;ABBBBBBBAAA&quot;</span>
输出：<span class="token boolean">false</span>
解释：
<span class="token constant">ABBBBBBBAAA</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token constant">ABBBBBBBAA</span>
Alice 先操作。
她唯一的选择是删除从右数起第二个 <span class="token string">&#39;A&#39;</span> 。

<span class="token constant">ABBBBBBBAA</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token constant">ABBBBBBAA</span>
接下来轮到 Bob 操作。
他有许多选择，他可以选择任何一个 <span class="token string">&#39;B&#39;</span> 删除。

然后轮到 Alice 操作，她无法删除任何片段。
所以 Bob 获胜，返回 <span class="token boolean">false</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= colors.length &lt;= 10^5</code></li><li><code>colors</code> 只包含字母 <code>&#39;A&#39;</code> 和 <code>&#39;B&#39;</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,15),y={id:"_1759-统计同质子字符串的数目",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#_1759-统计同质子字符串的数目","aria-hidden":"true"},"#",-1),z={href:"https://leetcode.cn/problems/count-number-of-homogenous-substrings/",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>给你一个字符串 <code>s</code> ，返回 <code>s</code> 中 <strong>同质子字符串</strong> 的数目。由于答案可能很大，只需返回对 <code>109 + 7</code> <strong>取余</strong> 后的结果。</p><p><strong>同质字符串</strong> 的定义为：如果一个字符串中的所有字符都相同，那么该字符串就是同质字符串。</p><p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;abbcccaa&quot;</span>
输出：<span class="token number">13</span>
解释：同质子字符串如下所列：
<span class="token string">&quot;a&quot;</span>   出现 <span class="token number">3</span> 次。
<span class="token string">&quot;aa&quot;</span>  出现 <span class="token number">1</span> 次。
<span class="token string">&quot;b&quot;</span>   出现 <span class="token number">2</span> 次。
<span class="token string">&quot;bb&quot;</span>  出现 <span class="token number">1</span> 次。
<span class="token string">&quot;c&quot;</span>   出现 <span class="token number">3</span> 次。
<span class="token string">&quot;cc&quot;</span>  出现 <span class="token number">2</span> 次。
<span class="token string">&quot;ccc&quot;</span> 出现 <span class="token number">1</span> 次。
<span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;xy&quot;</span>
输出：<span class="token number">2</span>
解释：同质子字符串是 <span class="token string">&quot;x&quot;</span> 和 <span class="token string">&quot;y&quot;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;zzzzz&quot;</span>
输出：<span class="token number">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 由小写字符串组成。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),C={href:"https://leetcode.cn/problems/number-of-smooth-descent-periods-of-a-stock/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://leetcode.cn/contest/weekly-contest-272",target:"_blank",rel:"noopener noreferrer"},I={href:"https://leetcode.cn/contest/weekly-contest-272/problems/number-of-smooth-descent-periods-of-a-stock",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>1408</p><p>相关标签</p><p>相关企业</p><p>提示</p><p>给你一个整数数组 <code>prices</code> ，表示一支股票的历史每日股价，其中 <code>prices[i]</code> 是这支股票第 <code>i</code> 天的价格。</p><p>一个 <strong>平滑下降的阶段</strong> 定义为：对于 <strong>连续一天或者多天</strong> ，每日股价都比 <strong>前一日股价恰好少</strong> <code>1</code> ，这个阶段第一天的股价没有限制。</p><p>请你返回 <strong>平滑下降阶段</strong> 的数目。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">7</span>
解释：总共有 <span class="token number">7</span> 个平滑下降阶段：
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
注意，仅一天按照定义也是平滑下降阶段。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：总共有 <span class="token number">4</span> 个连续平滑下降阶段：<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>
由于 <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">6</span> ≠ <span class="token number">1</span> ，所以 <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 不是平滑下降阶段。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">1</span>
解释：总共有 <span class="token number">1</span> 个平滑下降阶段：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>1 &lt;= prices[i] &lt;= 10^5</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,18),V={id:"_1578-使绳子变成彩色的最短时间",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_1578-使绳子变成彩色的最短时间","aria-hidden":"true"},"#",-1),H={href:"https://leetcode.cn/problems/minimum-time-to-make-rope-colorful/",target:"_blank",rel:"noopener noreferrer"},M=t(`<p>Alice 把 <code>n</code> 个气球排列在一根绳子上。给你一个下标从 <strong>0</strong> 开始的字符串 <code>colors</code> ，其中 <code>colors[i]</code> 是第 <code>i</code> 个气球的颜色。</p><p>Alice 想要把绳子装扮成 <strong>彩色</strong> ，且她不希望两个连续的气球涂着相同的颜色，所以她喊来 Bob 帮忙。Bob 可以从绳子上移除一些气球使绳子变成 <strong>彩色</strong> 。给你一个下标从 <strong>0</strong> 开始的整数数组 <code>neededTime</code> ，其中 <code>neededTime[i]</code> 是 Bob 从绳子上移除第 <code>i</code> 个气球需要的时间（以秒为单位）。</p><p>返回 Bob 使绳子变成 <strong>彩色</strong> 需要的 <strong>最少时间</strong> 。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/ballon1.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：colors <span class="token operator">=</span> <span class="token string">&quot;abaac&quot;</span><span class="token punctuation">,</span> neededTime <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：在上图中，<span class="token string">&#39;a&#39;</span> 是蓝色，<span class="token string">&#39;b&#39;</span> 是红色且 <span class="token string">&#39;c&#39;</span> 是绿色。
Bob 可以移除下标 <span class="token number">2</span> 的蓝色气球。这将花费 <span class="token number">3</span> 秒。
移除后，不存在两个连续的气球涂着相同的颜色。总时间 <span class="token operator">=</span> <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/balloon2.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：colors <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span> neededTime <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
解释：绳子已经是彩色的，Bob 不需要从绳子上移除任何气球。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/balloon3.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：colors <span class="token operator">=</span> <span class="token string">&quot;aabaa&quot;</span><span class="token punctuation">,</span> neededTime <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：Bob 会移除下标 <span class="token number">0</span> 和下标 <span class="token number">4</span> 处的气球。这两个气球各需要 <span class="token number">1</span> 秒来移除。
移除后，不存在两个连续的气球涂着相同的颜色。总时间 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == colors.length == neededTime.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= neededTime[i] &lt;= 10^4</code></li><li><code>colors</code> 仅由小写英文字母组成</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,17),P={id:"_1839-所有元音按顺序排布的最长子字符串",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#_1839-所有元音按顺序排布的最长子字符串","aria-hidden":"true"},"#",-1),X={href:"https://leetcode.cn/problems/longest-substring-of-all-vowels-in-order/",target:"_blank",rel:"noopener noreferrer"},Y=t(`<p>当一个字符串满足如下条件时，我们称它是 <strong>美丽的</strong> ：</p><ul><li>所有 5 个英文元音字母（<code>&#39;a&#39;</code> ，<code>&#39;e&#39;</code> ，<code>&#39;i&#39;</code> ，<code>&#39;o&#39;</code> ，<code>&#39;u&#39;</code>）都必须 <strong>至少</strong> 出现一次。</li><li>这些元音字母的顺序都必须按照 <strong>字典序</strong> 升序排布（也就是说所有的 <code>&#39;a&#39;</code> 都在 <code>&#39;e&#39;</code> 前面，所有的 <code>&#39;e&#39;</code> 都在 <code>&#39;i&#39;</code> 前面，以此类推）</li></ul><p>比方说，字符串 <code>&quot;aeiou&quot;</code> 和 <code>&quot;aaaaaaeiiiioou&quot;</code> 都是 <strong>美丽的</strong> ，但是 <code>&quot;uaeio&quot;</code> ，<code>&quot;aeoiu&quot;</code> 和 <code>&quot;aaaeeeooo&quot;</code> <strong>不是美丽的</strong> 。</p><p>给你一个只包含英文元音字母的字符串 <code>word</code> ，请你返回 <code>word</code> 中 <strong>最长美丽子字符串的长度</strong> 。如果不存在这样的子字符串，请返回 <code>0</code> 。</p><p><strong>子字符串</strong> 是字符串中一个连续的字符序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：word <span class="token operator">=</span> <span class="token string">&quot;aeiaaioaaaaeiiiiouuuooaauuaeiu&quot;</span>
输出：<span class="token number">13</span>
解释：最长子字符串是 <span class="token string">&quot;aaaaeiiiiouuu&quot;</span> ，长度为 <span class="token number">13</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：word <span class="token operator">=</span> <span class="token string">&quot;aeeeiiiioooauuuaeiou&quot;</span>
输出：<span class="token number">5</span>
解释：最长子字符串是 <span class="token string">&quot;aeiou&quot;</span> ，长度为 <span class="token number">5</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：word <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
输出：<span class="token number">0</span>
解释：没有美丽子字符串，所以返回 <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length &lt;= 5 * 10^5</code></li><li><code>word</code> 只包含字符 <code>&#39;a&#39;</code>，<code>&#39;e&#39;</code>，<code>&#39;i&#39;</code>，<code>&#39;o&#39;</code> 和 <code>&#39;u&#39;</code> 。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),Z={id:"_1887-使数组元素相等的减少操作次数",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#_1887-使数组元素相等的减少操作次数","aria-hidden":"true"},"#",-1),D={href:"https://leetcode.cn/problems/reduction-operations-to-make-the-array-elements-equal/",target:"_blank",rel:"noopener noreferrer"},F=t(`<p>给你一个整数数组 <code>nums</code> ，你的目标是令 <code>nums</code> 中的所有元素相等。完成一次减少操作需要遵照下面的几个步骤：</p><ol><li>找出 <code>nums</code> 中的 <strong>最大</strong> 值。记这个值为 <code>largest</code> 并取其下标 <code>i</code> （<strong>下标从 0 开始计数</strong>）。如果有多个元素都是最大值，则取最小的 <code>i</code> 。</li><li>找出 <code>nums</code> 中的 <strong>下一个最大</strong> 值，这个值 <strong>严格小于</strong> <code>largest</code> ，记为 <code>nextLargest</code> 。</li><li>将 <code>nums[i]</code> 减少到 <code>nextLargest</code> 。</li></ol><p>返回使 <code>nums</code> 中的所有元素相等的操作次数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：需要 <span class="token number">3</span> 次操作使 nums 中的所有元素相等：
<span class="token number">1.</span> largest <span class="token operator">=</span> <span class="token number">5</span> 下标为 <span class="token number">0</span> 。nextLargest <span class="token operator">=</span> <span class="token number">3</span> 。将 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 减少到 <span class="token number">3</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token number">2.</span> largest <span class="token operator">=</span> <span class="token number">3</span> 下标为 <span class="token number">0</span> 。nextLargest <span class="token operator">=</span> <span class="token number">1</span> 。将 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 减少到 <span class="token number">1</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token number">3.</span> largest <span class="token operator">=</span> <span class="token number">3</span> 下标为 <span class="token number">2</span> 。nextLargest <span class="token operator">=</span> <span class="token number">1</span> 。将 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 减少到 <span class="token number">1</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
解释：nums 中的所有元素已经是相等的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：需要 <span class="token number">4</span> 次操作使 nums 中的所有元素相等：
<span class="token number">1.</span> largest <span class="token operator">=</span> <span class="token number">3</span> 下标为 <span class="token number">4</span> 。nextLargest <span class="token operator">=</span> <span class="token number">2</span> 。将 nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 减少到 <span class="token number">2</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
<span class="token number">2.</span> largest <span class="token operator">=</span> <span class="token number">2</span> 下标为 <span class="token number">2</span> 。nextLargest <span class="token operator">=</span> <span class="token number">1</span> 。将 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 减少到 <span class="token number">1</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。 
<span class="token number">3.</span> largest <span class="token operator">=</span> <span class="token number">2</span> 下标为 <span class="token number">3</span> 。nextLargest <span class="token operator">=</span> <span class="token number">1</span> 。将 nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 减少到 <span class="token number">1</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。 
<span class="token number">4.</span> largest <span class="token operator">=</span> <span class="token number">2</span> 下标为 <span class="token number">4</span> 。nextLargest <span class="token operator">=</span> <span class="token number">1</span> 。将 nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 减少到 <span class="token number">1</span> 。nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= nums[i] &lt;= 5 * 10^4</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),G={id:"_2110-股票平滑下跌阶段的数目",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#_2110-股票平滑下跌阶段的数目","aria-hidden":"true"},"#",-1),K={href:"https://leetcode.cn/problems/number-of-smooth-descent-periods-of-a-stock/",target:"_blank",rel:"noopener noreferrer"},O=t(`<p>给你一个整数数组 <code>prices</code> ，表示一支股票的历史每日股价，其中 <code>prices[i]</code> 是这支股票第 <code>i</code> 天的价格。</p><p>一个 <strong>平滑下降的阶段</strong> 定义为：对于 <strong>连续一天或者多天</strong> ，每日股价都比 <strong>前一日股价恰好少</strong> <code>1</code> ，这个阶段第一天的股价没有限制。</p><p>请你返回 <strong>平滑下降阶段</strong> 的数目。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">7</span>
解释：总共有 <span class="token number">7</span> 个平滑下降阶段：
<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
注意，仅一天按照定义也是平滑下降阶段。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：总共有 <span class="token number">4</span> 个连续平滑下降阶段：<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>
由于 <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">6</span> ≠ <span class="token number">1</span> ，所以 <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 不是平滑下降阶段。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">1</span>
解释：总共有 <span class="token number">1</span> 个平滑下降阶段：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>1 &lt;= prices[i] &lt;= 10^5</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),R={id:"_228-汇总区间",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#_228-汇总区间","aria-hidden":"true"},"#",-1),W={href:"https://leetcode.cn/problems/summary-ranges/",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p>给定一个 <strong>无重复元素</strong> 的 <strong>有序</strong> 整数数组 <code>nums</code> 。</p><p>返回 <strong>恰好覆盖数组中所有数字</strong> 的 <strong>最小有序</strong> 区间范围列表。也就是说，<code>nums</code> 的每个元素都恰好被某个区间范围所覆盖，并且不存在属于某个范围但不属于 <code>nums</code> 的数字 <code>x</code> 。</p><p>列表中的每个区间范围 <code>[a,b]</code> 应该按如下格式输出：</p><ul><li><code>&quot;a-&gt;b&quot;</code> ，如果 <code>a != b</code></li><li><code>&quot;a&quot;</code> ，如果 <code>a == b</code></li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token string">&quot;0-&gt;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;4-&gt;5&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">]</span>
解释：区间范围是：
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;0-&gt;2&quot;</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;4-&gt;5&quot;</span>
<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;7&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2-&gt;4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;8-&gt;9&quot;</span><span class="token punctuation">]</span>
解释：区间范围是：
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;0&quot;</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;2-&gt;4&quot;</span>
<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;6&quot;</span>
<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token string">&quot;8-&gt;9&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 20</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li><li><code>nums</code> 中的所有值都 <strong>互不相同</strong></li><li><code>nums</code> 按升序排列</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,13),sn={id:"_2765-最长交替子序列",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#_2765-最长交替子序列","aria-hidden":"true"},"#",-1),en={href:"https://leetcode.cn/problems/longest-alternating-subarray/",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。如果 <code>nums</code> 中长度为 <code>m</code> 的子数组 <code>s</code> 满足以下条件，我们称它是一个 <strong>交替子序列</strong> ：</p><ul><li><code>m</code> 大于 <code>1</code> 。</li><li><code>s1 = s0 + 1</code> 。</li><li>下标从 <strong>0</strong> 开始的子数组 <code>s</code> 与数组 <code>[s0, s1, s0, s1,...,s(m-1) % 2]</code> 一样。也就是说，<code>s1 - s0 = 1</code> ，<code>s2 - s1 = -1</code> ，<code>s3 - s2 = 1</code> ，<code>s4 - s3 = -1</code> ，以此类推，直到 <code>s[m - 1] - s[m - 2] = (-1)m</code> 。</li></ul><p>请你返回 <code>nums</code> 中所有 <strong>交替</strong> 子数组中，最长的长度，如果不存在交替子数组，请你返回 <code>-1</code> 。</p><p>子数组是一个数组中一段连续 <strong>非空</strong> 的元素序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：交替子数组有 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> ，<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。最长的子数组为 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> ，长度为<span class="token number">4</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> 和 <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 是仅有的两个交替子数组。它们长度都为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 10^4</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,13),pn={id:"_2760-最长奇偶子数组",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#_2760-最长奇偶子数组","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode.cn/problems/longest-even-odd-subarray-with-threshold/",target:"_blank",rel:"noopener noreferrer"},ln=t(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个整数 <code>threshold</code> 。</p><p>请你从 <code>nums</code> 的子数组中找出以下标 <code>l</code> 开头、下标 <code>r</code> 结尾 <code>(0 &lt;= l &lt;= r &lt; nums.length)</code> 且满足以下条件的 <strong>最长子数组</strong> ：</p><ul><li><code>nums[l] % 2 == 0</code></li><li>对于范围 <code>[l, r - 1]</code> 内的所有下标 <code>i</code> ，<code>nums[i] % 2 != nums[i + 1] % 2</code></li><li>对于范围 <code>[l, r]</code> 内的所有下标 <code>i</code> ，<code>nums[i] &lt;= threshold</code></li></ul><p>以整数形式返回满足题目要求的最长子数组的长度。</p><p><strong>注意：子数组</strong> 是数组中的一个连续非空元素序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> threshold <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">3</span>
解释：在这个示例中，我们选择从 l <span class="token operator">=</span> <span class="token number">1</span> 开始、到 r <span class="token operator">=</span> <span class="token number">3</span> <span class="token parameter">结束的子数组</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> ，满足上述条件。
因此，答案就是这个子数组的长度 <span class="token number">3</span> 。可以证明 <span class="token number">3</span> 是满足题目要求的最大长度。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> threshold <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">1</span>
解释：
在这个示例中，我们选择从 l <span class="token operator">=</span> <span class="token number">1</span> 开始、到 r <span class="token operator">=</span> <span class="token number">1</span> <span class="token parameter">结束的子数组</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 。
该子数组满足上述全部条件。可以证明 <span class="token number">1</span> 是满足题目要求的最大长度。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> threshold <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">3</span>
解释：
在这个示例中，我们选择从 l <span class="token operator">=</span> <span class="token number">0</span> 开始、到 r <span class="token operator">=</span> <span class="token number">2</span> <span class="token parameter">结束的子数组</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。 
该子数组满足上述全部条件。
因此，答案就是这个子数组的长度 <span class="token number">3</span> 。可以证明 <span class="token number">3</span> 是满足题目要求的最大长度。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100 </code></li><li><code>1 &lt;= nums[i] &lt;= 100 </code></li><li><code>1 &lt;= threshold &lt;= 100</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,16),un={id:"_2953-统计完全子字符串",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#_2953-统计完全子字符串","aria-hidden":"true"},"#",-1),dn={href:"https://leetcode.cn/problems/count-complete-substrings/",target:"_blank",rel:"noopener noreferrer"},kn=t(`<p>给你一个字符串 <code>word</code> 和一个整数 <code>k</code> 。</p><p>如果 <code>word</code> 的一个子字符串 <code>s</code> 满足以下条件，我们称它是 <strong>完全字符串：</strong></p><ul><li><code>s</code> 中每个字符 <strong>恰好</strong> 出现 <code>k</code> 次。</li><li>相邻字符在字母表中的顺序 <strong>至多</strong> 相差 <code>2</code> 。也就是说，<code>s</code> 中两个相邻字符 <code>c1</code> 和 <code>c2</code> ，它们在字母表中的位置相差 <strong>至多</strong> 为 <code>2</code> 。</li></ul><p>请你返回 <code>word</code> 中 <strong>完全</strong> 子字符串的数目。</p><p><strong>子字符串</strong> 指的是一个字符串中一段连续 <strong>非空</strong> 的字符序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：word <span class="token operator">=</span> <span class="token string">&quot;igigee&quot;</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span>
解释：完全子字符串需要满足每个字符恰好出现 <span class="token number">2</span> 次，且相邻字符相差至多为 <span class="token number">2</span> ：igigee<span class="token punctuation">,</span> igigee<span class="token punctuation">,</span> igigee 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：word <span class="token operator">=</span> <span class="token string">&quot;aaabbbccc&quot;</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">6</span>
解释：完全子字符串需要满足每个字符恰好出现 <span class="token number">3</span> 次，且相邻字符相差至多为 <span class="token number">2</span> ：aaabbbccc<span class="token punctuation">,</span> aaabbbccc<span class="token punctuation">,</span> aaabbbccc<span class="token punctuation">,</span> aaabbbccc<span class="token punctuation">,</span> aaabbbccc<span class="token punctuation">,</span> aaabbbccc 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length &lt;= 10^5</code></li><li><code>word</code> 只包含小写英文字母。</li><li><code>1 &lt;= k &lt;= word.length</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),mn={id:"_3011-判断一个数组是否可以变为有序",tabindex:"-1"},bn=n("a",{class:"header-anchor",href:"#_3011-判断一个数组是否可以变为有序","aria-hidden":"true"},"#",-1),vn={href:"https://leetcode.cn/problems/find-if-array-can-be-sorted/",target:"_blank",rel:"noopener noreferrer"},gn=t(`<p>给你一个下标从 <strong>0</strong> 开始且全是 <strong>正</strong> 整数的数组 <code>nums</code> 。</p><p>一次 <strong>操作</strong> 中，如果两个 <strong>相邻</strong> 元素在二进制下数位为 <strong>1</strong> 的数目 <strong>相同</strong> ，那么你可以将这两个元素交换。你可以执行这个操作 <strong>任意次</strong> （<strong>也可以 0 次</strong>）。</p><p>如果你可以使数组变有序，请你返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span>
输出：<span class="token boolean">true</span>
解释：我们先观察每个元素的二进制表示。 <span class="token number">2</span> ，<span class="token number">4</span> 和 <span class="token number">8</span> 分别都只有一个数位为 <span class="token number">1</span> ，分别为 <span class="token string">&quot;10&quot;</span> ，<span class="token string">&quot;100&quot;</span> 和 <span class="token string">&quot;1000&quot;</span> 。<span class="token number">15</span> 和 <span class="token number">30</span> 分别有 <span class="token number">4</span> 个数位为 <span class="token number">1</span> ：<span class="token string">&quot;1111&quot;</span> 和 <span class="token string">&quot;11110&quot;</span> 。
我们可以通过 <span class="token number">4</span> 个操作使数组有序：
<span class="token operator">-</span> 交换 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 和 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 。<span class="token number">8</span> 和 <span class="token number">4</span> 分别只有 <span class="token number">1</span> 个数位为 <span class="token number">1</span> 。数组变为 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 交换 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 和 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 。<span class="token number">8</span> 和 <span class="token number">2</span> 分别只有 <span class="token number">1</span> 个数位为 <span class="token number">1</span> 。数组变为 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 交换 nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 和 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 。<span class="token number">4</span> 和 <span class="token number">2</span> 分别只有 <span class="token number">1</span> 个数位为 <span class="token number">1</span> 。数组变为 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 交换 nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 和 nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 。<span class="token number">30</span> 和 <span class="token number">15</span> 分别有 <span class="token number">4</span> 个数位为 <span class="token number">1</span> ，数组变为 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> 。
数组变成有序的，所以我们返回 <span class="token boolean">true</span> 。
注意我们还可以通过其他的操作序列使数组变得有序。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token boolean">true</span>
解释：数组已经是有序的，所以我们返回 <span class="token boolean">true</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token boolean">false</span>
解释：无法通过操作使数组变为有序。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>1 &lt;= nums[i] &lt;= 2^8</code></li></ul><blockquote><p>思路：</p><p>​ 分组循环，获取到比特<code>1</code>相同的为一组，进行排序，最后看数组是否是整体有序的。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canSortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> start <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">int</span> ones <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ones<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14);function hn(qn,_n){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h4",r,[d,s(),n("a",k,[s("1446. 连续字符"),e(a)])]),m,n("h4",b,[v,s(),n("a",g,[s("1869. 哪种连续子字符串更长"),e(a)])]),h,n("h4",q,[_,s(),n("a",j,[s("1957. 删除字符使字符串变好"),e(a)])]),f,n("h4",x,[B,s(),n("a",A,[s("2038. 如果相邻两个颜色均相同则删除当前颜色"),e(a)])]),w,n("h4",y,[L,s(),n("a",z,[s("1759. 统计同质子字符串的数目"),e(a)])]),T,n("p",null,[n("a",C,[s("2110. 股票平滑下跌阶段的数目"),e(a)])]),n("p",null,[n("a",S,[s("第 272 场周赛"),e(a)]),n("a",I,[s("Q3"),e(a)])]),N,n("h4",V,[E,s(),n("a",H,[s("1578. 使绳子变成彩色的最短时间"),e(a)])]),M,n("h4",P,[Q,s(),n("a",X,[s("1839. 所有元音按顺序排布的最长子字符串"),e(a)])]),Y,n("h4",Z,[$,s(),n("a",D,[s("1887. 使数组元素相等的减少操作次数"),e(a)])]),F,n("h4",G,[J,s(),n("a",K,[s("2110. 股票平滑下跌阶段的数目"),e(a)])]),O,n("h4",R,[U,s(),n("a",W,[s("228. 汇总区间"),e(a)])]),nn,n("h4",sn,[an,s(),n("a",en,[s("2765. 最长交替子序列"),e(a)])]),tn,n("h4",pn,[on,s(),n("a",cn,[s("2760. 最长奇偶子数组"),e(a)])]),ln,n("h4",un,[rn,s(),n("a",dn,[s("2953. 统计完全子字符串"),e(a)])]),kn,n("h4",mn,[bn,s(),n("a",vn,[s("3011. 判断一个数组是否可以变为有序"),e(a)])]),gn])}const fn=p(i,[["render",hn],["__file","groupCycle.html.vue"]]);export{fn as default};
