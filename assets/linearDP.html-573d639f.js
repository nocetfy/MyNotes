import{_ as t,H as o,X as c,Y as l,Z as n,a0 as s,a1 as e,$ as a}from"./framework-47f15ee6.js";const u={},i=a('<h1 id="线性dp" tabindex="-1"><a class="header-anchor" href="#线性dp" aria-hidden="true">#</a> 线性dp</h1><p>[toc]</p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><p>线性 DP 是指，从数组前缀（后缀）转移到另一个前缀（后缀）的 DP。像最长递增子序列、最长公共子序列都属于这一类。</p><h3 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h3><p>线性dp通常是通过选或不选、枚举选哪个两种思路思考，具体用哪个要看哪个用起来比较容易。</p><p>难点：想清楚 dfs的每个参数含义 ，如何定义一个dfs是重中之重。</p><p>推荐的思考方式：自己模拟寻找子问题，然后过渡到如何状态转移</p><p>建议在练习中思考递归的边界、递归的入口、答案如何形成、状态如何转移等等。</p><p>答案形成一般都是在dfs外面统计。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>枚举选哪个, 适用于完全需要知道子序列相邻两数的信息</li></ul><p>​ 例如：最长递增子序列 O(n^2)</p><ul><li>选或不选</li></ul><p>​ 1.适用于子序列和相邻数字无关，（如 2787. 将一个数字表示成幂的和的方案数 ）</p><p>​ 2.子序列相邻数字弱关联，（如 2786. 访问数组中的位置使分数最大 的奇偶性）</p><ul><li>思考</li></ul>',17),r=n("p",null,[s("​ 推荐先用选或不选来写，因为时间复杂度更低，为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(" , 而枚举选哪个通常时间复杂度为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(n^2)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])]),n("span",{class:"mclose"},")")])])]),s("。")],-1),k=n("h3",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),d={id:"_119-杨辉三角-ii",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_119-杨辉三角-ii","aria-hidden":"true"},"#",-1),b={href:"https://leetcode.cn/problems/pascals-triangle-ii/",target:"_blank",rel:"noopener noreferrer"},v=a(`<p>给定一个非负索引 <code>rowIndex</code>，返回「杨辉三角」的第 <code>rowIndex</code> 行。</p><p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/1626927345-DZmfxB-PascalTriangleAnimated2.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> rowIndex <span class="token operator">=</span> <span class="token number">3</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> rowIndex <span class="token operator">=</span> <span class="token number">0</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> rowIndex <span class="token operator">=</span> <span class="token number">1</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>0 &lt;= rowIndex &lt;= 33</code></li></ul><p><strong>进阶：</strong></p><p>你可以优化你的算法到 <code>O(rowIndex)</code> 空间复杂度吗？</p><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),g={id:"_403-青蛙过河",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_403-青蛙过河","aria-hidden":"true"},"#",-1),q={href:"https://leetcode-cn.com/problems/frog-jump/",target:"_blank",rel:"noopener noreferrer"},j=a(`<p>一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。</p><p>给你石子的位置列表 <code>stones</code>（用单元格序号 <strong>升序</strong> 表示）， 请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。</p><p>开始时， 青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格 1 跳至单元格 2 ）。</p><p>如果青蛙上一步跳跃了 <code>k</code> 个单位，那么它接下来的跳跃距离只能选择为 <code>k - 1</code>、<code>k</code> 或 <code>k + 1</code> 个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">]</span>
输出：<span class="token boolean">true</span>
解释：青蛙可以成功过河，按照如下方案跳跃：跳 <span class="token number">1</span> 个单位到第 <span class="token number">2</span> 块石子<span class="token punctuation">,</span> 然后跳 <span class="token number">2</span> 个单位到第 <span class="token number">3</span> 块石子<span class="token punctuation">,</span> 接着 跳 <span class="token number">2</span> 个单位到第 <span class="token number">4</span> 块石子<span class="token punctuation">,</span> 然后跳 <span class="token number">3</span> 个单位到第 <span class="token number">6</span> 块石子<span class="token punctuation">,</span> 跳 <span class="token number">4</span> 个单位到第 <span class="token number">7</span> 块石子<span class="token punctuation">,</span> 最后，跳 <span class="token number">5</span> 个单位到第 <span class="token number">8</span> 个石子（即最后一块石子）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>
输出：<span class="token boolean">false</span>
解释：这是因为第 <span class="token number">5</span> 和第 <span class="token number">6</span> 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 动态规划</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canCross</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> stones<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>stones<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 上一次所在的下标</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 上一步的步数</span>
                <span class="token keyword">int</span> k <span class="token operator">=</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> stones<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// 最多跳跃j + 1</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),f={id:"_338-比特位计数",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#_338-比特位计数","aria-hidden":"true"},"#",-1),y={href:"https://leetcode-cn.com/problems/counting-bits/",target:"_blank",rel:"noopener noreferrer"},w=a(`<p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code> 中的每个 <code>i</code> ，计算其二进制表示中 <strong><code>1</code> 的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组 <code>ans</code> 作为答案。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
解释：
<span class="token number">0</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
解释：
<span class="token number">0</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">10</span>
<span class="token number">3</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">11</span>
<span class="token number">4</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">100</span>
<span class="token number">5</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 对于一个二进制数来说，如果它的最低位为 <code>1 (%2 为 1）</code>, 则它与 <code>n/2</code> 的 <code>1</code> 个数相差 <code>1</code>。 如果它的最低位为 <code>0</code>，则它与 <code>n/2</code> 的 <code>1</code> 个数相同 。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> 
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,8),x={id:"_467-环绕字符串中唯一的子字符串",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#_467-环绕字符串中唯一的子字符串","aria-hidden":"true"},"#",-1),z={href:"https://leetcode.cn/problems/unique-substrings-in-wraparound-string/",target:"_blank",rel:"noopener noreferrer"},I=a(`<p>定义字符串 <code>base</code> 为一个 <code>&quot;abcdefghijklmnopqrstuvwxyz&quot;</code> 无限环绕的字符串，所以 <code>base</code> 看起来是这样的：</p><ul><li><code>&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;</code>.</li></ul><p>给你一个字符串 <code>s</code> ，请你统计并返回 <code>s</code> 中有多少 <strong>不同非空子串</strong> 也在 <code>base</code> 中出现。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>
输出：<span class="token number">1</span>
解释：字符串 s 的子字符串 <span class="token string">&quot;a&quot;</span> 在 base 中出现。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;cac&quot;</span>
输出：<span class="token number">2</span>
解释：字符串 s <span class="token function">有两个子字符串</span> <span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">)</span> 在 base 中出现。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;zab&quot;</span>
输出：<span class="token number">6</span>
解释：字符串 s <span class="token function">有六个子字符串</span> <span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;za&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> and <span class="token string">&quot;zab&quot;</span><span class="token punctuation">)</span> 在 base 中出现。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li>s 由小写英文字母组成</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),L={id:"_650-只有两个键的键盘",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#_650-只有两个键的键盘","aria-hidden":"true"},"#",-1),S={href:"https://leetcode-cn.com/problems/2-keys-keyboard/",target:"_blank",rel:"noopener noreferrer"},B=a(`<p>最初记事本上只有一个字符 <code>&#39;A&#39;</code> 。你每次可以对这个记事本进行两种操作：</p><ul><li><code>Copy All</code>（复制全部）：复制这个记事本中的所有字符（不允许仅复制部分字符）。</li><li><code>Paste</code>（粘贴）：粘贴 <strong>上一次</strong> 复制的字符。</li></ul><p>给你一个数字 <code>n</code> ，你需要使用最少的操作次数，在记事本上输出 <strong>恰好</strong> <code>n</code> 个 <code>&#39;A&#39;</code> 。返回能够打印出 <code>n</code> 个 <code>&#39;A&#39;</code> 的最少操作次数。</p><p><strong>示例 1：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入：<span class="token number">3</span>
输出：<span class="token number">3</span>
解释：
最初<span class="token punctuation">,</span> 只有一个字符 <span class="token char">&#39;A&#39;</span>。
第 <span class="token number">1</span> 步<span class="token punctuation">,</span> 使用 <span class="token class-name">Copy</span> <span class="token class-name">All</span> 操作。
第 <span class="token number">2</span> 步<span class="token punctuation">,</span> 使用 <span class="token class-name">Paste</span> 操作来获得 <span class="token char">&#39;AA&#39;</span>。
第 <span class="token number">3</span> 步<span class="token punctuation">,</span> 使用 <span class="token class-name">Paste</span> 操作来获得 <span class="token char">&#39;AAA&#39;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 质数的次数就是其本身，合数的等于其质因数的dp和。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minSteps</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">113</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">137</span><span class="token punctuation">,</span><span class="token number">139</span><span class="token punctuation">,</span><span class="token number">149</span><span class="token punctuation">,</span><span class="token number">151</span><span class="token punctuation">,</span><span class="token number">157</span><span class="token punctuation">,</span><span class="token number">163</span><span class="token punctuation">,</span><span class="token number">167</span><span class="token punctuation">,</span><span class="token number">173</span><span class="token punctuation">,</span><span class="token number">179</span><span class="token punctuation">,</span><span class="token number">181</span><span class="token punctuation">,</span><span class="token number">191</span><span class="token punctuation">,</span><span class="token number">193</span><span class="token punctuation">,</span><span class="token number">197</span><span class="token punctuation">,</span><span class="token number">199</span><span class="token punctuation">,</span><span class="token number">211</span><span class="token punctuation">,</span><span class="token number">223</span><span class="token punctuation">,</span><span class="token number">227</span><span class="token punctuation">,</span><span class="token number">229</span><span class="token punctuation">,</span><span class="token number">233</span><span class="token punctuation">,</span><span class="token number">239</span><span class="token punctuation">,</span><span class="token number">241</span><span class="token punctuation">,</span><span class="token number">251</span><span class="token punctuation">,</span><span class="token number">257</span><span class="token punctuation">,</span><span class="token number">263</span><span class="token punctuation">,</span><span class="token number">269</span><span class="token punctuation">,</span><span class="token number">271</span><span class="token punctuation">,</span><span class="token number">277</span><span class="token punctuation">,</span><span class="token number">281</span><span class="token punctuation">,</span><span class="token number">283</span><span class="token punctuation">,</span><span class="token number">293</span><span class="token punctuation">,</span><span class="token number">307</span><span class="token punctuation">,</span><span class="token number">311</span><span class="token punctuation">,</span><span class="token number">313</span><span class="token punctuation">,</span><span class="token number">317</span><span class="token punctuation">,</span><span class="token number">331</span><span class="token punctuation">,</span><span class="token number">337</span><span class="token punctuation">,</span><span class="token number">347</span><span class="token punctuation">,</span><span class="token number">349</span><span class="token punctuation">,</span>
<span class="token number">353</span><span class="token punctuation">,</span><span class="token number">359</span><span class="token punctuation">,</span><span class="token number">367</span><span class="token punctuation">,</span><span class="token number">373</span><span class="token punctuation">,</span><span class="token number">379</span><span class="token punctuation">,</span><span class="token number">383</span><span class="token punctuation">,</span><span class="token number">389</span><span class="token punctuation">,</span><span class="token number">397</span><span class="token punctuation">,</span><span class="token number">401</span><span class="token punctuation">,</span><span class="token number">409</span><span class="token punctuation">,</span><span class="token number">419</span><span class="token punctuation">,</span><span class="token number">421</span><span class="token punctuation">,</span><span class="token number">431</span><span class="token punctuation">,</span><span class="token number">433</span><span class="token punctuation">,</span><span class="token number">439</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">,</span><span class="token number">449</span><span class="token punctuation">,</span><span class="token number">457</span><span class="token punctuation">,</span><span class="token number">461</span><span class="token punctuation">,</span><span class="token number">463</span><span class="token punctuation">,</span><span class="token number">467</span><span class="token punctuation">,</span><span class="token number">479</span><span class="token punctuation">,</span><span class="token number">487</span><span class="token punctuation">,</span><span class="token number">491</span><span class="token punctuation">,</span><span class="token number">499</span><span class="token punctuation">,</span><span class="token number">503</span><span class="token punctuation">,</span><span class="token number">509</span><span class="token punctuation">,</span><span class="token number">521</span><span class="token punctuation">,</span><span class="token number">523</span><span class="token punctuation">,</span><span class="token number">541</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">557</span><span class="token punctuation">,</span><span class="token number">563</span><span class="token punctuation">,</span><span class="token number">569</span><span class="token punctuation">,</span><span class="token number">571</span><span class="token punctuation">,</span><span class="token number">577</span><span class="token punctuation">,</span><span class="token number">587</span><span class="token punctuation">,</span><span class="token number">593</span><span class="token punctuation">,</span><span class="token number">599</span><span class="token punctuation">,</span><span class="token number">601</span><span class="token punctuation">,</span><span class="token number">607</span><span class="token punctuation">,</span><span class="token number">613</span><span class="token punctuation">,</span><span class="token number">617</span><span class="token punctuation">,</span><span class="token number">619</span><span class="token punctuation">,</span><span class="token number">631</span><span class="token punctuation">,</span><span class="token number">641</span><span class="token punctuation">,</span><span class="token number">643</span><span class="token punctuation">,</span><span class="token number">647</span><span class="token punctuation">,</span><span class="token number">653</span><span class="token punctuation">,</span><span class="token number">659</span><span class="token punctuation">,</span><span class="token number">661</span><span class="token punctuation">,</span><span class="token number">673</span><span class="token punctuation">,</span><span class="token number">677</span><span class="token punctuation">,</span><span class="token number">683</span><span class="token punctuation">,</span><span class="token number">691</span><span class="token punctuation">,</span><span class="token number">701</span><span class="token punctuation">,</span><span class="token number">709</span><span class="token punctuation">,</span><span class="token number">719</span><span class="token punctuation">,</span><span class="token number">727</span><span class="token punctuation">,</span><span class="token number">733</span><span class="token punctuation">,</span><span class="token number">739</span><span class="token punctuation">,</span><span class="token number">743</span><span class="token punctuation">,</span><span class="token number">751</span><span class="token punctuation">,</span><span class="token number">757</span><span class="token punctuation">,</span><span class="token number">761</span><span class="token punctuation">,</span>
<span class="token number">769</span><span class="token punctuation">,</span><span class="token number">773</span><span class="token punctuation">,</span><span class="token number">787</span><span class="token punctuation">,</span><span class="token number">797</span><span class="token punctuation">,</span><span class="token number">809</span><span class="token punctuation">,</span><span class="token number">811</span><span class="token punctuation">,</span><span class="token number">821</span><span class="token punctuation">,</span><span class="token number">823</span><span class="token punctuation">,</span><span class="token number">827</span><span class="token punctuation">,</span><span class="token number">829</span><span class="token punctuation">,</span><span class="token number">839</span><span class="token punctuation">,</span><span class="token number">853</span><span class="token punctuation">,</span><span class="token number">857</span><span class="token punctuation">,</span><span class="token number">859</span><span class="token punctuation">,</span><span class="token number">863</span><span class="token punctuation">,</span><span class="token number">877</span><span class="token punctuation">,</span><span class="token number">881</span><span class="token punctuation">,</span><span class="token number">883</span><span class="token punctuation">,</span><span class="token number">887</span><span class="token punctuation">,</span><span class="token number">907</span><span class="token punctuation">,</span><span class="token number">911</span><span class="token punctuation">,</span><span class="token number">919</span><span class="token punctuation">,</span><span class="token number">929</span><span class="token punctuation">,</span><span class="token number">937</span><span class="token punctuation">,</span><span class="token number">941</span><span class="token punctuation">,</span><span class="token number">947</span><span class="token punctuation">,</span><span class="token number">953</span><span class="token punctuation">,</span><span class="token number">967</span><span class="token punctuation">,</span><span class="token number">971</span><span class="token punctuation">,</span><span class="token number">977</span><span class="token punctuation">,</span><span class="token number">983</span><span class="token punctuation">,</span><span class="token number">991</span><span class="token punctuation">,</span><span class="token number">997</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
               dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
           <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
               <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">*</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">/</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),T={id:"_678-有效的括号字符串",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_678-有效的括号字符串","aria-hidden":"true"},"#",-1),O={href:"https://leetcode-cn.com/problems/valid-parenthesis-string/",target:"_blank",rel:"noopener noreferrer"},F=a(`<p>给定一个只包含三种字符的字符串：<code>（ </code>，<code>）</code> 和 <code>*</code>，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：</p><ol><li>任何左括号 <code>(</code> 必须有相应的右括号 <code>)</code>。</li><li>任何右括号 <code>)</code> 必须有相应的左括号 <code>(</code> 。</li><li>左括号 <code>(</code> 必须在对应的右括号之前 <code>)</code>。</li><li><code>*</code> 可以被视为单个右括号 <code>)</code> ，或单个左括号 <code>(</code> ，或一个空字符串。</li><li>一个空字符串也被视为有效字符串。</li></ol><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token string">&quot;()&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token string">&quot;(*)&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token string">&quot;(*))&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 双栈，一个保存<code>*</code>的下标，一个保存<code>(</code>的下标，遇到右括号优先移除左括号，最后比较两个栈，如果出现<code>*</code>的下标先出现，则失败</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkValidString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> star <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>star<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    star<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token char">&#39;(&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                star<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 出现*(的情况</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>star<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> star<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 左括号 </span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),K={id:"_688-骑士在棋盘上的概率",tabindex:"-1"},D=n("a",{class:"header-anchor",href:"#_688-骑士在棋盘上的概率","aria-hidden":"true"},"#",-1),V={href:"https://leetcode.cn/problems/knight-probability-in-chessboard/",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>在一个 <code>n x n</code> 的国际象棋棋盘上，一个骑士从单元格 <code>(row, column)</code> 开始，并尝试进行 <code>k</code> 次移动。行和列是 <strong>从 0 开始</strong> 的，所以左上单元格是 <code>(0,0)</code> ，右下单元格是 <code>(n - 1, n - 1)</code> 。</p><p>象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/knight.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。</p><p>骑士继续移动，直到它走了 <code>k</code> 步或离开了棋盘。</p><p>返回 <em>骑士在棋盘停止移动后仍留在棋盘上的概率</em> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">0.0625</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> <span class="token function">有两步</span><span class="token punctuation">(</span><span class="token function">到</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">，</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>可以让骑士留在棋盘上。
在每一个位置上，也有两种移动可以让骑士留在棋盘上。
骑士留在棋盘上的总概率是<span class="token number">0.0625</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token number">0</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">1.00000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= n &lt;= 25</code></li><li><code>0 &lt;= k &lt;= 100</code></li><li><code>0 &lt;= row, column &lt;= n - 1</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,15),Z={id:"_91-解码方法",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#_91-解码方法","aria-hidden":"true"},"#",-1),X={href:"https://leetcode-cn.com/problems/decode-ways/",target:"_blank",rel:"noopener noreferrer"},J=a(`<p>一条包含字母 <code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;A&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token string">&#39;B&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span>
<span class="token operator">...</span>
<span class="token string">&#39;Z&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要 <strong>解码</strong> 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，<code>&quot;11106&quot;</code> 可以映射为：</p><ul><li><code>&quot;AAJF&quot;</code> ，将消息分组为 <code>(1 1 10 6)</code></li><li><code>&quot;KJF&quot;</code> ，将消息分组为 <code>(11 10 6)</code></li></ul><p>注意，消息不能分组为 <code>(1 11 06)</code> ，因为 <code>&quot;06&quot;</code> 不能映射为 <code>&quot;F&quot;</code> ，这是由于 <code>&quot;6&quot;</code> 和 <code>&quot;06&quot;</code> 在映射中并不等价。</p><p>给你一个只含数字的 <strong>非空</strong> 字符串 <code>s</code> ，请计算并返回 <strong>解码</strong> 方法的 <strong>总数</strong> 。</p><p>题目数据保证答案肯定是一个 <strong>32 位</strong> 的整数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;12&quot;</span>
输出：<span class="token number">2</span>
解释：它可以解码为 <span class="token string">&quot;AB&quot;</span>（<span class="token number">1</span> <span class="token number">2</span>）或者 <span class="token string">&quot;L&quot;</span>（<span class="token number">12</span>）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;226&quot;</span>
输出：<span class="token number">3</span>
解释：它可以解码为 <span class="token string">&quot;BZ&quot;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;VF&quot;</span> <span class="token punctuation">(</span><span class="token number">22</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 或者 <span class="token string">&quot;BBF&quot;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">6</span><span class="token punctuation">)</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span>
输出：<span class="token number">0</span>
解释：没有字符映射到以 <span class="token number">0</span> 开头的数字。
含有 <span class="token number">0</span> 的有效映射是 <span class="token string">&#39;J&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&quot;10&quot;</span> 和 <span class="token string">&#39;T&#39;</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&quot;20&quot;</span> 。
由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;06&quot;</span>
输出：<span class="token number">0</span>
解释：<span class="token string">&quot;06&quot;</span> 不能映射到 <span class="token string">&quot;F&quot;</span> ，因为字符串含有前导 <span class="token number">0</span>（<span class="token string">&quot;6&quot;</span> 和 <span class="token string">&quot;06&quot;</span> 在映射中并不等价）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 如果连续的两位数符合条件，就相当于一个上楼梯的题目，可以有两种选法：</p><ol><li>一位数决定一个字母</li><li>两位数决定一个字母 就相当于<code>dp[i] = dp[i-1] + dp[i-2]</code></li></ol><p>​ 升级版爬楼梯，两种特殊情况：</p><ol><li>当前是<code>0</code>，则<code>dp[i] = dp[i - 2]</code></li><li>两位数大于<code>26</code>，则<code>dp[i] = dp[i - 1]</code></li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">=</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token keyword">int</span> a <span class="token operator">=</span> cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">// 前导0通过乘法还是0，不会大于10，消除了前导0</span>
            <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span>cs<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> a <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,18),N={id:"_639-解码方法-ii",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#_639-解码方法-ii","aria-hidden":"true"},"#",-1),R={href:"https://leetcode-cn.com/problems/decode-ways-ii/",target:"_blank",rel:"noopener noreferrer"},H=a(`<p>一条包含字母 <code>A-Z</code> 的消息通过以下映射进行了 <strong>编码</strong> ：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;A&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token string">&#39;B&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span>
<span class="token operator">...</span>
<span class="token string">&#39;Z&#39;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">26</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要 <strong>解码</strong> 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，<code>&quot;11106&quot;</code> 可以映射为：</p><ul><li><code>&quot;AAJF&quot;</code> ，将消息分组为 <code>(1 1 10 6)</code></li><li><code>&quot;KJF&quot;</code> ，将消息分组为 <code>(11 10 6)</code></li></ul><p>注意，消息不能分组为 <code>(1 11 06)</code> ，因为 <code>&quot;06&quot;</code> 不能映射为 <code>&quot;F&quot;</code> ，这是由于 <code>&quot;6&quot;</code> 和 <code>&quot;06&quot;</code> 在映射中并不等价。</p><p><strong>除了</strong> 上面描述的数字字母映射方案，编码消息中可能包含 <code>&#39;*&#39;</code> 字符，可以表示从 <code>&#39;1&#39;</code> 到 <code>&#39;9&#39;</code> 的任一数字（不包括 <code>&#39;0&#39;</code>）。例如，编码字符串 <code>&quot;1*&quot;</code> 可以表示 <code>&quot;11&quot;</code>、<code>&quot;12&quot;</code>、<code>&quot;13&quot;</code>、<code>&quot;14&quot;</code>、<code>&quot;15&quot;</code>、<code>&quot;16&quot;</code>、<code>&quot;17&quot;</code>、<code>&quot;18&quot;</code> 或 <code>&quot;19&quot;</code> 中的任意一条消息。对 <code>&quot;1*&quot;</code> 进行解码，相当于解码该字符串可以表示的任何编码消息。</p><p>给你一个字符串 <code>s</code> ，由数字和 <code>&#39;*&#39;</code> 字符组成，返回 <strong>解码</strong> 该字符串的方法 <strong>数目</strong> 。</p><p>由于答案数目可能非常大，返回对 <code>109 + 7</code> <strong>取余</strong> 的结果。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;*&quot;</span>
输出：<span class="token number">9</span>
解释：这一条编码消息可以表示 <span class="token string">&quot;1&quot;</span>、<span class="token string">&quot;2&quot;</span>、<span class="token string">&quot;3&quot;</span>、<span class="token string">&quot;4&quot;</span>、<span class="token string">&quot;5&quot;</span>、<span class="token string">&quot;6&quot;</span>、<span class="token string">&quot;7&quot;</span>、<span class="token string">&quot;8&quot;</span> 或 <span class="token string">&quot;9&quot;</span> 中的任意一条。
可以分别解码成字符串 <span class="token string">&quot;A&quot;</span>、<span class="token string">&quot;B&quot;</span>、<span class="token string">&quot;C&quot;</span>、<span class="token string">&quot;D&quot;</span>、<span class="token string">&quot;E&quot;</span>、<span class="token string">&quot;F&quot;</span>、<span class="token string">&quot;G&quot;</span>、<span class="token string">&quot;H&quot;</span> 和 <span class="token string">&quot;I&quot;</span> 。
因此，<span class="token string">&quot;*&quot;</span> 总共有 <span class="token number">9</span> 种解码方法。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;1*&quot;</span>
输出：<span class="token number">18</span>
解释：这一条编码消息可以表示 <span class="token string">&quot;11&quot;</span>、<span class="token string">&quot;12&quot;</span>、<span class="token string">&quot;13&quot;</span>、<span class="token string">&quot;14&quot;</span>、<span class="token string">&quot;15&quot;</span>、<span class="token string">&quot;16&quot;</span>、<span class="token string">&quot;17&quot;</span>、<span class="token string">&quot;18&quot;</span> 或 <span class="token string">&quot;19&quot;</span> 中的任意一条。
每种消息都可以由 <span class="token number">2</span> 种方法解码（例如，<span class="token string">&quot;11&quot;</span> 可以解码成 <span class="token string">&quot;AA&quot;</span> 或 <span class="token string">&quot;K&quot;</span>）。
因此，<span class="token string">&quot;1*&quot;</span> 共有 <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">18</span> 种解码方法。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;2*&quot;</span>
输出：<span class="token number">15</span>
解释：这一条编码消息可以表示 <span class="token string">&quot;21&quot;</span>、<span class="token string">&quot;22&quot;</span>、<span class="token string">&quot;23&quot;</span>、<span class="token string">&quot;24&quot;</span>、<span class="token string">&quot;25&quot;</span>、<span class="token string">&quot;26&quot;</span>、<span class="token string">&quot;27&quot;</span>、<span class="token string">&quot;28&quot;</span> 或 <span class="token string">&quot;29&quot;</span> 中的任意一条。
<span class="token string">&quot;21&quot;</span>、<span class="token string">&quot;22&quot;</span>、<span class="token string">&quot;23&quot;</span>、<span class="token string">&quot;24&quot;</span>、<span class="token string">&quot;25&quot;</span> 和 <span class="token string">&quot;26&quot;</span> 由 <span class="token number">2</span> 种解码方法，但 <span class="token string">&quot;27&quot;</span>、<span class="token string">&quot;28&quot;</span> 和 <span class="token string">&quot;29&quot;</span> 仅有 <span class="token number">1</span> 种解码方法。
因此，<span class="token string">&quot;2*&quot;</span> <span class="token function">共有</span> <span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">15</span> 种解码方法。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 当前位的值</span>
            <span class="token keyword">int</span> t <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token comment">// dp的计算值</span>
            <span class="token keyword">long</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token comment">// 滚动数组的index，p1是dp[i - 1]的index，p2是dp[i - 2]的index</span>
            <span class="token keyword">int</span> p1 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>
            <span class="token comment">// 循环把*的次数加上来</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> item <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span> item<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果是*加9次</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">||</span> t <span class="token operator">==</span> item<span class="token punctuation">)</span> cnt <span class="token operator">+=</span> dp<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 不存在i - 2终止循环</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token keyword">char</span> prev <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 前一位i - 1的值</span>
                    <span class="token keyword">int</span> u <span class="token operator">=</span> prev <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
                    <span class="token keyword">int</span> a <span class="token operator">=</span> item <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> item <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>prev <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">||</span> u <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> b <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> cnt <span class="token operator">+=</span> dp<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnt <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,17),Y={id:"_741-摘樱桃",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_741-摘樱桃","aria-hidden":"true"},"#",-1),$={href:"https://leetcode.cn/problems/cherry-pickup/",target:"_blank",rel:"noopener noreferrer"},Q=a(`<p>给你一个 <code>n x n</code> 的网格 <code>grid</code> ，代表一块樱桃地，每个格子由以下三种数字的一种来表示：</p><ul><li><code>0</code> 表示这个格子是空的，所以你可以穿过它。</li><li><code>1</code> 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。</li><li><code>-1</code> 表示这个格子里有荆棘，挡着你的路。</li></ul><p>请你统计并返回：在遵守下列规则的情况下，能摘到的最多樱桃数：</p><ul><li>从位置 <code>(0, 0)</code> 出发，最后到达 <code>(n - 1, n - 1)</code> ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为 <code>0</code> 或者 <code>1</code> 的格子）；</li><li>当到达 <code>(n - 1, n - 1)</code> 后，你要继续走，直到返回到 <code>(0, 0) </code>，只能向上或向左走，并且只能穿越有效的格子；</li><li>当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为 <code>0</code> ）；</li><li>如果在 <code>(0, 0)</code> 和 <code>(n - 1, n - 1)</code> 之间不存在一条可经过的路径，则无法摘到任何一个樱桃。</li></ul><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/grid.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">5</span>
<span class="token function">解释：玩家从</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">出发：向下、向下、向右、向右移动至</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 。
在这一次行程中捡到 <span class="token number">4</span> 个樱桃，矩阵变成 <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> 。
然后，玩家向左、向上、向上、向左返回起点，再捡到 <span class="token number">1</span> 个樱桃。
总共捡到 <span class="token number">5</span> 个樱桃，这是最大可能值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：grid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= n &lt;= 50</code></li><li><code>grid[i][j]</code> 为 <code>-1</code>、<code>0</code> 或 <code>1</code></li><li><code>grid[0][0] != -1</code></li><li><code>grid[n - 1][n - 1] != -1</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),U={id:"_1787-使所有区间的异或结果为零",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#_1787-使所有区间的异或结果为零","aria-hidden":"true"},"#",-1),sn={href:"https://leetcode-cn.com/problems/make-the-xor-of-all-segments-equal-to-zero/",target:"_blank",rel:"noopener noreferrer"},an=a(`<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。区间 <code>[left, right]</code>（<code>left &lt;=right</code>）的 <strong>异或结果</strong> 是对下标位于 <code>left</code> 和 <code>right</code>（包括 <code>left</code> 和 <code>right</code> ）之间所有元素进行 <code>XOR</code> 运算的结果：<code>nums[left] XOR nums[left+1] XOR ... XOR nums[right]</code> 。</p><p>返回数组中 <strong>要更改的最小元素数</strong> ，以使所有长度为 <code>k</code> 的区间异或结果等于零。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">3</span>
解释：将数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> 修改为 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">3</span>
解释：将数组 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> 修改为 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">3</span>
解释：将数组<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> 修改为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,11),pn={id:"_1262-可被三整除的最大和",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#_1262-可被三整除的最大和","aria-hidden":"true"},"#",-1),tn={href:"https://leetcode.cn/problems/greatest-sum-divisible-by-three/",target:"_blank",rel:"noopener noreferrer"},on=a(`<p>给你一个整数数组 <code>nums</code>，请你找出并返回能被三整除的元素最大和。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
输出：<span class="token number">18</span>
解释：选出数字 <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span> 和 <span class="token number">8</span>，它们的和是 <span class="token number">18</span>（可被 <span class="token number">3</span> 整除的最大和）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
解释：<span class="token number">4</span> 不能被 <span class="token number">3</span> 整除，所以无法选出数字，返回 <span class="token number">0</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">12</span>
解释：选出数字 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> 以及 <span class="token number">4</span>，它们的和是 <span class="token number">12</span>（可被 <span class="token number">3</span> 整除的最大和）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 4 * 10^4</code></li><li><code>1 &lt;= nums[i] &lt;= 10^4</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),cn={id:"_2140-解决智力问题",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#_2140-解决智力问题","aria-hidden":"true"},"#",-1),un={href:"https://leetcode.cn/problems/solving-questions-with-brainpower/",target:"_blank",rel:"noopener noreferrer"},rn=a(`<p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>questions</code> ，其中 <code>questions[i] = [pointsi, brainpoweri]</code> 。</p><p>这个数组表示一场考试里的一系列题目，你需要 <strong>按顺序</strong> （也就是从问题 <code>0</code> 开始依次解决），针对每个问题选择 <strong>解决</strong> 或者 <strong>跳过</strong> 操作。解决问题 <code>i</code> 将让你 <strong>获得</strong> <code>pointsi</code> 的分数，但是你将 <strong>无法</strong> 解决接下来的 <code>brainpoweri</code> 个问题（即只能跳过接下来的 <code>brainpoweri</code> 个问题）。如果你跳过问题 <code>i</code> ，你可以对下一个问题决定使用哪种操作。</p><ul><li>比方说，给你 <code>questions = [[3, 2], [4, 3], [4, 4], [2, 5]]</code>： <ul><li>如果问题 <code>0</code> 被解决了， 那么你可以获得 <code>3</code> 分，但你不能解决问题 <code>1</code> 和 <code>2</code> 。</li><li>如果你跳过问题 <code>0</code> ，且解决问题 <code>1</code> ，你将获得 <code>4</code> 分但是不能解决问题 <code>2</code> 和 <code>3</code> 。</li></ul></li></ul><p>请你返回这场考试里你能获得的 <strong>最高</strong> 分数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：questions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">5</span>
解释：解决问题 <span class="token number">0</span> 和 <span class="token number">3</span> 得到最高分。
<span class="token operator">-</span> 解决问题 <span class="token number">0</span> ：获得 <span class="token number">3</span> 分，但接下来 <span class="token number">2</span> 个问题都不能解决。
<span class="token operator">-</span> 不能解决问题 <span class="token number">1</span> 和 <span class="token number">2</span>
<span class="token operator">-</span> 解决问题 <span class="token number">3</span> ：获得 <span class="token number">2</span> 分
总得分为：<span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5</span> 。没有别的办法获得 <span class="token number">5</span> 分或者多于 <span class="token number">5</span> 分。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：questions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">7</span>
解释：解决问题 <span class="token number">1</span> 和 <span class="token number">4</span> 得到最高分。
<span class="token operator">-</span> 跳过问题 <span class="token number">0</span>
<span class="token operator">-</span> 解决问题 <span class="token number">1</span> ：获得 <span class="token number">2</span> 分，但接下来 <span class="token number">2</span> 个问题都不能解决。
<span class="token operator">-</span> 不能解决问题 <span class="token number">2</span> 和 <span class="token number">3</span>
<span class="token operator">-</span> 解决问题 <span class="token number">4</span> ：获得 <span class="token number">5</span> 分
总得分为：<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">7</span> 。没有别的办法获得 <span class="token number">7</span> 分或者多于 <span class="token number">7</span> 分。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= questions.length &lt;= 10^5</code></li><li><code>questions[i].length == 2</code></li><li><code>1 &lt;= pointsi, brainpoweri &lt;= 10^5</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),kn={id:"_2167-移除所有载有违禁货物车厢所需的最少时间",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#_2167-移除所有载有违禁货物车厢所需的最少时间","aria-hidden":"true"},"#",-1),mn={href:"https://leetcode.cn/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/",target:"_blank",rel:"noopener noreferrer"},bn=a(`<p>给你一个下标从 <strong>0</strong> 开始的二进制字符串 <code>s</code> ，表示一个列车车厢序列。<code>s[i] = &#39;0&#39;</code> 表示第 <code>i</code> 节车厢 <strong>不</strong> 含违禁货物，而 <code>s[i] = &#39;1&#39;</code> 表示第 <code>i</code> 节车厢含违禁货物。</p><p>作为列车长，你需要清理掉所有载有违禁货物的车厢。你可以不限次数执行下述三种操作中的任意一个：</p><ol><li>从列车 <strong>左</strong> 端移除一节车厢（即移除 <code>s[0]</code>），用去 1 单位时间。</li><li>从列车 <strong>右</strong> 端移除一节车厢（即移除 <code>s[s.length - 1]</code>），用去 1 单位时间。</li><li>从列车车厢序列的 <strong>任意位置</strong> 移除一节车厢，用去 2 单位时间。</li></ol><p>返回移除所有载有违禁货物车厢所需要的 <strong>最少</strong> 单位时间数。</p><p>注意，空的列车车厢序列视为没有车厢含违禁货物。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;1100101&quot;</span>
输出：<span class="token number">5</span>
解释：
一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 从左端移除一节车厢 <span class="token number">2</span> 次。所用时间是 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
<span class="token operator">-</span> 从右端移除一节车厢 <span class="token number">1</span> 次。所用时间是 <span class="token number">1</span> 。
<span class="token operator">-</span> 移除序列中间位置载有违禁货物的车厢。所用时间是 <span class="token number">2</span> 。
总时间是 <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5</span> 。

一种替代方法是：
<span class="token operator">-</span> 从左端移除一节车厢 <span class="token number">2</span> 次。所用时间是 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
<span class="token operator">-</span> 从右端移除一节车厢 <span class="token number">3</span> 次。所用时间是 <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> 。
总时间也是 <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">5</span> 。

<span class="token number">5</span> 是移除所有载有违禁货物的车厢所需要的最少单位时间数。
没有其他方法能够用更少的时间移除这些车厢。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;0010&quot;</span>
输出：<span class="token number">2</span>
解释：
一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 从左端移除一节车厢 <span class="token number">3</span> 次。所用时间是 <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> 。
总时间是 <span class="token number">3.</span>

另一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 移除序列中间位置载有违禁货物的车厢。所用时间是 <span class="token number">2</span> 。
总时间是 <span class="token number">2.</span>

另一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 从右端移除一节车厢 <span class="token number">2</span> 次。所用时间是 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
总时间是 <span class="token number">2.</span>

<span class="token number">2</span> 是移除所有载有违禁货物的车厢所需要的最少单位时间数。
没有其他方法能够用更少的时间移除这些车厢。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 10^5</code></li><li><code>s[i]</code> 为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),vn={id:"_2188-完成比赛的最少时间",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#_2188-完成比赛的最少时间","aria-hidden":"true"},"#",-1),hn={href:"https://leetcode.cn/problems/minimum-time-to-finish-the-race/",target:"_blank",rel:"noopener noreferrer"},qn=a(`<p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>tires</code> ，其中 <code>tires[i] = [fi, ri]</code> 表示第 <code>i</code> 种轮胎如果连续使用，第 <code>x</code> 圈需要耗时 <code>fi * ri(x-1)</code> 秒。</p><ul><li>比方说，如果 <code>fi = 3</code> 且 <code>ri = 2</code> ，且一直使用这种类型的同一条轮胎，那么该轮胎完成第 <code>1</code> 圈赛道耗时 <code>3</code> 秒，完成第 <code>2</code> 圈耗时 <code>3 * 2 = 6</code> 秒，完成第 <code>3</code> 圈耗时 <code>3 * 22 = 12</code> 秒，依次类推。</li></ul><p>同时给你一个整数 <code>changeTime</code> 和一个整数 <code>numLaps</code> 。</p><p>比赛总共包含 <code>numLaps</code> 圈，你可以选择 <strong>任意</strong> 一种轮胎开始比赛。每一种轮胎都有 <strong>无数条</strong> 。每一圈后，你可以选择耗费 <code>changeTime</code> 秒 <strong>换成</strong> 任意一种轮胎（也可以换成当前种类的新轮胎）。</p><p>请你返回完成比赛需要耗费的 <strong>最少</strong> 时间。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tires <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> changeTime <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> numLaps <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">21</span>
解释：
第 <span class="token number">1</span> 圈：使用轮胎 <span class="token number">0</span> ，耗时 <span class="token number">2</span> 秒。
第 <span class="token number">2</span> 圈：继续使用轮胎 <span class="token number">0</span> ，耗时 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">6</span> 秒。
第 <span class="token number">3</span> 圈：耗费 <span class="token number">5</span> 秒换一条新的轮胎 <span class="token number">0</span> ，然后耗时 <span class="token number">2</span> 秒完成这一圈。
第 <span class="token number">4</span> 圈：继续使用轮胎 <span class="token number">0</span> ，耗时 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">6</span> 秒。
总耗时 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">21</span> 秒。
完成比赛的最少时间为 <span class="token number">21</span> 秒。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tires <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> changeTime <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> numLaps <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">25</span>
解释：
第 <span class="token number">1</span> 圈：使用轮胎 <span class="token number">1</span> ，耗时 <span class="token number">2</span> 秒。
第 <span class="token number">2</span> 圈：继续使用轮胎 <span class="token number">1</span> ，耗时 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span> 秒。
第 <span class="token number">3</span> 圈：耗时 <span class="token number">6</span> 秒换一条新的轮胎 <span class="token number">1</span> ，然后耗时 <span class="token number">2</span> 秒完成这一圈。
第 <span class="token number">4</span> 圈：继续使用轮胎 <span class="token number">1</span> ，耗时 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span> 秒。
第 <span class="token number">5</span> 圈：耗时 <span class="token number">6</span> 秒换成轮胎 <span class="token number">0</span> ，然后耗时 <span class="token number">1</span> 秒完成这一圈。
总耗时 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">25</span> 秒。
完成比赛的最少时间为 <span class="token number">25</span> 秒。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= tires.length &lt;= 10^5</code></li><li><code>tires[i].length == 2</code></li><li><code>1 &lt;= fi, changeTime &lt;= 10a65</code></li><li><code>2 &lt;= ri &lt;= 10^5</code></li><li><code>1 &lt;= numLaps &lt;= 1000</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),jn={id:"_2271-毯子覆盖的最多白色砖块数",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#_2271-毯子覆盖的最多白色砖块数","aria-hidden":"true"},"#",-1),_n={href:"https://leetcode.cn/problems/maximum-white-tiles-covered-by-a-carpet/",target:"_blank",rel:"noopener noreferrer"},yn=a(`<p>给你一个二维整数数组 <code>tiles</code> ，其中 <code>tiles[i] = [li, ri]</code> ，表示所有在 <code>li &lt;= j &lt;= ri</code> 之间的每个瓷砖位置 <code>j</code> 都被涂成了白色。</p><p>同时给你一个整数 <code>carpetLen</code> ，表示可以放在 <strong>任何位置</strong> 的一块毯子。</p><p>请你返回使用这块毯子，<strong>最多</strong> 可以盖住多少块瓷砖。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/KipXHZYoIWnwckz.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tiles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> carpetLen <span class="token operator">=</span> <span class="token number">10</span>
输出：<span class="token number">9</span>
解释：将毯子从瓷砖 <span class="token number">10</span> 开始放置。
总共覆盖 <span class="token number">9</span> 块瓷砖，所以返回 <span class="token number">9</span> 。
注意可能有其他方案也可以覆盖 <span class="token number">9</span> 块瓷砖。
可以看出，瓷砖无法覆盖超过 <span class="token number">9</span> 块瓷砖。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/z36IexA1TFNYvcG.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：tiles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> carpetLen <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">2</span>
解释：将毯子从瓷砖 <span class="token number">10</span> 开始放置。
总共覆盖 <span class="token number">2</span> 块瓷砖，所以我们返回 <span class="token number">2</span> 。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumWhiteTiles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tiles<span class="token punctuation">,</span> <span class="token keyword">int</span> carpetLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>tiles<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> o<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>tiles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tiles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">lastEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> tiles<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> tiles<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token operator">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">lowerEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> carpetLen<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
                    <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>tiles<span class="token punctuation">[</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> carpetLen<span class="token punctuation">)</span> <span class="token operator">-</span> tiles<span class="token punctuation">[</span>value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,15),wn={id:"_2262-字符串的总引力",tabindex:"-1"},xn=n("a",{class:"header-anchor",href:"#_2262-字符串的总引力","aria-hidden":"true"},"#",-1),An={href:"https://leetcode.cn/problems/total-appeal-of-a-string/",target:"_blank",rel:"noopener noreferrer"},zn=a(`<p>字符串的 <strong>引力</strong> 定义为：字符串中 <strong>不同</strong> 字符的数量。</p><ul><li>例如，<code>&quot;abbca&quot;</code> 的引力为 <code>3</code> ，因为其中有 <code>3</code> 个不同字符 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 和 <code>&#39;c&#39;</code> 。</li></ul><p>给你一个字符串 <code>s</code> ，返回 <strong>其所有子字符串的总引力</strong> <strong>。</strong></p><p><strong>子字符串</strong> 定义为：字符串中的一个连续字符序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;abbca&quot;</span>
输出：<span class="token number">28</span>
解释：<span class="token string">&quot;abbca&quot;</span> 的子字符串有：
<span class="token operator">-</span> 长度为 <span class="token number">1</span> 的子字符串：<span class="token string">&quot;a&quot;</span>、<span class="token string">&quot;b&quot;</span>、<span class="token string">&quot;b&quot;</span>、<span class="token string">&quot;c&quot;</span>、<span class="token string">&quot;a&quot;</span> 的引力分别为 <span class="token number">1</span>、<span class="token number">1</span>、<span class="token number">1</span>、<span class="token number">1</span>、<span class="token number">1</span>，总和为 <span class="token number">5</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">2</span> 的子字符串：<span class="token string">&quot;ab&quot;</span>、<span class="token string">&quot;bb&quot;</span>、<span class="token string">&quot;bc&quot;</span>、<span class="token string">&quot;ca&quot;</span> 的引力分别为 <span class="token number">2</span>、<span class="token number">1</span>、<span class="token number">2</span>、<span class="token number">2</span> ，总和为 <span class="token number">7</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">3</span> 的子字符串：<span class="token string">&quot;abb&quot;</span>、<span class="token string">&quot;bbc&quot;</span>、<span class="token string">&quot;bca&quot;</span> 的引力分别为 <span class="token number">2</span>、<span class="token number">2</span>、<span class="token number">3</span> ，总和为 <span class="token number">7</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">4</span> 的子字符串：<span class="token string">&quot;abbc&quot;</span>、<span class="token string">&quot;bbca&quot;</span> 的引力分别为 <span class="token number">3</span>、<span class="token number">3</span> ，总和为 <span class="token number">6</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">5</span> 的子字符串：<span class="token string">&quot;abbca&quot;</span> 的引力为 <span class="token number">3</span> ，总和为 <span class="token number">3</span> 。
引力总和为 <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">28</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;code&quot;</span>
输出：<span class="token number">20</span>
解释：<span class="token string">&quot;code&quot;</span> 的子字符串有：
<span class="token operator">-</span> 长度为 <span class="token number">1</span> 的子字符串：<span class="token string">&quot;c&quot;</span>、<span class="token string">&quot;o&quot;</span>、<span class="token string">&quot;d&quot;</span>、<span class="token string">&quot;e&quot;</span> 的引力分别为 <span class="token number">1</span>、<span class="token number">1</span>、<span class="token number">1</span>、<span class="token number">1</span> ，总和为 <span class="token number">4</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">2</span> 的子字符串：<span class="token string">&quot;co&quot;</span>、<span class="token string">&quot;od&quot;</span>、<span class="token string">&quot;de&quot;</span> 的引力分别为 <span class="token number">2</span>、<span class="token number">2</span>、<span class="token number">2</span> ，总和为 <span class="token number">6</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">3</span> 的子字符串：<span class="token string">&quot;cod&quot;</span>、<span class="token string">&quot;ode&quot;</span> 的引力分别为 <span class="token number">3</span>、<span class="token number">3</span> ，总和为 <span class="token number">6</span> 。
<span class="token operator">-</span> 长度为 <span class="token number">4</span> 的子字符串：<span class="token string">&quot;code&quot;</span> 的引力为 <span class="token number">4</span> ，总和为 <span class="token number">4</span> 。
引力总和为 <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">20</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 由小写英文字母组成</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),In={id:"_2266-统计打字方案数",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#_2266-统计打字方案数","aria-hidden":"true"},"#",-1),Mn={href:"https://leetcode.cn/problems/count-number-of-texts/",target:"_blank",rel:"noopener noreferrer"},Sn=a(`<p>Alice 在给 Bob 用手机打字。数字到字母的 <strong>对应</strong> 如下图所示。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/1200px-telephone-keypad2svg.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了 <strong>打出</strong> 一个字母，Alice 需要 <strong>按</strong> 对应字母 <code>i</code> 次，<code>i</code> 是该字母在这个按键上所处的位置。</p><ul><li>比方说，为了按出字母 <code>&#39;s&#39;</code> ，Alice 需要按 <code>&#39;7&#39;</code> 四次。类似的， Alice 需要按 <code>&#39;5&#39;</code> 两次得到字母 <code>&#39;k&#39;</code> 。</li><li>注意，数字 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 不映射到任何字母，所以 Alice <strong>不</strong> 使用它们。</li></ul><p>但是，由于传输的错误，Bob 没有收到 Alice 打字的字母信息，反而收到了 <strong>按键的字符串信息</strong> 。</p><ul><li>比方说，Alice 发出的信息为 <code>&quot;bob&quot;</code> ，Bob 将收到字符串 <code>&quot;2266622&quot;</code> 。</li></ul><p>给你一个字符串 <code>pressedKeys</code> ，表示 Bob 收到的字符串，请你返回 Alice <strong>总共可能发出多少种文字信息</strong> 。</p><p>由于答案可能很大，将它对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：pressedKeys <span class="token operator">=</span> <span class="token string">&quot;22233&quot;</span>
输出：<span class="token number">8</span>
解释：
Alice 可能发出的文字信息包括：
<span class="token string">&quot;aaadd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abdd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;badd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cdd&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;aaae&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;bae&quot;</span> 和 <span class="token string">&quot;ce&quot;</span> 。
由于总共有 <span class="token number">8</span> 种可能的信息，所以我们返回 <span class="token number">8</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：pressedKeys <span class="token operator">=</span> <span class="token string">&quot;222222222222222222222222222222222222&quot;</span>
输出：<span class="token number">82876089</span>
解释：
总共有 <span class="token number">2082876103</span> 种 Alice 可能发出的文字信息。
由于我们需要将答案对 <span class="token number">109</span> <span class="token operator">+</span> <span class="token number">7</span> 取余，所以我们返回 <span class="token number">2082876103</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">109</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">82876089</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= pressedKeys.length &lt;= 10^5</code></li><li><code>pressedKeys</code> 只包含数字 <code>&#39;2&#39;</code> 到 <code>&#39;9&#39;</code> 。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,17),Bn={id:"_2272-最大波动的子字符串",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#_2272-最大波动的子字符串","aria-hidden":"true"},"#",-1),En={href:"https://leetcode.cn/problems/substring-with-largest-variance/",target:"_blank",rel:"noopener noreferrer"},On=a(`<p>字符串的 <strong>波动</strong> 定义为子字符串中出现次数 <strong>最多</strong> 的字符次数与出现次数 <strong>最少</strong> 的字符次数之差。</p><p>给你一个字符串 <code>s</code> ，它只包含小写英文字母。请你返回 <code>s</code> 里所有 <strong>子字符串的</strong> <strong>最大波动</strong> 值。</p><p><strong>子字符串</strong> 是一个字符串的一段连续字符序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;aababbb&quot;</span>
输出：<span class="token number">3</span>
解释：
所有可能的波动值和它们对应的子字符串如以下所示：
<span class="token operator">-</span> 波动值为 <span class="token number">0</span> 的子字符串：<span class="token string">&quot;a&quot;</span> ，<span class="token string">&quot;aa&quot;</span> ，<span class="token string">&quot;ab&quot;</span> ，<span class="token string">&quot;abab&quot;</span> ，<span class="token string">&quot;aababb&quot;</span> ，<span class="token string">&quot;ba&quot;</span> ，<span class="token string">&quot;b&quot;</span> ，<span class="token string">&quot;bb&quot;</span> 和 <span class="token string">&quot;bbb&quot;</span> 。
<span class="token operator">-</span> 波动值为 <span class="token number">1</span> 的子字符串：<span class="token string">&quot;aab&quot;</span> ，<span class="token string">&quot;aba&quot;</span> ，<span class="token string">&quot;abb&quot;</span> ，<span class="token string">&quot;aabab&quot;</span> ，<span class="token string">&quot;ababb&quot;</span> ，<span class="token string">&quot;aababbb&quot;</span> 和 <span class="token string">&quot;bab&quot;</span> 。
<span class="token operator">-</span> 波动值为 <span class="token number">2</span> 的子字符串：<span class="token string">&quot;aaba&quot;</span> ，<span class="token string">&quot;ababbb&quot;</span> ，<span class="token string">&quot;abbb&quot;</span> 和 <span class="token string">&quot;babb&quot;</span> 。
<span class="token operator">-</span> 波动值为 <span class="token number">3</span> 的子字符串 <span class="token string">&quot;babbb&quot;</span> 。
所以，最大可能波动值为 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;abcde&quot;</span>
输出：<span class="token number">0</span>
解释：
s 中没有字母出现超过 <span class="token number">1</span> 次，所以 s 中每个子字符串的波动值都是 <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 只包含小写英文字母。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),Fn={id:"_2312-卖木头块",tabindex:"-1"},Kn=n("a",{class:"header-anchor",href:"#_2312-卖木头块","aria-hidden":"true"},"#",-1),Dn={href:"https://leetcode.cn/problems/selling-pieces-of-wood/",target:"_blank",rel:"noopener noreferrer"},Vn=a(`<p>给你两个整数 <code>m</code> 和 <code>n</code> ，分别表示一块矩形木块的高和宽。同时给你一个二维整数数组 <code>prices</code> ，其中 <code>prices[i] = [hi, wi, pricei]</code> 表示你可以以 <code>pricei</code> 元的价格卖一块高为 <code>hi</code> 宽为 <code>wi</code> 的矩形木块。</p><p>每一次操作中，你必须按下述方式之一执行切割操作，以得到两块更小的矩形木块：</p><ul><li>沿垂直方向按高度 <strong>完全</strong> 切割木块，或</li><li>沿水平方向按宽度 <strong>完全</strong> 切割木块</li></ul><p>在将一块木块切成若干小木块后，你可以根据 <code>prices</code> 卖木块。你可以卖多块同样尺寸的木块。你不需要将所有小木块都卖出去。你 <strong>不能</strong> 旋转切好后木块的高和宽。</p><p>请你返回切割一块大小为 <code>m x n</code> 的木块后，能得到的 <strong>最多</strong> 钱数。</p><p>注意你可以切割木块任意次。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/ex1-20240217101929221.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">19</span>
解释：上图展示了一个可行的方案。包括：
<span class="token operator">-</span> <span class="token number">2</span> 块 <span class="token number">2</span> x <span class="token number">2</span> 的小木块，售出 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">14</span> 元。
<span class="token operator">-</span> <span class="token number">1</span> 块 <span class="token number">2</span> x <span class="token number">1</span> 的小木块，售出 <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">3</span> 元。
<span class="token operator">-</span> <span class="token number">1</span> 块 <span class="token number">1</span> x <span class="token number">4</span> 的小木块，售出 <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">2</span> 元。
总共售出 <span class="token number">14</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">19</span> 元。
<span class="token number">19</span> 元是最多能得到的钱数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/ex2new-20240217101923157.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">32</span>
解释：上图展示了一个可行的方案。包括：
<span class="token operator">-</span> <span class="token number">3</span> 块 <span class="token number">3</span> x <span class="token number">2</span> 的小木块，售出 <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">30</span> 元。
<span class="token operator">-</span> <span class="token number">1</span> 块 <span class="token number">1</span> x <span class="token number">4</span> 的小木块，售出 <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">2</span> 元。
总共售出 <span class="token number">30</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">32</span> 元。
<span class="token number">32</span> 元是最多能得到的钱数。
注意我们不能旋转 <span class="token number">1</span> x <span class="token number">4</span> 的木块来得到 <span class="token number">4</span> x <span class="token number">1</span> 的木块。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>1 &lt;= prices.length &lt;= 2 * 10^4</code></li><li><code>prices[i].length == 3</code></li><li><code>1 &lt;= hi &lt;= m</code></li><li><code>1 &lt;= wi &lt;= n</code></li><li><code>1 &lt;= pricei &lt;= 10^6</code></li><li>所有 <code>(hi, wi)</code> <strong>互不相同</strong> 。</li></ul><blockquote><p>思路：</p><p>​ 记忆化搜索，枚举所有可以切分的位置，如果prices里有这块木头的价格，则不切(或着说切0,0)作为初始价值，然后枚举所有可能切法，求最大值。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>
    <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sellingWood</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>prices<span class="token punctuation">[</span>price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">:</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">long</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">long</span> res <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> k<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> k<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 翻译成递推。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sellingWood</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 枚举 <code>k</code> 的时候，只需要枚举到一半的位置，因为前一半和后一半具有对称性，结果是等效的。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sellingWood</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">long</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> price <span class="token operator">:</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dp<span class="token punctuation">[</span>price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>price<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> price<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> j <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,21),Pn={id:"_2318-不同骰子序列的数目",tabindex:"-1"},Zn=n("a",{class:"header-anchor",href:"#_2318-不同骰子序列的数目","aria-hidden":"true"},"#",-1),Cn={href:"https://leetcode.cn/problems/number-of-distinct-roll-sequences/",target:"_blank",rel:"noopener noreferrer"},Xn=a(`<p>给你一个整数 <code>n</code> 。你需要掷一个 6 面的骰子 <code>n</code> 次。请你在满足以下要求的前提下，求出 <strong>不同</strong> 骰子序列的数目：</p><ol><li>序列中任意 <strong>相邻</strong> 数字的 <strong>最大公约数</strong> 为 <code>1</code> 。</li><li>序列中 <strong>相等</strong> 的值之间，至少有 <code>2</code> 个其他值的数字。正式地，如果第 <code>i</code> 次掷骰子的值 <strong>等于</strong> 第 <code>j</code> 次的值，那么 <code>abs(i - j) &gt; 2</code> 。</li></ol><p>请你返回不同序列的 <strong>总数目</strong> 。由于答案可能很大，请你将答案对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p>如果两个序列中至少有一个元素不同，那么它们被视为不同的序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">184</span>
<span class="token function">解释：一些可行的序列为</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">，</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">，</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> 等等。
<span class="token function">一些不可行的序列为</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">，</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token function">。</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> 是不可行的，因为第一个和第三个骰子值相等且 <span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> （下标从 <span class="token number">1</span> <span class="token function">开始表示）。</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> i是不可行的，因为 <span class="token number">3</span> 和 <span class="token number">6</span> 的最大公约数是 <span class="token number">3</span> 。
总共有 <span class="token number">184</span> 个不同的可行序列，所以我们返回 <span class="token number">184</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">22</span>
<span class="token function">解释：一些可行的序列为</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">，</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">，</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> 。
<span class="token function">一些不可行的序列为</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token function">，</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> ，因为最大公约数不为 <span class="token number">1</span> 。
总共有 <span class="token number">22</span> 个不同的可行序列，所以我们返回 <span class="token number">22</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^4</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),Jn={id:"_2320-统计放置房子的方式数",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#_2320-统计放置房子的方式数","aria-hidden":"true"},"#",-1),Wn={href:"https://leetcode.cn/problems/count-number-of-ways-to-place-houses/",target:"_blank",rel:"noopener noreferrer"},Rn=a(`<p>一条街道上共有 <code>n * 2</code> 个 <strong>地块</strong> ，街道的两侧各有 <code>n</code> 个地块。每一边的地块都按从 <code>1</code> 到 <code>n</code> 编号。每个地块上都可以放置一所房子。</p><p>现要求街道同一侧不能存在两所房子相邻的情况，请你计算并返回放置房屋的方式数目。由于答案可能很大，需要对 <code>109 + 7</code> 取余后再返回。</p><p>注意，如果一所房子放置在这条街某一侧上的第 <code>i</code> 个地块，不影响在另一侧的第 <code>i</code> 个地块放置房子。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">4</span>
解释：
可能的放置方式：
<span class="token number">1.</span> 所有地块都不放置房子。
<span class="token number">2.</span> 一所房子放在街道的某一侧。
<span class="token number">3.</span> 一所房子放在街道的另一侧。
<span class="token number">4.</span> 放置两所房子，街道两侧各放置一所。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/arrangements.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">9</span>
解释：如上图所示，共有 <span class="token number">9</span> 种可能的放置方式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^4</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),Hn={id:"_2321-拼接数组的最大分数",tabindex:"-1"},Yn=n("a",{class:"header-anchor",href:"#_2321-拼接数组的最大分数","aria-hidden":"true"},"#",-1),Gn={href:"https://leetcode.cn/problems/maximum-score-of-spliced-array/",target:"_blank",rel:"noopener noreferrer"},$n=a(`<p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，长度都是 <code>n</code> 。</p><p>你可以选择两个整数 <code>left</code> 和 <code>right</code> ，其中 <code>0 &lt;= left &lt;= right &lt; n</code> ，接着 <strong>交换</strong> 两个子数组 <code>nums1[left...right]</code> 和 <code>nums2[left...right]</code> 。</p><ul><li>例如，设 <code>nums1 = [1,2,3,4,5]</code> 和 <code>nums2 = [11,12,13,14,15]</code> ，整数选择 <code>left = 1</code> 和 <code>right = 2</code>，那么 <code>nums1</code> 会变为 <code>[1,12,13,4,5]</code> 而 <code>nums2</code> 会变为 <code>[11,2,3,14,15]</code> 。</li></ul><p>你可以选择执行上述操作 <strong>一次</strong> 或不执行任何操作。</p><p>数组的 <strong>分数</strong> 取 <code>sum(nums1)</code> 和 <code>sum(nums2)</code> 中的最大值，其中 <code>sum(arr)</code> 是数组 <code>arr</code> 中所有元素之和。</p><p>返回 <strong>可能的最大分数</strong> 。</p><p><strong>子数组</strong> 是数组中连续的一个元素序列。<code>arr[left...right]</code> 表示子数组包含 <code>nums</code> 中下标 <code>left</code> 和 <code>right</code> 之间的元素（含下标 <code>left</code> 和 <code>right</code> 对应元素）。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
输出：<span class="token number">210</span>
解释：选择 left <span class="token operator">=</span> <span class="token number">1</span> 和 right <span class="token operator">=</span> <span class="token number">1</span> ，得到 nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span> 和 nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span> 。
分数为 <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">210</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>
输出：<span class="token number">220</span>
解释：选择 left <span class="token operator">=</span> <span class="token number">3</span> 和 right <span class="token operator">=</span> <span class="token number">4</span> ，得到 nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span> 和 nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span> 。
分数为 <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">220</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">31</span>
解释：选择不交换任何子数组。
分数为 <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>nums1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>nums2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">31</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == nums1.length == nums2.length</code></li><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10^4</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,18),Qn={id:"_2770-达到末尾下标所需的最大跳跃次数",tabindex:"-1"},Un=n("a",{class:"header-anchor",href:"#_2770-达到末尾下标所需的最大跳跃次数","aria-hidden":"true"},"#",-1),ns={href:"https://leetcode.cn/problems/maximum-number-of-jumps-to-reach-the-last-index/",target:"_blank",rel:"noopener noreferrer"},ss=a(`<p>给你一个下标从 <strong>0</strong> 开始、由 <code>n</code> 个整数组成的数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>你的初始位置在下标 <code>0</code> 。在一步操作中，你可以从下标 <code>i</code> 跳跃到任意满足下述条件的下标 <code>j</code> ：</p><ul><li><code>0 &lt;= i &lt; j &lt; n</code></li><li><code>-target &lt;= nums[j] - nums[i] &lt;= target</code></li></ul><p>返回到达下标 <code>n - 1</code> 处所需的 <strong>最大跳跃次数</strong> 。</p><p>如果无法到达下标 <code>n - 1</code> ，返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span>
解释：要想以最大跳跃次数从下标 <span class="token number">0</span> 到下标 n <span class="token operator">-</span> <span class="token number">1</span> ，可以按下述跳跃序列执行操作：
<span class="token operator">-</span> 从下标 <span class="token number">0</span> 跳跃到下标 <span class="token number">1</span> 。 
<span class="token operator">-</span> 从下标 <span class="token number">1</span> 跳跃到下标 <span class="token number">3</span> 。 
<span class="token operator">-</span> 从下标 <span class="token number">3</span> 跳跃到下标 <span class="token number">5</span> 。 
可以证明，从 <span class="token number">0</span> 到 n <span class="token operator">-</span> <span class="token number">1</span> 的所有方案中，不存在比 <span class="token number">3</span> 步更长的跳跃序列。因此，答案是 <span class="token number">3</span> 。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">5</span>
解释：要想以最大跳跃次数从下标 <span class="token number">0</span> 到下标 n <span class="token operator">-</span> <span class="token number">1</span> ，可以按下述跳跃序列执行操作：
<span class="token operator">-</span> 从下标 <span class="token number">0</span> 跳跃到下标 <span class="token number">1</span> 。 
<span class="token operator">-</span> 从下标 <span class="token number">1</span> 跳跃到下标 <span class="token number">2</span> 。 
<span class="token operator">-</span> 从下标 <span class="token number">2</span> 跳跃到下标 <span class="token number">3</span> 。 
<span class="token operator">-</span> 从下标 <span class="token number">3</span> 跳跃到下标 <span class="token number">4</span> 。 
<span class="token operator">-</span> 从下标 <span class="token number">4</span> 跳跃到下标 <span class="token number">5</span> 。 
可以证明，从 <span class="token number">0</span> 到 n <span class="token operator">-</span> <span class="token number">1</span> 的所有方案中，不存在比 <span class="token number">5</span> 步更长的跳跃序列。因此，答案是 <span class="token number">5</span> 。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">0</span>
输出：<span class="token operator">-</span><span class="token number">1</span>
解释：可以证明不存在从 <span class="token number">0</span> 到 n <span class="token operator">-</span> <span class="token number">1</span> 的跳跃序列。因此，答案是 <span class="token operator">-</span><span class="token number">1</span> 。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length == n &lt;= 1000</code></li><li><code>-109 &lt;= nums[i] &lt;= 10^9</code></li><li><code>0 &lt;= target &lt;= 2 * 10^9</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),as={id:"_2771-构造最长非递减子数组",tabindex:"-1"},ps=n("a",{class:"header-anchor",href:"#_2771-构造最长非递减子数组","aria-hidden":"true"},"#",-1),es={href:"https://leetcode.cn/problems/longest-non-decreasing-subarray-from-two-arrays/",target:"_blank",rel:"noopener noreferrer"},ts=a(`<p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums1</code> 和 <code>nums2</code> ，长度均为 <code>n</code> 。</p><p>让我们定义另一个下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的整数数组，<code>nums3</code> 。对于范围 <code>[0, n - 1]</code> 的每个下标 <code>i</code> ，你可以将 <code>nums1[i]</code> 或 <code>nums2[i]</code> 的值赋给 <code>nums3[i]</code> 。</p><p>你的任务是使用最优策略为 <code>nums3</code> 赋值，以最大化 <code>nums3</code> 中 <strong>最长非递减子数组</strong> 的长度。</p><p>以整数形式表示并返回 <code>nums3</code> 中 <strong>最长非递减</strong> 子数组的长度。</p><p><strong>注意：子数组</strong> 是数组中的一个连续非空元素序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：构造 nums3 的方法之一是： 
nums3 <span class="token operator">=</span> <span class="token punctuation">[</span>nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
从下标 <span class="token number">0</span> 开始到下标 <span class="token number">1</span> 结束，形成了一个长度为 <span class="token number">2</span> 的非递减子数组 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。 
可以证明 <span class="token number">2</span> 是可达到的最大长度。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：构造 nums3 的方法之一是： 
nums3 <span class="token operator">=</span> <span class="token punctuation">[</span>nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
整个数组形成了一个长度为 <span class="token number">4</span> 的非递减子数组，并且是可达到的最大长度。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：构造 nums3 的方法之一是： 
nums3 <span class="token operator">=</span> <span class="token punctuation">[</span>nums1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 
整个数组形成了一个长度为 <span class="token number">2</span> 的非递减子数组，并且是可达到的最大长度。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums1.length == nums2.length == n &lt;= 10^5</code></li><li><code>1 &lt;= nums1[i], nums2[i] &lt;= 10^9</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),os={id:"_2786-访问数组中的位置使分数最大",tabindex:"-1"},cs=n("a",{class:"header-anchor",href:"#_2786-访问数组中的位置使分数最大","aria-hidden":"true"},"#",-1),ls={href:"https://leetcode.cn/problems/visit-array-positions-to-maximize-score/",target:"_blank",rel:"noopener noreferrer"},us=a(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个正整数 <code>x</code> 。</p><p>你 <strong>一开始</strong> 在数组的位置 <code>0</code> 处，你可以按照下述规则访问数组中的其他位置：</p><ul><li>如果你当前在位置 <code>i</code> ，那么你可以移动到满足 <code>i &lt; j</code> 的 <strong>任意</strong> 位置 <code>j</code> 。</li><li>对于你访问的位置 <code>i</code> ，你可以获得分数 <code>nums[i]</code> 。</li><li>如果你从位置 <code>i</code> 移动到位置 <code>j</code> 且 <code>nums[i]</code> 和 <code>nums[j]</code> 的 <strong>奇偶性</strong> 不同，那么你将失去分数 <code>x</code> 。</li></ul><p>请你返回你能得到的 <strong>最大</strong> 得分之和。</p><p><strong>注意</strong> ，你一开始的分数为 <code>nums[0]</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">13</span>
解释：我们可以按顺序访问数组中的位置：<span class="token number">0</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">4</span> 。
对应位置的值为 <span class="token number">2</span> ，<span class="token number">6</span> ，<span class="token number">1</span> 和 <span class="token number">9</span> 。因为 <span class="token number">6</span> 和 <span class="token number">1</span> 的奇偶性不同，所以下标从 <span class="token number">2</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token number">3</span> 让你失去 x <span class="token operator">=</span> <span class="token number">5</span> 分。
总得分为：<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">13</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">20</span>
解释：数组中的所有元素奇偶性都一样，所以我们可以将每个元素都访问一次，而且不会失去任何分数。
总得分为：<span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">20</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i], x &lt;= 10^6</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),is={id:"_2787-将一个数字表示成幂的和的方案数",tabindex:"-1"},rs=n("a",{class:"header-anchor",href:"#_2787-将一个数字表示成幂的和的方案数","aria-hidden":"true"},"#",-1),ks={href:"https://leetcode.cn/problems/ways-to-express-an-integer-as-sum-of-powers/",target:"_blank",rel:"noopener noreferrer"},ds=a(`<p>给你两个 <strong>正</strong> 整数 <code>n</code> 和 <code>x</code> 。</p><p>请你返回将 <code>n</code> 表示成一些 <strong>互不相同</strong> 正整数的 <code>x</code> 次幂之和的方案数。换句话说，你需要返回互不相同整数 <code>[n1, n2, ..., nk]</code> 的集合数目，满足 <code>n = n1x + n2x + ... + nkx</code> 。</p><p>由于答案可能非常大，请你将它对 <code>10^9 + 7</code> 取余后返回。</p><p>比方说，<code>n = 160</code> 且 <code>x = 3</code> ，一个表示 <code>n</code> 的方法是 <code>n = 23 + 33 + 53</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">1</span>
解释：我们可以将 n 表示为：n <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">=</span> <span class="token number">10</span> 。
这是唯一将 <span class="token number">10</span> 表达成不同整数 <span class="token number">2</span> 次方之和的方案。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">2</span>
解释：我们可以将 n 按以下方案表示：
<span class="token operator">-</span> n <span class="token operator">=</span> <span class="token number">41</span> <span class="token operator">=</span> <span class="token number">4</span> 。
<span class="token operator">-</span> n <span class="token operator">=</span> <span class="token number">31</span> <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">=</span> <span class="token number">4</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 300</code></li><li><code>1 &lt;= x &lt;= 5</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),ms={id:"_2830-销售利润最大化",tabindex:"-1"},bs=n("a",{class:"header-anchor",href:"#_2830-销售利润最大化","aria-hidden":"true"},"#",-1),vs={href:"https://leetcode.cn/problems/maximize-the-profit-as-the-salesman/",target:"_blank",rel:"noopener noreferrer"},gs=a(`<p>给你一个整数 <code>n</code> 表示数轴上的房屋数量，编号从 <code>0</code> 到 <code>n - 1</code> 。</p><p>另给你一个二维整数数组 <code>offers</code> ，其中 <code>offers[i] = [starti, endi, goldi]</code> 表示第 <code>i</code> 个买家想要以 <code>goldi</code> 枚金币的价格购买从 <code>starti</code> 到 <code>endi</code> 的所有房屋。</p><p>作为一名销售，你需要有策略地选择并销售房屋使自己的收入最大化。</p><p>返回你可以赚取的金币的最大数目。</p><p><strong>注意</strong> 同一所房屋不能卖给不同的买家，并且允许保留一些房屋不进行出售。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> offers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：
有 <span class="token number">5</span> 所房屋，编号从 <span class="token number">0</span> 到 <span class="token number">4</span> ，共有 <span class="token number">3</span> 个购买要约。
将位于 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> 范围内的房屋以 <span class="token number">1</span> 金币的价格出售给第 <span class="token number">1</span> 位买家，并将位于 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 范围内的房屋以 <span class="token number">2</span> 金币的价格出售给第 <span class="token number">3</span> 位买家。
可以证明我们最多只能获得 <span class="token number">3</span> 枚金币。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> offers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token number">10</span>
解释：有 <span class="token number">5</span> 所房屋，编号从 <span class="token number">0</span> 到 <span class="token number">4</span> ，共有 <span class="token number">3</span> 个购买要约。
将位于 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 范围内的房屋以 <span class="token number">10</span> 金币的价格出售给第 <span class="token number">2</span> 位买家。
可以证明我们最多只能获得 <span class="token number">10</span> 枚金币。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= offers.length &lt;= 10^5</code></li><li><code>offers[i].length == 3</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= n - 1</code></li><li><code>1 &lt;= goldi &lt;= 10^3</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),hs={id:"_2896-执行操作使两个字符串相等",tabindex:"-1"},qs=n("a",{class:"header-anchor",href:"#_2896-执行操作使两个字符串相等","aria-hidden":"true"},"#",-1),js={href:"https://leetcode.cn/problems/apply-operations-to-make-two-strings-equal/",target:"_blank",rel:"noopener noreferrer"},fs=a(`<p>给你两个下标从 <strong>0</strong> 开始的二进制字符串 <code>s1</code> 和 <code>s2</code> ，两个字符串的长度都是 <code>n</code> ，再给你一个正整数 <code>x</code> 。</p><p>你可以对字符串 <code>s1</code> 执行以下操作 <strong>任意次</strong> ：</p><ul><li>选择两个下标 <code>i</code> 和 <code>j</code> ，将 <code>s1[i]</code> 和 <code>s1[j]</code> 都反转，操作的代价为 <code>x</code> 。</li><li>选择满足 <code>i &lt; n - 1</code> 的下标 <code>i</code> ，反转 <code>s1[i]</code> 和 <code>s1[i + 1]</code> ，操作的代价为 <code>1</code> 。</li></ul><p>请你返回使字符串 <code>s1</code> 和 <code>s2</code> 相等的 <strong>最小</strong> 操作代价之和，如果无法让二者相等，返回 <code>-1</code> 。</p><p><strong>注意</strong> ，反转字符的意思是将 <code>0</code> 变成 <code>1</code> ，或者 <code>1</code> 变成 <code>0</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s1 <span class="token operator">=</span> <span class="token string">&quot;1100011000&quot;</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">&quot;0101001010&quot;</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">4</span>
解释：我们可以执行以下操作：
<span class="token operator">-</span> 选择 i <span class="token operator">=</span> <span class="token number">3</span> 执行第二个操作。结果字符串是 s1 <span class="token operator">=</span> <span class="token string">&quot;1101111000&quot;</span> 。
<span class="token operator">-</span> 选择 i <span class="token operator">=</span> <span class="token number">4</span> 执行第二个操作。结果字符串是 s1 <span class="token operator">=</span> <span class="token string">&quot;1101001000&quot;</span> 。
<span class="token operator">-</span> 选择 i <span class="token operator">=</span> <span class="token number">0</span> 和 j <span class="token operator">=</span> <span class="token number">8</span> ，执行第一个操作。结果字符串是 s1 <span class="token operator">=</span> <span class="token string">&quot;0101001010&quot;</span> <span class="token operator">=</span> s2 。
总代价是 <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span> 。这是最小代价和。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s1 <span class="token operator">=</span> <span class="token string">&quot;10110&quot;</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">&quot;00011&quot;</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token operator">-</span><span class="token number">1</span>
解释：无法使两个字符串相等。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == s1.length == s2.length</code></li><li><code>1 &lt;= n, x &lt;= 500</code></li><li><code>s1</code> 和 <code>s2</code> 只包含字符 <code>&#39;0&#39;</code> 和 <code>&#39;1&#39;</code> 。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),_s={id:"_2919-使数组变美的最小增量运算数",tabindex:"-1"},ys=n("a",{class:"header-anchor",href:"#_2919-使数组变美的最小增量运算数","aria-hidden":"true"},"#",-1),ws={href:"https://leetcode.cn/problems/minimum-increment-operations-to-make-array-beautiful/",target:"_blank",rel:"noopener noreferrer"},xs=a(`<p>给你一个下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的整数数组 <code>nums</code> ，和一个整数 <code>k</code> 。</p><p>你可以执行下述 <strong>递增</strong> 运算 <strong>任意</strong> 次（可以是 <strong>0</strong> 次）：</p><ul><li>从范围 <code>[0, n - 1]</code> 中选择一个下标 <code>i</code> ，并将 <code>nums[i]</code> 的值加 <code>1</code> 。</li></ul><p>如果数组中任何长度 <strong>大于或等于 3</strong> 的子数组，其 <strong>最大</strong> 元素都大于或等于 <code>k</code> ，则认为数组是一个 <strong>美丽数组</strong> 。</p><p>以整数形式返回使数组变为 <strong>美丽数组</strong> 需要执行的 <strong>最小</strong> 递增运算数。</p><p>子数组是数组中的一个连续 <strong>非空</strong> 元素序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">3</span>
解释：可以执行下述递增运算，使 nums 变为美丽数组：
选择下标 i <span class="token operator">=</span> <span class="token number">1</span> ，并且将 nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 的值加 <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
选择下标 i <span class="token operator">=</span> <span class="token number">4</span> ，并且将 nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 的值加 <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
选择下标 i <span class="token operator">=</span> <span class="token number">4</span> ，并且将 nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> 的值加 <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。
长度大于或等于 <span class="token number">3</span> 的子数组为 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。
在所有子数组中，最大元素都等于 k <span class="token operator">=</span> <span class="token number">4</span> ，所以 nums 现在是美丽数组。
可以证明无法用少于 <span class="token number">3</span> 次递增运算使 nums 变为美丽数组。
因此，答案为 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">2</span>
解释：可以执行下述递增运算，使 nums 变为美丽数组：
选择下标 i <span class="token operator">=</span> <span class="token number">2</span> ，并且将 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 的值加 <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
选择下标 i <span class="token operator">=</span> <span class="token number">2</span> ，并且将 nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 的值加 <span class="token number">1</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
长度大于或等于 <span class="token number">3</span> 的子数组为 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>、<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>、<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
在所有子数组中，最大元素都等于 k <span class="token operator">=</span> <span class="token number">5</span> ，所以 nums 现在是美丽数组。
可以证明无法用少于 <span class="token number">2</span> 次递增运算使 nums 变为美丽数组。 
因此，答案为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">0</span>
解释：在这个示例中，只有一个长度大于或等于 <span class="token number">3</span> 的子数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
其最大元素 <span class="token number">2</span> 已经大于 k <span class="token operator">=</span> <span class="token number">1</span> ，所以无需执行任何增量运算。
因此，答案为 <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>3 &lt;= n == nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^9</code></li><li><code>0 &lt;= k &lt;= 10^9</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,17);function As(zs,Is){const p=o("ExternalLinkIcon");return c(),l("div",null,[i,r,k,n("h4",d,[m,s(),n("a",b,[s("119. 杨辉三角 II"),e(p)])]),v,n("h4",g,[h,s(),n("a",q,[s("403. 青蛙过河"),e(p)])]),j,n("h4",f,[_,s(),n("a",y,[s("338. 比特位计数"),e(p)])]),w,n("h4",x,[A,s(),n("a",z,[s("467. 环绕字符串中唯一的子字符串"),e(p)])]),I,n("h4",L,[M,s(),n("a",S,[s("650. 只有两个键的键盘"),e(p)])]),B,n("h4",T,[E,s(),n("a",O,[s("678. 有效的括号字符串"),e(p)])]),F,n("h4",K,[D,s(),n("a",V,[s("688. 骑士在棋盘上的概率"),e(p)])]),P,n("h4",Z,[C,s(),n("a",X,[s("91. 解码方法"),e(p)])]),J,n("h4",N,[W,s(),n("a",R,[s("639. 解码方法 II"),e(p)])]),H,n("h4",Y,[G,s(),n("a",$,[s("741. 摘樱桃"),e(p)])]),Q,n("h4",U,[nn,s(),n("a",sn,[s("1787. 使所有区间的异或结果为零"),e(p)])]),an,n("h4",pn,[en,s(),n("a",tn,[s("1262. 可被三整除的最大和"),e(p)])]),on,n("h4",cn,[ln,s(),n("a",un,[s("2140. 解决智力问题"),e(p)])]),rn,n("h4",kn,[dn,s(),n("a",mn,[s("2167. 移除所有载有违禁货物车厢所需的最少时间"),e(p)])]),bn,n("h4",vn,[gn,s(),n("a",hn,[s("2188. 完成比赛的最少时间"),e(p)])]),qn,n("h4",jn,[fn,s(),n("a",_n,[s("2271. 毯子覆盖的最多白色砖块数"),e(p)])]),yn,n("h4",wn,[xn,s(),n("a",An,[s("2262. 字符串的总引力"),e(p)])]),zn,n("h4",In,[Ln,s(),n("a",Mn,[s("2266. 统计打字方案数"),e(p)])]),Sn,n("h4",Bn,[Tn,s(),n("a",En,[s("2272. 最大波动的子字符串"),e(p)])]),On,n("h4",Fn,[Kn,s(),n("a",Dn,[s("2312. 卖木头块"),e(p)])]),Vn,n("h4",Pn,[Zn,s(),n("a",Cn,[s("2318. 不同骰子序列的数目"),e(p)])]),Xn,n("h4",Jn,[Nn,s(),n("a",Wn,[s("2320. 统计放置房子的方式数"),e(p)])]),Rn,n("h4",Hn,[Yn,s(),n("a",Gn,[s("2321. 拼接数组的最大分数"),e(p)])]),$n,n("h4",Qn,[Un,s(),n("a",ns,[s("2770. 达到末尾下标所需的最大跳跃次数"),e(p)])]),ss,n("h4",as,[ps,s(),n("a",es,[s("2771. 构造最长非递减子数组"),e(p)])]),ts,n("h4",os,[cs,s(),n("a",ls,[s("2786. 访问数组中的位置使分数最大"),e(p)])]),us,n("h4",is,[rs,s(),n("a",ks,[s("2787. 将一个数字表示成幂的和的方案数"),e(p)])]),ds,n("h4",ms,[bs,s(),n("a",vs,[s("2830. 销售利润最大化"),e(p)])]),gs,n("h4",hs,[qs,s(),n("a",js,[s("2896. 执行操作使两个字符串相等"),e(p)])]),fs,n("h4",_s,[ys,s(),n("a",ws,[s("2919. 使数组变美的最小增量运算数"),e(p)])]),xs])}const Ms=t(u,[["render",As],["__file","linearDP.html.vue"]]);export{Ms as default};
