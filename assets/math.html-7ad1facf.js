import{_ as e,X as o,Y as c,Z as n,a0 as s,a1 as t,$ as a,H as l}from"./framework-1ee2252c.js";const i={},u=a('<h1 id="数学" tabindex="-1"><a class="header-anchor" href="#数学" aria-hidden="true">#</a> 数学</h1><p>[toc]</p><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><h3 id="数字问题" tabindex="-1"><a class="header-anchor" href="#数字问题" aria-hidden="true">#</a> 数字问题</h3>',4),r={id:"_7-整数反转",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#_7-整数反转","aria-hidden":"true"},"#",-1),d={href:"https://leetcode.cn/problems/reverse-integer/",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>f如果反转后整数超过 32 位的有符号整数的范围 <code>[−2^31, 2^31 − 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数(有符号或无符号)</strong></p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">123</span>
输出：<span class="token number">321</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">123</span>
输出：<span class="token operator">-</span><span class="token number">321</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">120</span>
输出：<span class="token number">21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">0</span>
输出：<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li></ul><blockquote><p>思路：</p><p>​ 每位对<code>10</code>取模获取到最低位，然后将数字除以<code>10</code>，直到其为<code>0</code>，然后使用两个数字一个进行累计，一个缓存累计前的结果，判断累计后的结果除以<code>10</code>是否与缓存相同来判断溢出。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            cache <span class="token operator">=</span> res<span class="token punctuation">;</span>
            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> temp<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">!=</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,16),v={id:"_8-字符串转换整数-atoi",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_8-字符串转换整数-atoi","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/string-to-integer-atoi/",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p><p>函数 <code>myAtoi(string s)</code> 的算法如下：</p><ol><li>读入字符串并丢弃无用的前导空格</li><li>检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。</li><li>读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。</li><li>将前面步骤读入的这些数字转换为整数（即，&quot;123&quot; -&gt; 123， &quot;0032&quot; -&gt; 32）。如果没有读入数字，则整数为 <code>0</code> 。必要时更改符号（从步骤 2 开始）。</li><li>如果整数数超过 32 位有符号整数范围 <code>[−2^31, 2^31 − 1]</code> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 <code>−2^31</code> 的整数应该被固定为 <code>−2^31</code> ，大于 <code>2^31 − 1</code> 的整数应该被固定为 <code>2^31 − 1</code> 。</li><li>返回整数作为最终结果。</li></ol><p><strong>注意：</strong></p><ul><li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> 。</li><li>除前导空格或数字后的其余字符串外，<strong>请勿忽略</strong> 任何其他字符。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span>
输出：<span class="token number">42</span>
解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
第 <span class="token number">1</span> 步：<span class="token string">&quot;42&quot;</span>（当前没有读入字符，因为没有前导空格）
         <span class="token operator">^</span>
第 <span class="token number">2</span> 步：<span class="token string">&quot;42&quot;</span>（当前没有读入字符，因为这里不存在 <span class="token string">&#39;-&#39;</span> 或者 <span class="token string">&#39;+&#39;</span>）
         <span class="token operator">^</span>
第 <span class="token number">3</span> 步：<span class="token string">&quot;42&quot;</span>（读入 <span class="token string">&quot;42&quot;</span>）
           <span class="token operator">^</span>
解析得到整数 <span class="token number">42</span> 。
由于 <span class="token string">&quot;42&quot;</span> 在范围 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">231</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> 内，最终结果为 <span class="token number">42</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;   -42&quot;</span>
输出：<span class="token operator">-</span><span class="token number">42</span>
解释：
第 <span class="token number">1</span> 步：<span class="token string">&quot;   -42&quot;</span>（读入前导空格，但忽视掉）
            <span class="token operator">^</span>
第 <span class="token number">2</span> 步：<span class="token string">&quot;   -42&quot;</span>（读入 <span class="token string">&#39;-&#39;</span> 字符，所以结果应该是负数）
             <span class="token operator">^</span>
第 <span class="token number">3</span> 步：<span class="token string">&quot;   -42&quot;</span>（读入 <span class="token string">&quot;42&quot;</span>）
               <span class="token operator">^</span>
解析得到整数 <span class="token operator">-</span><span class="token number">42</span> 。
由于 <span class="token string">&quot;-42&quot;</span> 在范围 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">231</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> 内，最终结果为 <span class="token operator">-</span><span class="token number">42</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;4193 with words&quot;</span>
输出：<span class="token number">4193</span>
解释：
第 <span class="token number">1</span> 步：<span class="token string">&quot;4193 with words&quot;</span>（当前没有读入字符，因为没有前导空格）
         <span class="token operator">^</span>
第 <span class="token number">2</span> 步：<span class="token string">&quot;4193 with words&quot;</span>（当前没有读入字符，因为这里不存在 <span class="token string">&#39;-&#39;</span> 或者 <span class="token string">&#39;+&#39;</span>）
         <span class="token operator">^</span>
第 <span class="token number">3</span> 步：<span class="token string">&quot;4193 with words&quot;</span>（读入 <span class="token string">&quot;4193&quot;</span>；由于下一个字符不是一个数字，所以读入停止）
             <span class="token operator">^</span>
解析得到整数 <span class="token number">4193</span> 。
由于 <span class="token string">&quot;4193&quot;</span> 在范围 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">231</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> 内，最终结果为 <span class="token number">4193</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 200</code></li><li><code>s</code> 由英文字母（大写和小写）、数字（<code>0-9</code>）、<code>&#39; &#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li></ul><blockquote><p>思路：</p><p>​ 将字符串前面的空白字符去掉，然后判断符号位。使用一个数字标识符号位，最后用符号位乘以数字即得到答案。使用两个数字，一个累计每一位，一个缓存累加前的结果，判断累计后的结果除以<code>10</code>是否与原来相等来判断溢出。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> digits <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cache<span class="token punctuation">,</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> c <span class="token operator">=</span> digits<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> digits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cache <span class="token operator">=</span> res<span class="token punctuation">;</span>
            res <span class="token operator">=</span> res <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> res <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> sign <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sign <span class="token operator">*</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="实现运算" tabindex="-1"><a class="header-anchor" href="#实现运算" aria-hidden="true">#</a> 实现运算</h3>`,17),y={id:"_29-两数相除",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_29-两数相除","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.cn/problems/divide-two-integers/",target:"_blank",rel:"noopener noreferrer"},j=a(`<p>给你两个整数，被除数 <code>dividend</code> 和除数 <code>divisor</code>。将两数相除，要求 <strong>不使用</strong> 乘法、除法和取余运算。</p><p>整数除法应该向零截断，也就是截去（<code>truncate</code>）其小数部分。例如，<code>8.345</code> 将被截断为 <code>8</code> ，<code>-2.7335</code> 将被截断至 <code>-2</code> 。</p><p>返回被除数 <code>dividend</code> 除以除数 <code>divisor</code> 得到的 <strong>商</strong> 。</p><p><strong>注意</strong>：假设我们的环境只能存储 <strong>32 位</strong> 有符号整数，其数值范围是 <code>[−2^31, 2^31 − 1]</code> 。本题中，如果商 <strong>严格大于</strong> <code>2^31 − 1</code> ，则返回 <code>2^31 − 1</code> ；如果商 <strong>严格小于</strong> <code>-2^31</code> ，则返回 <code>-2^31</code> 。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> dividend <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> divisor <span class="token operator">=</span> <span class="token number">3</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token number">3.33333</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ，向零截断后得到 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> dividend <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> divisor <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">2</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> <span class="token number">7</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2.33333</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ，向零截断后得到 <span class="token operator">-</span><span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= dividend, divisor &lt;= 2^31 - 1</code></li><li><code>divisor != 0</code></li></ul><blockquote><p>思路：</p><p>​ 因为负数的表达域比正数大，所以转为负数进行处理。使用一个符号位判断最终结果是正数还是负数。除法的本质是减法，利用倍增的性质减少使用减法的次数。如<code>39 = 32 * 1 + 4 * 1 + 2 * 1 + 1</code>。所以<code>39/2 = 16 + 2 + 1 = 19</code>。代码中的<code>d</code>会跟随被减数扩大而倍增，代表本次减去的数值相当于多少个原减数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> dividend<span class="token punctuation">,</span> <span class="token keyword">int</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">==</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">&amp;&amp;</span> divisor <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> sign <span class="token operator">=</span> <span class="token punctuation">(</span>dividend <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> divisor <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>dividend <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> divisor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dividend <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> dividend <span class="token operator">=</span> <span class="token operator">-</span>dividend<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>divisor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> divisor <span class="token operator">=</span> <span class="token operator">-</span>divisor<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>dividend <span class="token operator">&lt;=</span> divisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> divisor<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> limit <span class="token operator">&amp;&amp;</span> d <span class="token operator">&gt;=</span> limit <span class="token operator">&amp;&amp;</span> c <span class="token operator">&gt;=</span> dividend <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                c <span class="token operator">+=</span> c<span class="token punctuation">;</span>
                d <span class="token operator">+=</span> d<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            dividend <span class="token operator">-=</span> c<span class="token punctuation">;</span>
            res <span class="token operator">+=</span> d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sign <span class="token operator">?</span> res <span class="token operator">:</span> <span class="token operator">-</span>res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),_={id:"_50-pow-x-n",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#_50-pow-x-n","aria-hidden":"true"},"#",-1),q={href:"https://leetcode.cn/problems/powx-n/",target:"_blank",rel:"noopener noreferrer"},z=a(`<p>实现 <code>pow(x,n )</code> ，即计算 <code>x</code> 的整数 <code>n</code> 次幂函数（即，<code>x^n</code> ）。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">2.00000</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">10</span>
输出：<span class="token number">1024.00000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">2.10000</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">9.26100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">2.00000</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>
输出：<span class="token number">0.25000</span>
解释：<span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">22</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token number">0.25</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>-100.0 &lt; x &lt; 100.0</code></li><li><code>-2^31 &lt;= n &lt;= 2^31-1</code></li><li><code>n</code> 是一个整数</li><li>要么 <code>x</code> 不为零，要么 <code>n &gt; 0</code> 。</li><li><code>-10^4 &lt;= xn &lt;= 10^4</code></li></ul>`,9),S=n("blockquote",null,[n("p",null,"思路："),n("p",null,[s("​ "),n("code",null,"n"),s("如果是偶数，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"x"),n("mi",null,"n")]),n("mo",null,"="),n("msup",null,[n("mi",null,"x"),n("mfrac",null,[n("mi",null,"n"),n("mn",null,"2")])]),n("mo",null,"∗"),n("msup",null,[n("mi",null,"x"),n("mfrac",null,[n("mi",null,"n"),n("mn",null,"2")])])]),n("annotation",{encoding:"application/x-tex"},"x^n = x^{\\frac{n}{2}}* x^{\\frac{n}{2}}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6644em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8471em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8471em"}},[n("span",{style:{top:"-3.363em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6915em"}},[n("span",{style:{top:"-2.656em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.2255em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),n("span",{style:{top:"-3.384em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.344em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8471em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8471em"}},[n("span",{style:{top:"-3.363em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6915em"}},[n("span",{style:{top:"-2.656em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.2255em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),n("span",{style:{top:"-3.384em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.344em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])])])])]),s("，如果是奇数，"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"x"),n("mi",null,"n")]),n("mo",null,"="),n("mi",null,"x"),n("mo",null,"∗"),n("msup",null,[n("mi",null,"x"),n("mfrac",null,[n("mi",null,"n"),n("mn",null,"2")])]),n("mo",null,"∗"),n("msup",null,[n("mi",null,"x"),n("mfrac",null,[n("mi",null,"n"),n("mn",null,"2")])])]),n("annotation",{encoding:"application/x-tex"},"x^n = x*x^{\\frac{n}{2}}* x^{\\frac{n}{2}}")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6644em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4653em"}}),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8471em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8471em"}},[n("span",{style:{top:"-3.363em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6915em"}},[n("span",{style:{top:"-2.656em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.2255em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),n("span",{style:{top:"-3.384em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.344em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8471em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8471em"}},[n("span",{style:{top:"-3.363em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),n("span",{class:"mfrac"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6915em"}},[n("span",{style:{top:"-2.656em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])]),n("span",{style:{top:"-3.2255em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),n("span",{style:{top:"-3.384em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"sizing reset-size3 size1 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.344em"}},[n("span")])])])]),n("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])])])])]),s("，一个相当于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"x"),n("mn",null,"0")])]),n("annotation",{encoding:"application/x-tex"},"x^0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"0")])])])])])])])])])]),s("，一个相当于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mi",null,"x"),n("mn",null,"1")])]),n("annotation",{encoding:"application/x-tex"},"x^1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8141em"}}),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"x"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"1")])])])])])])])])])]),s("。所以可以使用递归来获取答案，将这两种情况进行合并，使用"),n("code",null,"n % 2"),s("作为第一项。然后定义边界条件，递归获取答案。")])],-1),L=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">double</span> half <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> odd <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> half <span class="token operator">*</span> half <span class="token operator">*</span> odd<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),A={id:"_415-字符串相加",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_415-字符串相加","aria-hidden":"true"},"#",-1),M={href:"https://leetcode.cn/problems/add-strings/",target:"_blank",rel:"noopener noreferrer"},C=a(`<p>给定两个字符串形式的非负整数 <code>num1</code> 和<code>num2</code> ，计算它们的和并同样以字符串形式返回。</p><p>你不能使用任何内建的用于处理大整数的库（比如 <code>BigInteger</code>）， 也不能直接将输入的字符串转换为整数形式。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num1 <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span>
输出：<span class="token string">&quot;134&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num1 <span class="token operator">=</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;77&quot;</span>
输出：<span class="token string">&quot;533&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num1 <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span>
输出：<span class="token string">&quot;0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num1.length, num2.length &lt;= 104</code></li><li><code>num1</code> 和<code>num2</code> 都只包含数字 <code>0-9</code></li><li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li></ul><blockquote><p>思路：</p><p>​ 使用两个数和一个进位，按位加即可。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>z <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            carry <span class="token operator">=</span> z <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),V={id:"字符串减法",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#字符串减法","aria-hidden":"true"},"#",-1),N={href:"https://www.nowcoder.com/practice/ae4d84312e384a1fa100b613f93f3fe0?tpId=196&tqId=40449&ru=/exam/oj",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>给定两个字符串形式的非负整数 num1 和num2 ，计算它们的差。</p><p>注意：</p><ul><li>num1 和num2 都只会包含数字 0-9</li><li>num1 和num2 都不包含任何前导零</li><li>你不能使用任何内建 BigInteger 库</li></ul><blockquote><p>思路：</p><p>​ 首先判断两个数的大小，使用长度和字典序判断即可。转化为使用大数减小数，使用一个数字来表示对前一位的借位，最后删除前导<code>0</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> borrow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> borrow <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
            borrow <span class="token operator">=</span> x <span class="token operator">-</span> borrow <span class="token operator">-</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      	<span class="token comment">// 删除前导0 </span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isLess</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">subStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLess</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T={id:"_43-字符串相乘",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_43-字符串相乘","aria-hidden":"true"},"#",-1),R={href:"https://leetcode.cn/problems/multiply-strings/",target:"_blank",rel:"noopener noreferrer"},U=a(`<p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的乘积，它们的乘积也表示为字符串形式。</p><p>**注意：**不能使用任何内置的 BigInteger 库或直接将输入转换为整数。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> num1 <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token string">&quot;6&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> num1 <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;456&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token string">&quot;56088&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num1.length, num2.length &lt;= 200</code></li><li><code>num1</code> 和 <code>num2</code> 只能由数字组成。</li><li><code>num1</code> 和 <code>num2</code> 都不包含任何前导零，除了数字0本身。</li></ul><blockquote><p>思路：</p><p>​ 两个数的乘积位数最多为两个数位数的和。可以使用<code>100 * 10</code>来反证，然后使用数组来保存按位乘的结果，最终对每一位的数字进行累加，计算进位。使用数学归纳法可以发现，下标<code>i</code>和<code>j</code>处的乘积会放在数组<code>i + j + 1</code>处位。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span> <span class="token operator">||</span>
                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> num2<span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">+</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> carry <span class="token operator">+</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            carry <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="字符串除法" tabindex="-1"><a class="header-anchor" href="#字符串除法" aria-hidden="true">#</a> 字符串除法</h4><p>给定两个以字符串形式表示的非负整数 <code>num1</code> 和 <code>num2</code>，返回 <code>num1</code> 和 <code>num2</code> 的商，它们的商也表示为字符串形式。</p><blockquote><p>思路：</p><p>​ 借助减法和加法实现，将除数后面加<code>0</code>，然后使用减法，得到减的次数，然后将次数后面加等量的<code>0</code>，累计到答案中去。</p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/hlr2h18f8y.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">divideString</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span><span class="token comment">// 结果</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isLess</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">StringBuilder</span> sbTeam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用这个往后面不断加0 和num做减法</span>
            <span class="token class-name">StringBuilder</span> sbCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 次数 可能很大</span>
            <span class="token keyword">int</span> subLen <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 统计大概要加几个零</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> subLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sbTeam<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sbCount<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果0 加多了 那么要删一个 类似&quot;12300&quot; / &quot;23&quot; &quot;12300&quot;比&quot;23000&quot;小</span>
            <span class="token comment">// 所以要 &quot;2300&quot; 对应比&quot;23&quot;扩大 &quot;100&quot;倍数，每减一次&quot;2300&quot; 则结果加&quot;100&quot;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLess</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> sbTeam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sbTeam<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sbTeam<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                sbCount<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sbCount<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 一直能减的时候</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isLess</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> sbTeam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                num1 <span class="token operator">=</span> <span class="token function">subStrings</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> sbTeam<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                value <span class="token operator">=</span> <span class="token function">addStrings</span><span class="token punctuation">(</span>sbCount<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> borrow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> borrow <span class="token operator">-</span> y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
            borrow <span class="token operator">=</span> x <span class="token operator">-</span> borrow <span class="token operator">-</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 删除前导0 </span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLess</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">subStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLess</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">sub</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span> num1<span class="token punctuation">,</span> <span class="token class-name">String</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> y <span class="token operator">=</span> j <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">getNumericValue</span><span class="token punctuation">(</span>num2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>z <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            carry <span class="token operator">=</span> z <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
            j<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="回文数" tabindex="-1"><a class="header-anchor" href="#回文数" aria-hidden="true">#</a> 回文数</h3>`,16),H={id:"_9-回文数",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#_9-回文数","aria-hidden":"true"},"#",-1),O={href:"https://leetcode.cn/problems/palindrome-number/",target:"_blank",rel:"noopener noreferrer"},Y=a(`<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><ul><li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">121</span>
输出：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">121</span>
输出：<span class="token boolean">false</span>
解释：从左向右读<span class="token punctuation">,</span> 为 <span class="token operator">-</span><span class="token number">121</span> 。 从右向左读<span class="token punctuation">,</span> 为 <span class="token number">121</span><span class="token operator">-</span> 。因此它不是一个回文数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">10</span>
输出：<span class="token boolean">false</span>
解释：从右向左读<span class="token punctuation">,</span> 为 <span class="token number">01</span> 。因此它不是一个回文数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= x &lt;= 2^31 - 1</code></li></ul><p><strong>进阶</strong>：你能不将整数转为字符串来解决这个问题吗？</p><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,15),D={id:"_906-超级回文数",tabindex:"-1"},Z=n("a",{class:"header-anchor",href:"#_906-超级回文数","aria-hidden":"true"},"#",-1),$={href:"https://leetcode.cn/problems/super-palindromes/",target:"_blank",rel:"noopener noreferrer"},F=a(`<p>如果一个正整数自身是回文数，而且它也是一个回文数的平方，那么我们称这个数为超级回文数。</p><p>现在，给定两个正整数 <code>L</code> 和 <code>R</code> （以字符串形式表示），返回包含在范围 <code>[L, R]</code> 中的超级回文数的数目。</p><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：<span class="token constant">L</span> <span class="token operator">=</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span>
输出：<span class="token number">4</span>
解释：
<span class="token number">4</span>，<span class="token number">9</span>，<span class="token number">121</span>，以及 <span class="token number">484</span> 是超级回文数。
注意 <span class="token number">676</span> 不是一个超级回文数： <span class="token number">26</span> <span class="token operator">*</span> <span class="token number">26</span> <span class="token operator">=</span> <span class="token number">676</span>，但是 <span class="token number">26</span> 不是回文数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ol><li><code>1 &lt;= len(L) &lt;= 18</code></li><li><code>1 &lt;= len(R) &lt;= 18</code></li><li><code>L</code> 和 <code>R</code> 是表示 <code>[1, 10^18)</code> 范围的整数的字符串。</li><li><code>int(L) &lt;= int(R)</code></li></ol><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,9),G={id:"_479-最大回文数乘积",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#_479-最大回文数乘积","aria-hidden":"true"},"#",-1),K={href:"https://leetcode.cn/problems/largest-palindrome-product/",target:"_blank",rel:"noopener noreferrer"},Q=a(`<p>给定一个整数 n ，返回 <em>可表示为两个 <code>n</code> 位整数乘积的 <strong>最大回文整数</strong></em> 。因为答案可能非常大，所以返回它对 <code>1337</code> <strong>取余</strong> 。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">987</span>
解释：<span class="token number">99</span> x <span class="token number">91</span> <span class="token operator">=</span> <span class="token number">9009</span><span class="token punctuation">,</span> <span class="token number">9009</span> <span class="token operator">%</span> <span class="token number">1337</span> <span class="token operator">=</span> <span class="token number">987</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入： n <span class="token operator">=</span> <span class="token number">1</span>
输出： <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= n &lt;= 8</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,10),W={id:"_564-寻找最近的回文数",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#_564-寻找最近的回文数","aria-hidden":"true"},"#",-1),sn={href:"https://leetcode.cn/problems/find-the-closest-palindrome/",target:"_blank",rel:"noopener noreferrer"},an=a(`<p>给定一个表示整数的字符串 <code>n</code> ，返回与它最近的回文整数（不包括自身）。如果不止一个，返回较小的那个。</p><p>“最近的”定义为两个整数<strong>差的绝对值</strong>最小。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token string">&quot;121&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> <span class="token number">0</span> 和 <span class="token number">2</span>是最近的回文，但我们返回最小的，也就是 <span class="token number">0</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,9),pn={id:"_866-回文质数",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#_866-回文质数","aria-hidden":"true"},"#",-1),en={href:"https://leetcode.cn/problems/prime-palindrome/",target:"_blank",rel:"noopener noreferrer"},on=a(`<p>给你一个整数 <code>n</code> ，返回大于或等于 <code>n</code> 的最小回文质数。</p><p>一个整数如果恰好有两个除数：<code>1</code> 和它本身，那么它是 <strong>质数</strong> 。注意，<code>1</code> 不是质数。</p><ul><li>例如，<code>2</code>、<code>3</code>、<code>5</code>、<code>7</code>、<code>11</code> 和 <code>13</code> 都是质数。</li></ul><p>一个整数如果从左向右读和从右向左读是相同的，那么它是 <strong>回文数</strong> 。</p><ul><li>例如，<code>101</code> 和 <code>12321</code> 都是回文数。</li></ul><p>测试用例保证答案总是存在，并且在 <code>[2, 2 * 108]</code> 范围内。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">6</span>
输出：<span class="token number">7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">8</span>
输出：<span class="token number">11</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">13</span>
输出：<span class="token number">101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^8</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,17),cn={id:"_2217-找到指定长度的回文数",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#_2217-找到指定长度的回文数","aria-hidden":"true"},"#",-1),un={href:"https://leetcode.cn/problems/find-palindrome-with-fixed-length/",target:"_blank",rel:"noopener noreferrer"},rn=a(`<p>相关标签</p><p>相关企业</p><p>提示</p><p>给你一个整数数组 <code>queries</code> 和一个 <strong>正</strong> 整数 <code>intLength</code> ，请你返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是长度为 <code>intLength</code> 的 <strong>正回文数</strong> 中第 <code>queries[i]</code> 小的数字，如果不存在这样的回文数，则为 <code>-1</code> 。</p><p><strong>回文数</strong> 指的是从前往后和从后往前读一模一样的数字。回文数不能有前导 0 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：queries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intLength <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">141</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">]</span>
解释：
长度为 <span class="token number">3</span> 的最小回文数依次是：
<span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token operator">...</span>
第 <span class="token number">90</span> 个长度为 <span class="token number">3</span> 的回文数是 <span class="token number">999</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：queries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intLength <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token punctuation">[</span><span class="token number">1111</span><span class="token punctuation">,</span><span class="token number">1331</span><span class="token punctuation">,</span><span class="token number">1551</span><span class="token punctuation">]</span>
解释：
长度为 <span class="token number">4</span> 的前 <span class="token number">6</span> 个回文数是：
<span class="token number">1001</span><span class="token punctuation">,</span> <span class="token number">1111</span><span class="token punctuation">,</span> <span class="token number">1221</span><span class="token punctuation">,</span> <span class="token number">1331</span><span class="token punctuation">,</span> <span class="token number">1441</span> 和 <span class="token number">1551</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= queries.length &lt;= 5 * 10^4</code></li><li><code>1 &lt;= queries[i] &lt;= 10^9</code></li><li><code>1 &lt;= intLength &lt;= 15</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),kn={id:"_2384-最大回文数字",tabindex:"-1"},dn=n("a",{class:"header-anchor",href:"#_2384-最大回文数字","aria-hidden":"true"},"#",-1),mn={href:"https://leetcode.cn/problems/largest-palindromic-number/",target:"_blank",rel:"noopener noreferrer"},vn=a(`<p>给你一个仅由数字（<code>0 - 9</code>）组成的字符串 <code>num</code> 。</p><p>请你找出能够使用 <code>num</code> 中数字形成的 <strong>最大回文</strong> 整数，并以字符串形式返回。该整数不含 <strong>前导零</strong> 。</p><p><strong>注意：</strong></p><ul><li>你 <strong>无需</strong> 使用 <code>num</code> 中的所有数字，但你必须使用 <strong>至少</strong> 一个数字。</li><li>数字可以重新排序。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num <span class="token operator">=</span> <span class="token string">&quot;444947137&quot;</span>
输出：<span class="token string">&quot;7449447&quot;</span>
解释：
从 <span class="token string">&quot;444947137&quot;</span> 中选用数字 <span class="token string">&quot;4449477&quot;</span>，可以形成回文整数 <span class="token string">&quot;7449447&quot;</span> 。
可以证明 <span class="token string">&quot;7449447&quot;</span> 是能够形成的最大回文整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num <span class="token operator">=</span> <span class="token string">&quot;00009&quot;</span>
输出：<span class="token string">&quot;9&quot;</span>
解释：
可以证明 <span class="token string">&quot;9&quot;</span> 能够形成的最大回文整数。
注意返回的整数不应含前导零。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num.length &lt;= 105</code></li><li><code>num</code> 由数字（<code>0 - 9</code>）组成</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),bn={id:"_2396-严格回文的数字",tabindex:"-1"},gn=n("a",{class:"header-anchor",href:"#_2396-严格回文的数字","aria-hidden":"true"},"#",-1),hn={href:"https://leetcode.cn/problems/strictly-palindromic-number/",target:"_blank",rel:"noopener noreferrer"},yn=a(`<p>如果一个整数 <code>n</code> 在 <code>b</code> 进制下（<code>b</code> 为 <code>2</code> 到 <code>n - 2</code> 之间的所有整数）对应的字符串 <strong>全部</strong> 都是 <strong>回文的</strong> ，那么我们称这个数 <code>n</code> 是 <strong>严格回文</strong> 的。</p><p>给你一个整数 <code>n</code> ，如果 <code>n</code> 是 <strong>严格回文</strong> 的，请返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p>如果一个字符串从前往后读和从后往前读完全相同，那么这个字符串是 <strong>回文的</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">9</span>
输出：<span class="token boolean">false</span>
解释：在 <span class="token number">2</span> 进制下：<span class="token number">9</span> <span class="token operator">=</span> <span class="token number">1001</span> ，是回文的。
在 <span class="token number">3</span> 进制下：<span class="token number">9</span> <span class="token operator">=</span> <span class="token number">100</span> ，不是回文的。
所以，<span class="token number">9</span> 不是严格回文数字，我们返回 <span class="token boolean">false</span> 。
注意在 <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> 和 <span class="token number">7</span> 进制下，n <span class="token operator">=</span> <span class="token number">9</span> 都不是回文的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token boolean">false</span>
解释：我们只考虑 <span class="token number">2</span> 进制：<span class="token number">4</span> <span class="token operator">=</span> <span class="token number">100</span> ，不是回文的。
所以我们返回 <span class="token boolean">false</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>4 &lt;= n &lt;= 10^5</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),wn={id:"_2967-使数组成为等数数组的最小代价",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#_2967-使数组成为等数数组的最小代价","aria-hidden":"true"},"#",-1),jn={href:"https://leetcode.cn/problems/minimum-cost-to-make-array-equalindromic/",target:"_blank",rel:"noopener noreferrer"},_n=a(`<p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。</p><p>你可以对 <code>nums</code> 执行特殊操作 <strong>任意次</strong> （也可以 <strong>0</strong> 次）。每一次特殊操作中，你需要 <strong>按顺序</strong> 执行以下步骤：</p><ul><li>从范围 <code>[0, n - 1]</code> 里选择一个下标 <code>i</code> 和一个 <strong>正</strong> 整数 <code>x</code> 。</li><li>将 <code>|nums[i] - x|</code> 添加到总代价里。</li><li>将 <code>nums[i]</code> 变为 <code>x</code> 。</li></ul><p>如果一个正整数正着读和反着读都相同，那么我们称这个数是 <strong>回文数</strong> 。比方说，<code>121</code> ，<code>2552</code> 和 <code>65756</code> 都是回文数，但是 <code>24</code> ，<code>46</code> ，<code>235</code> 都不是回文数。</p><p>如果一个数组中的所有元素都等于一个整数 <code>y</code> ，且 <code>y</code> 是一个小于 <code>10^9</code> 的 <strong>回文数</strong> ，那么我们称这个数组是一个 <strong>等数数组</strong> 。</p><p>请你返回一个整数，表示执行任意次特殊操作后使 <code>nums</code> 成为 <strong>等数数组</strong> 的 <strong>最小</strong> 总代价。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token number">6</span>
解释：我们可以将数组中所有元素变为回文数 <span class="token number">3</span> 得到等数数组，数组变成 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 需要执行 <span class="token number">4</span> 次特殊操作，代价为 <span class="token operator">|</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">5</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">6</span> 。
将所有元素变为其他回文数的总代价都大于 <span class="token number">6</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span>
输出：<span class="token number">11</span>
解释：我们可以将数组中所有元素变为回文数 <span class="token number">11</span> 得到等数数组，数组变成 <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> 需要执行 <span class="token number">5</span> 次特殊操作，代价为 <span class="token operator">|</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">12</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">13</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">14</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">15</span> <span class="token operator">-</span> <span class="token number">11</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">11</span> 。
将所有元素变为其他回文数的总代价都大于 <span class="token number">11</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3 ：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span>
输出：<span class="token number">22</span>
解释：我们可以将数组中所有元素变为回文数 <span class="token number">22</span> 得到等数数组，数组变为 <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span> 需要执行 <span class="token number">2</span> 次特殊操作，代价为 <span class="token operator">|</span><span class="token number">33</span> <span class="token operator">-</span> <span class="token number">22</span><span class="token operator">|</span> <span class="token operator">+</span> <span class="token operator">|</span><span class="token number">33</span> <span class="token operator">-</span> <span class="token number">22</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">22</span> 。
将所有元素变为其他回文数的总代价都大于 <span class="token number">22</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="质数筛选" tabindex="-1"><a class="header-anchor" href="#质数筛选" aria-hidden="true">#</a> 质数筛选</h3><h4 id="判断一个数是不是质数" tabindex="-1"><a class="header-anchor" href="#判断一个数是不是质数" aria-hidden="true">#</a> 判断一个数是不是质数</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">*</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="埃式筛" tabindex="-1"><a class="header-anchor" href="#埃式筛" aria-hidden="true">#</a> 埃式筛</h4>`,21),xn=n("p",null,[s("​ 对于任意一个大于1的正整数"),n("code",null,"n"),s("，它的"),n("code",null,"x"),s("倍是合数("),n("code",null,"x > 1"),s(")，如果我们从小到大考虑每个数，然后同时把当前这个数的所有（比自己大的）倍数记为合数，那么运行结束的时候没有被标记的数就是质数了。要找到直到"),n("code",null,"n"),s("为止的所有素数，仅对不超过"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msqrt",null,[n("mi",null,"n")])]),n("annotation",{encoding:"application/x-tex"},"\\sqrt n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.04em","vertical-align":"-0.2397em"}}),n("span",{class:"mord sqrt"},[n("span",{class:"vlist-t vlist-t2"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8003em"}},[n("span",{class:"svg-align",style:{top:"-3em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"mord mathnormal",style:{"padding-left":"0.833em"}},"n")]),n("span",{style:{top:"-2.7603em"}},[n("span",{class:"pstrut",style:{height:"3em"}}),n("span",{class:"hide-tail",style:{"min-width":"0.853em",height:"1.08em"}},[n("svg",{xmlns:"http://www.w3.org/2000/svg",width:"400em",height:"1.08em",viewBox:"0 0 400000 1080",preserveAspectRatio:"xMinYMin slice"},[n("path",{d:`M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z`})])])])]),n("span",{class:"vlist-s"},"​")]),n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.2397em"}},[n("span")])])])])])])]),s("的素数进行筛选就足够了。")],-1),qn=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n <span class="token operator">/</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 防止溢出</span>
                    isPrime<span class="token punctuation">[</span>i <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="线性筛" tabindex="-1"><a class="header-anchor" href="#线性筛" aria-hidden="true">#</a> 线性筛</h4><p>​ 每个合数只被划掉一次，并且是被它的最小质因子划掉。换句话说，对于每个数，乘上<strong>每一个</strong><code>&lt;= lpf[x]</code>的质数，<code>lpf[x]</code>指的是<code>x</code>的最小质因子。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countPrimes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isPrime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> i <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
                isPrime<span class="token punctuation">[</span>x <span class="token operator">*</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h3 id="归纳" tabindex="-1"><a class="header-anchor" href="#归纳" aria-hidden="true">#</a> 归纳</h3>`,7),zn={id:"_330-按要求补齐数组",tabindex:"-1"},Sn=n("a",{class:"header-anchor",href:"#_330-按要求补齐数组","aria-hidden":"true"},"#",-1),Ln={href:"https://leetcode.cn/problems/patching-array/",target:"_blank",rel:"noopener noreferrer"},An=a(`<p>给定一个已排序的正整数数组 <code>nums</code> ，和一个正整数 <code>n</code> 。从 <code>[1, n]</code> 区间内选取任意个数字补充到 nums 中，使得 <code>[1, n]</code> 区间内的任何数字都可以用 nums 中某几个数字的和来表示。</p><p>请返回满足上述要求的最少需要补充的数字个数 。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">6</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">1</span> 
<span class="token literal-property property">解释</span><span class="token operator">:</span>
根据 nums 里现有的组合 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>，可以得出 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>。
现在如果我们将 <span class="token number">2</span> 添加到 nums 中， 组合变为<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>。
其和可以表示数字 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span>，能够覆盖 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span> 区间里所有的数。
所以我们最少需要添加一个数字。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">20</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">2</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> 我们需要添加 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">5</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 1000</code></li><li><code>1 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 按 <strong>升序排列</strong></li><li><code>1 &lt;= n &lt;= 2^31 - 1</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,13),Bn={id:"_1798-你能构造出连续值的最大数目",tabindex:"-1"},Mn=n("a",{class:"header-anchor",href:"#_1798-你能构造出连续值的最大数目","aria-hidden":"true"},"#",-1),Cn={href:"https://leetcode.cn/problems/maximum-number-of-consecutive-values-you-can-make/",target:"_blank",rel:"noopener noreferrer"},Vn=a(`<p>给你一个长度为 <code>n</code> 的整数数组 <code>coins</code> ，它代表你拥有的 <code>n</code> 个硬币。第 <code>i</code> 个硬币的值为 <code>coins[i]</code> 。如果你从这些硬币中选出一部分硬币，它们的和为 <code>x</code> ，那么称，你可以 <strong>构造</strong> 出 <code>x</code> 。</p><p>请返回从 <code>0</code> 开始（<strong>包括</strong> <code>0</code> ），你最多能 <strong>构造</strong> 出多少个连续整数。</p><p>你可能有多个相同值的硬币。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：你可以得到以下这些值：
<span class="token operator">-</span> <span class="token number">0</span>：什么都不取 <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">1</span>：取 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
从 <span class="token number">0</span> 开始，你可以构造出 <span class="token number">2</span> 个连续整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">8</span>
解释：你可以得到以下这些值：
<span class="token operator">-</span> <span class="token number">0</span>：什么都不取 <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">1</span>：取 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">2</span>：取 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">3</span>：取 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">4</span>：取 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">5</span>：取 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">6</span>：取 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">7</span>：取 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
从 <span class="token number">0</span> 开始，你可以构造出 <span class="token number">8</span> 个连续整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>coins.length == n</code></li><li><code>1 &lt;= n &lt;= 4 * 10^4</code></li><li><code>1 &lt;= coins[i] &lt;= 4 * 10^4</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),In={id:"_2952-需要添加的硬币的最小数量",tabindex:"-1"},Nn=n("a",{class:"header-anchor",href:"#_2952-需要添加的硬币的最小数量","aria-hidden":"true"},"#",-1),Pn={href:"https://leetcode.cn/problems/minimum-number-of-coins-to-be-added/",target:"_blank",rel:"noopener noreferrer"},Tn=a(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>coins</code>，表示可用的硬币的面值，以及一个整数 <code>target</code> 。</p><p>如果存在某个 <code>coins</code> 的子序列总和为 <code>x</code>，那么整数 <code>x</code> 就是一个 <strong>可取得的金额</strong> 。</p><p>返回需要添加到数组中的 <strong>任意面值</strong> 硬币的 <strong>最小数量</strong> ，使范围 <code>[1, target]</code> 内的每个整数都属于 <strong>可取得的金额</strong> 。</p><p>数组的 <strong>子序列</strong> 是通过删除原始数组的一些（<strong>可能不删除</strong>）元素而形成的新的 <strong>非空</strong> 数组，删除过程不会改变剩余元素的相对位置。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">19</span>
输出：<span class="token number">2</span>
解释：需要添加面值为 <span class="token number">2</span> 和 <span class="token number">8</span> 的硬币各一枚，得到硬币数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span> 。
可以证明从 <span class="token number">1</span> 到 <span class="token number">19</span> 的所有整数都可由数组中的硬币组合得到，且需要添加到数组中的硬币数目最小为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">19</span>
输出：<span class="token number">1</span>
解释：只需要添加一枚面值为 <span class="token number">2</span> 的硬币，得到硬币数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">]</span> 。
可以证明从 <span class="token number">1</span> 到 <span class="token number">19</span> 的所有整数都可由数组中的硬币组合得到，且需要添加到数组中的硬币数目最小为 <span class="token number">1</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">20</span>
输出：<span class="token number">3</span>
解释：
需要添加面值为 <span class="token number">4</span> 、<span class="token number">8</span> 和 <span class="token number">16</span> 的硬币各一枚，得到硬币数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span> 。 
可以证明从 <span class="token number">1</span> 到 <span class="token number">20</span> 的所有整数都可由数组中的硬币组合得到，且需要添加到数组中的硬币数目最小为 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 10^5</code></li><li><code>1 &lt;= coins.length &lt;= 10^5</code></li><li><code>1 &lt;= coins[i] &lt;= target</code></li></ul><blockquote><p>思路：</p><p>​ 使用一个区间<code>[0, s - 1]</code>来代表当前可以得到的数的范围，然后对已经存在的值进行遍历，扩充区间，如果新区间存在漏洞，则补充<code>s</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimumAddedCoins</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>coins<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>s <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>
                s <span class="token operator">+=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                s <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                res<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合数学" tabindex="-1"><a class="header-anchor" href="#组合数学" aria-hidden="true">#</a> 组合数学</h3>`,15),En={id:"_2954-统计感冒序列的数目",tabindex:"-1"},Rn=n("a",{class:"header-anchor",href:"#_2954-统计感冒序列的数目","aria-hidden":"true"},"#",-1),Un={href:"https://leetcode.cn/problems/count-the-number-of-infection-sequences/",target:"_blank",rel:"noopener noreferrer"},Hn=a(`<p>给你一个整数 <code>n</code> 和一个下标从 <strong>0</strong> 开始的整数数组 <code>sick</code> ，数组按 <strong>升序</strong> 排序。</p><p>有 <code>n</code> 位小朋友站成一排，按顺序编号为 <code>0</code> 到 <code>n - 1</code> 。数组 <code>sick</code> 包含一开始得了感冒的小朋友的位置。如果位置为 <code>i</code> 的小朋友得了感冒，他会传染给下标为 <code>i - 1</code> 或者 <code>i + 1</code> 的小朋友，<strong>前提</strong> 是被传染的小朋友存在且还没有得感冒。每一秒中， <strong>至多一位</strong> 还没感冒的小朋友会被传染。</p><p>经过有限的秒数后，队列中所有小朋友都会感冒。<strong>感冒序列</strong> 指的是 <strong>所有</strong> 一开始没有感冒的小朋友最后得感冒的顺序序列。请你返回所有感冒序列的数目。</p><p>由于答案可能很大，请你将答案对 <code>10^9 + 7</code> 取余后返回。</p><p><strong>注意</strong>，感冒序列 <strong>不</strong> 包含一开始就得了感冒的小朋友的下标。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> sick <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：一开始，下标为 <span class="token number">1</span> ，<span class="token number">2</span> 和 <span class="token number">3</span> 的小朋友没有感冒。总共有 <span class="token number">4</span> 个可能的感冒序列：
<span class="token operator">-</span> 一开始，下标为 <span class="token number">1</span> 和 <span class="token number">3</span> 的小朋友可以被传染，因为他们分别挨着有感冒的小朋友 <span class="token number">0</span> 和 <span class="token number">4</span> ，令下标为 <span class="token number">1</span> 的小朋友先被传染。
然后，下标为 <span class="token number">2</span> 的小朋友挨着感冒的小朋友 <span class="token number">1</span> ，下标为 <span class="token number">3</span> 的小朋友挨着感冒的小朋友 <span class="token number">4</span> ，两位小朋友都可以被传染，令下标为 <span class="token number">2</span> 的小朋友被传染。
最后，下标为 <span class="token number">3</span> 的小朋友被传染，因为他挨着感冒的小朋友 <span class="token number">2</span> 和 <span class="token number">4</span> ，感冒序列为 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 一开始，下标为 <span class="token number">1</span> 和 <span class="token number">3</span> 的小朋友可以被传染，因为他们分别挨着感冒的小朋友 <span class="token number">0</span> 和 <span class="token number">4</span> ，令下标为 <span class="token number">1</span> 的小朋友先被传染。
然后，下标为 <span class="token number">2</span> 的小朋友挨着感冒的小朋友 <span class="token number">1</span> ，下标为 <span class="token number">3</span> 的小朋友挨着感冒的小朋友 <span class="token number">4</span> ，两位小朋友都可以被传染，令下标为 <span class="token number">3</span> 的小朋友被传染。
最后，下标为 <span class="token number">2</span> 的小朋友被传染，因为他挨着感冒的小朋友 <span class="token number">1</span> 和 <span class="token number">3</span> ，感冒序列为  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 感冒序列 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> ，被传染的顺序：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 感冒序列 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> ，被传染的顺序：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> sick <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：一开始，下标为 <span class="token number">0</span> ，<span class="token number">2</span> 和 <span class="token number">3</span> 的小朋友没有感冒。总共有 <span class="token number">3</span> 个可能的感冒序列：
<span class="token operator">-</span> 感冒序列 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> ，被传染的顺序：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 感冒序列 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> ，被传染的顺序：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 感冒序列 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> ，被传染的顺序：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= sick.length &lt;= n - 1</code></li><li><code>0 &lt;= sick[i] &lt;= n - 1</code></li><li><code>sick</code> 按升序排列。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr><h3 id="逆元" tabindex="-1"><a class="header-anchor" href="#逆元" aria-hidden="true">#</a> 逆元</h3>`,15);function Xn(On,Yn){const p=l("ExternalLinkIcon");return o(),c("div",null,[u,n("h4",r,[k,s(),n("a",d,[s("7. 整数反转"),t(p)])]),m,n("h4",v,[b,s(),n("a",g,[s("8. 字符串转换整数 (atoi)"),t(p)])]),h,n("h4",y,[w,s(),n("a",f,[s("29. 两数相除"),t(p)])]),j,n("h4",_,[x,s(),n("a",q,[s("50. Pow(x, n)"),t(p)])]),z,S,L,n("h4",A,[B,s(),n("a",M,[s("415. 字符串相加"),t(p)])]),C,n("h4",V,[I,s(),n("a",N,[s("字符串减法"),t(p)])]),P,n("h4",T,[E,s(),n("a",R,[s("43. 字符串相乘"),t(p)])]),U,n("h4",H,[X,s(),n("a",O,[s("9. 回文数"),t(p)])]),Y,n("h4",D,[Z,s(),n("a",$,[s("906. 超级回文数"),t(p)])]),F,n("h4",G,[J,s(),n("a",K,[s("479. 最大回文数乘积"),t(p)])]),Q,n("h4",W,[nn,s(),n("a",sn,[s("564. 寻找最近的回文数"),t(p)])]),an,n("h4",pn,[tn,s(),n("a",en,[s("866. 回文质数"),t(p)])]),on,n("h4",cn,[ln,s(),n("a",un,[s("2217. 找到指定长度的回文数"),t(p)])]),rn,n("h4",kn,[dn,s(),n("a",mn,[s("2384. 最大回文数字"),t(p)])]),vn,n("h4",bn,[gn,s(),n("a",hn,[s("2396. 严格回文的数字"),t(p)])]),yn,n("h4",wn,[fn,s(),n("a",jn,[s("2967. 使数组成为等数数组的最小代价"),t(p)])]),_n,xn,qn,n("h4",zn,[Sn,s(),n("a",Ln,[s("330. 按要求补齐数组"),t(p)])]),An,n("h4",Bn,[Mn,s(),n("a",Cn,[s("1798. 你能构造出连续值的最大数目"),t(p)])]),Vn,n("h4",In,[Nn,s(),n("a",Pn,[s("2952. 需要添加的硬币的最小数量"),t(p)])]),Tn,n("h4",En,[Rn,s(),n("a",Un,[s("2954. 统计感冒序列的数目"),t(p)])]),Hn])}const Zn=e(i,[["render",Xn],["__file","math.html.vue"]]);export{Zn as default};
