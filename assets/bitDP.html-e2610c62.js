import{_ as o,H as t,X as c,Y as l,Z as n,a0 as s,a1 as p,$ as a}from"./framework-47f15ee6.js";const r={},i=a('<h1 id="数位dp" tabindex="-1"><a class="header-anchor" href="#数位dp" aria-hidden="true">#</a> 数位DP</h1><p>[toc]</p><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><ol><li>数位概念：是指把一个数字按照个、十、百、千一位一位拆开，关注它每一位上的数字。 举个例子： 如果拆的是十进制数，那么每一位数字都是 0-9， 其他进制可类比十进制。例如二进制，每一位数字都是0-1。 leetcode 目前题目都是基于十进制和二进制的。</li><li>数位 DP：（题目应用特征和条件） （1）计数 （2）输入会提供一个 <strong>数字区间(或者只提供上界)</strong> 作为计数的限制 （3）题目条件经过 <strong>转换</strong> 后可以使用「数位」的思想去判断和理解</li><li>为什么可以用数位DP （1）最朴素的计数就是从小到大开始依次加一。 （2）但我们发现对于 <strong>位数比较多的数，这样的过程中有许多重复的部分</strong> 。 举个例子：从 700 数到 799、从 800 数到 899、和从 900 数到 999 的过程非常相似，它们都是后两位从 000 变到 999，不一样的地方只有百位这一位。所以我们可以把重复计算的过程归并保证不重复计算，即将这些过程中产生的计数答案存放在一个数组里。此数组根据题目具体要求设置状态，用递推 或 DP 的方式进行状态转移。 （3）统计答案建议使用 <strong>记忆化搜索</strong> ，为了 <strong>统计所有不超过上限的答案</strong> ，要 从<strong>高到低枚举每一位</strong> ，再考虑每一位都可以填哪些数字，最后利用通用答案数组统计答案。</li></ol><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><ul><li>相对固定参数设置</li><li>假设 <code>n</code> 是范围的最大值</li><li><code>i</code>（必选） 表示第 <code>i</code> 个数位</li><li><code>isLimit</code> （必选） 表示当前是否受到了<code>n</code> 的约束。若为真，则第<code>i</code> 位填入的数字至多为<code> s[i]</code> ，否则至多为 <code>9</code> 。举个例子：<code> n=234</code> ，如果前面填了 <code>23</code> ，那么最后一位至多填 <code>4</code> ；如果前面填的不是 <code>23</code> ，那么最后一位至多填 <code>9</code>。如果在受到约束的情况下填了 <code>s[i]</code> ，那么后续填入的数字仍会受到<code>n</code>的约束。</li><li><code>isNum</code> （可选） 表示<code>i</code>前面的数位是否填了数字。若为假，则当前位可以跳过（不填数字），或者要填入的数字至少为<code>1</code> ；若为真，则要填入的数字可以从<code>0</code>开始。举个例子：例如 <code>n=123</code> ，在<code>i=0</code>时跳过的话，相当于后面要构造的是一个<code>99</code>以内的数字了，如果<code>i=1</code>不跳过，那么相当于构造一个<code>10</code> 到<code>99</code>的两位数，如果<code>i=1</code>跳过，相当于构造的是一个<code>9</code>以内的数字。</li><li><code>mask</code>（可选） 表示前面选过的数字集合，换句话说，第<code>i</code>位要选的数字不能在 <code>mask</code> 中。</li></ul><h2 id="题型" tabindex="-1"><a class="header-anchor" href="#题型" aria-hidden="true">#</a> 题型</h2><p><strong>前导0：一般涉及数位长度或者比较每一个数位时需要考虑</strong></p><h3 id="pre类-统计数位某个数字的出现次数-和前面的数位相关等等" tabindex="-1"><a class="header-anchor" href="#pre类-统计数位某个数字的出现次数-和前面的数位相关等等" aria-hidden="true">#</a> pre类，统计数位某个数字的出现次数\\和前面的数位相关等等</h3>',9),u={id:"_788-旋转数字",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#_788-旋转数字","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/rotated-digits/",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>我们称一个数 X 为好数, 如果它的每位数字逐个地被旋转 180 度后，我们仍可以得到一个有效的，且和 X 不同的数。要求每位数字都要被旋转。</p><p>如果一个数的每位数字被旋转以后仍然还是一个数字， 则这个数是有效的。0, 1, 和 8 被旋转后仍然是它们自己；2 和 5 可以互相旋转成对方（在这种情况下，它们以不同的方向旋转，换句话说，2 和 5 互为镜像）；6 和 9 同理，除了这些以外其他的数字旋转以后都不再是有效的数字。</p><p>现在我们有一个正整数 <code>N</code>, 计算从 <code>1</code> 到 <code>N</code> 中有多少个数 X 是好数？</p><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token number">10</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">4</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> 
在<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>中有四个好数： <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span>。
注意 <span class="token number">1</span> 和 <span class="token number">10</span> 不是好数<span class="token punctuation">,</span> 因为他们在旋转之后不变。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li>N 的取值范围是 <code>[1, 10000]</code>。</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,10),b={id:"_600-不含连续1的非负整数",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#_600-不含连续1的非负整数","aria-hidden":"true"},"#",-1),g={href:"https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/",target:"_blank",rel:"noopener noreferrer"},h=a(`<p>给定一个正整数 <code>n</code> ，请你统计在 <code>[0, n]</code> 范围的非负整数中，有多少个整数的二进制表示中不存在 <strong>连续的 1</strong> 。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">5</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">5</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> 
下面列出范围在 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> 的非负整数与其对应的二进制表示：
<span class="token number">0</span> <span class="token operator">:</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">:</span> <span class="token number">10</span>
<span class="token number">3</span> <span class="token operator">:</span> <span class="token number">11</span>
<span class="token number">4</span> <span class="token operator">:</span> <span class="token number">100</span>
<span class="token number">5</span> <span class="token operator">:</span> <span class="token number">101</span>
其中，只有整数 <span class="token number">3</span> 违反规则（有两个连续的 <span class="token number">1</span> ），其他 <span class="token number">5</span> 个满足规则。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">1</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= n &lt;= 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,12),_={id:"面试题-17-06-2出现的次数",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#面试题-17-06-2出现的次数","aria-hidden":"true"},"#",-1),j={href:"https://leetcode.cn/problems/number-of-2s-in-range-lcci/",target:"_blank",rel:"noopener noreferrer"},x=a(`<p>编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。</p><p><strong>示例:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token number">25</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">9</span>
<span class="token literal-property property">解释</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">(</span>注意 <span class="token number">22</span> 应该算作两次<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示：</p><ul><li><code>n &lt;= 10^9</code></li></ul><blockquote><p>思路：</p><p>​ 使用数位DP模板</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numberOf2sInRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">:</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> count<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLimit <span class="token operator">&amp;&amp;</span> cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> up <span class="token operator">=</span> isLimit <span class="token operator">?</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> d <span class="token operator">&lt;=</span> up<span class="token punctuation">;</span> d<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> count <span class="token operator">+</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isLimit <span class="token operator">&amp;&amp;</span> d <span class="token operator">==</span> up<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,8),f={id:"_233-数字-1-的个数",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_233-数字-1-的个数","aria-hidden":"true"},"#",-1),w={href:"https://leetcode.cn/problems/number-of-digit-one/",target:"_blank",rel:"noopener noreferrer"},L=a(`<p>给定一个整数 <code>n</code>，计算所有小于等于 <code>n</code> 的非负整数中数字 <code>1</code> 出现的个数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">13</span>
输出：<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">0</span>
输出：<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,10),z={id:"_2719-统计整数数目",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#_2719-统计整数数目","aria-hidden":"true"},"#",-1),D={href:"https://leetcode.cn/problems/count-of-integers/",target:"_blank",rel:"noopener noreferrer"},P=a(`<p>给你两个数字字符串 <code>num1</code> 和 <code>num2</code> ，以及两个整数 <code>max_sum</code> 和 <code>min_sum</code> 。如果一个整数 <code>x</code> 满足以下条件，我们称它是一个好整数：</p><ul><li><code>num1 &lt;= x &lt;= num2</code></li><li><code>min_sum &lt;= digit_sum(x) &lt;= max_sum</code>.</li></ul><p>请你返回好整数的数目。答案可能很大，请返回答案对 <code>109 + 7</code> 取余后的结果。</p><p>注意，<code>digit_sum(x)</code> 表示 <code>x</code> 各位数字之和。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num1 <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">,</span> min_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max_num <span class="token operator">=</span> <span class="token number">8</span>
输出：<span class="token number">11</span>
解释：总共有 <span class="token number">11</span> 个整数的数位和在 <span class="token number">1</span> 到 <span class="token number">8</span> 之间，分别是 <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span> 和 <span class="token number">12</span> 。所以我们返回 <span class="token number">11</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num1 <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> min_num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> max_num <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">5</span>
解释：数位和在 <span class="token number">1</span> 到 <span class="token number">5</span> 之间的 <span class="token number">5</span> 个整数分别为 <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span> 和 <span class="token number">5</span> 。所以我们返回 <span class="token number">5</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= num1 &lt;= num2 &lt;= 10^22</code></li><li><code>1 &lt;= min_sum &lt;= max_sum &lt;= 400</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),I={id:"_1742-盒子中小球的最大数量",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#_1742-盒子中小球的最大数量","aria-hidden":"true"},"#",-1),X={href:"https://leetcode.cn/problems/maximum-number-of-balls-in-a-box/",target:"_blank",rel:"noopener noreferrer"},B=a(`<p>你在一家生产小球的玩具厂工作，有 <code>n</code> 个小球，编号从 <code>lowLimit</code> 开始，到 <code>highLimit</code> 结束（包括 <code>lowLimit</code> 和 <code>highLimit</code> ，即 <code>n == highLimit - lowLimit + 1</code>）。另有无限数量的盒子，编号从 <code>1</code> 到 <code>infinity</code> 。</p><p>你的工作是将每个小球放入盒子中，其中盒子的编号应当等于小球编号上每位数字的和。例如，编号 <code>321</code> 的小球应当放入编号 <code>3 + 2 + 1 = 6</code> 的盒子，而编号 <code>10</code> 的小球应当放入编号 <code>1 + 0 = 1</code> 的盒子。</p><p>给你两个整数 <code>lowLimit</code> 和 <code>highLimit</code> ，返回放有最多小球的盒子中的小球数量*。*如果有多个盒子都满足放有最多小球，只需返回其中任一盒子的小球数量。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：lowLimit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> highLimit <span class="token operator">=</span> <span class="token number">10</span>
输出：<span class="token number">2</span>
解释：
盒子编号：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">...</span>
小球数量：<span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>  <span class="token number">0</span>  <span class="token operator">...</span>
编号 <span class="token number">1</span> 的盒子放有最多小球，小球数量为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：lowLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> highLimit <span class="token operator">=</span> <span class="token number">15</span>
输出：<span class="token number">2</span>
解释：
盒子编号：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">...</span>
小球数量：<span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>  <span class="token number">0</span>  <span class="token operator">...</span>
编号 <span class="token number">5</span> 和 <span class="token number">6</span> 的盒子放有最多小球，每个盒子中的小球数量都是 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：lowLimit <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> highLimit <span class="token operator">=</span> <span class="token number">28</span>
输出：<span class="token number">2</span>
解释：
盒子编号：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token operator">...</span>
小球数量：<span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token operator">...</span>
编号 <span class="token number">10</span> 的盒子放有最多小球，小球数量为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= lowLimit &lt;= highLimit &lt;= 10^5</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),E={id:"_2999-统计强大整数的数目",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#_2999-统计强大整数的数目","aria-hidden":"true"},"#",-1),A={href:"https://leetcode.cn/problems/count-the-number-of-powerful-integers/",target:"_blank",rel:"noopener noreferrer"},C=a(`<p>给你三个整数 <code>start</code> ，<code>finish</code> 和 <code>limit</code> 。同时给你一个下标从 <strong>0</strong> 开始的字符串 <code>s</code> ，表示一个 <strong>正</strong> 整数。</p><p>如果一个 <strong>正</strong> 整数 <code>x</code> 末尾部分是 <code>s</code> （换句话说，<code>s</code> 是 <code>x</code> 的 <strong>后缀</strong>），且 <code>x</code> 中的每个数位至多是 <code>limit</code> ，那么我们称 <code>x</code> 是 <strong>强大的</strong> 。</p><p>请你返回区间 <code>[start..finish]</code> 内强大整数的 <strong>总数目</strong> 。</p><p>如果一个字符串 <code>x</code> 是 <code>y</code> 中某个下标开始（<strong>包括</strong> <code>0</code> ），到下标为 <code>y.length - 1</code> 结束的子字符串，那么我们称 <code>x</code> 是 <code>y</code> 的一个后缀。比方说，<code>25</code> 是 <code>5125</code> 的一个后缀，但不是 <code>512</code> 的后缀。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> finish <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token string">&quot;124&quot;</span>
输出：<span class="token number">5</span>
解释：区间 <span class="token punctuation">[</span><span class="token number">1.</span><span class="token number">.6000</span><span class="token punctuation">]</span> 内的强大数字为 <span class="token number">124</span> ，<span class="token number">1124</span> ，<span class="token number">2124</span> ，<span class="token number">3124</span> 和 <span class="token number">4124</span> 。这些整数的各个数位都 <span class="token operator">&lt;=</span> <span class="token number">4</span> 且 <span class="token string">&quot;124&quot;</span> 是它们的后缀。注意 <span class="token number">5124</span> 不是强大整数，因为第一个数位 <span class="token number">5</span> 大于 <span class="token number">4</span> 。
这个区间内总共只有这 <span class="token number">5</span> 个强大整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：start <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">,</span> finish <span class="token operator">=</span> <span class="token number">215</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token string">&quot;10&quot;</span>
输出：<span class="token number">2</span>
解释：区间 <span class="token punctuation">[</span><span class="token number">15.</span><span class="token number">.215</span><span class="token punctuation">]</span> 内的强大整数为 <span class="token number">110</span> 和 <span class="token number">210</span> 。这些整数的各个数位都 <span class="token operator">&lt;=</span> <span class="token number">6</span> 且 <span class="token string">&quot;10&quot;</span> 是它们的后缀。
这个区间总共只有这 <span class="token number">2</span> 个强大整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：start <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> finish <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token string">&quot;3000&quot;</span>
输出：<span class="token number">0</span>
解释：区间 <span class="token punctuation">[</span><span class="token number">1000.</span><span class="token number">.2000</span><span class="token punctuation">]</span> 内的整数都小于 <span class="token number">3000</span> ，所以 <span class="token string">&quot;3000&quot;</span> 不可能是这个区间内任何整数的后缀。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= start &lt;= finish &lt;= 10^15</code></li><li><code>1 &lt;= limit &lt;= 9</code></li><li><code>1 &lt;= s.length &lt;= floor(log10(finish)) + 1</code></li><li><code>s</code> 数位中每个数字都小于等于 <code>limit</code> 。</li><li><code>s</code> 不包含任何前导 0 。</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="考虑前导0-mask类-前后数位存在约束" tabindex="-1"><a class="header-anchor" href="#考虑前导0-mask类-前后数位存在约束" aria-hidden="true">#</a> 考虑前导0， mask类，前后数位存在约束</h3>`,16),H={id:"_357-统计各位数字都不同的数字个数",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#_357-统计各位数字都不同的数字个数","aria-hidden":"true"},"#",-1),O={href:"https://leetcode.cn/problems/count-numbers-with-unique-digits/",target:"_blank",rel:"noopener noreferrer"},R=a(`<p>给你一个整数 <code>n</code> ，统计并返回各位数字都不同的数字 <code>x</code> 的个数，其中 <code>0 &lt;= x &lt; 10n</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">91</span>
解释：答案应为除去 <span class="token number">11</span>、<span class="token number">22</span>、<span class="token number">33</span>、<span class="token number">44</span>、<span class="token number">55</span>、<span class="token number">66</span>、<span class="token number">77</span>、<span class="token number">88</span>、<span class="token number">99</span> 外，在 <span class="token number">0</span> ≤ x <span class="token operator">&lt;</span> <span class="token number">100</span> 范围内的所有数字。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">0</span>
输出：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 8</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,10),T={id:"_2376-统计特殊整数",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#_2376-统计特殊整数","aria-hidden":"true"},"#",-1),Z={href:"https://leetcode.cn/problems/count-special-integers/",target:"_blank",rel:"noopener noreferrer"},$=a(`<p>如果一个正整数每一个数位都是 <strong>互不相同</strong> 的，我们称它是 <strong>特殊整数</strong> 。</p><p>给你一个 <strong>正</strong> 整数 <code>n</code> ，请你返回区间 <code>[1, n]</code> 之间特殊整数的数目。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">20</span>
输出：<span class="token number">19</span>
解释：<span class="token number">1</span> 到 <span class="token number">20</span> 之间所有整数除了 <span class="token number">11</span> 以外都是特殊整数。所以总共有 <span class="token number">19</span> 个特殊整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">5</span>
解释：<span class="token number">1</span> 到 <span class="token number">5</span> 所有整数都是特殊整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">135</span>
输出：<span class="token number">110</span>
解释：从 <span class="token number">1</span> 到 <span class="token number">135</span> 总共有 <span class="token number">110</span> 个整数是特殊整数。
不特殊的部分数字为：<span class="token number">22</span> ，<span class="token number">114</span> 和 <span class="token number">131</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2 * 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),F={id:"_1012-至少有-1-位重复的数字",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_1012-至少有-1-位重复的数字","aria-hidden":"true"},"#",-1),J={href:"https://leetcode.cn/problems/numbers-with-repeated-digits/",target:"_blank",rel:"noopener noreferrer"},M=a(`<p>给定正整数 <code>n</code>，返回在 <code>[1, n]</code> 范围内具有 <strong>至少 1 位</strong> 重复数字的正整数的个数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">20</span>
输出：<span class="token number">1</span>
解释：具有至少 <span class="token number">1</span> 位重复数字的正数（<span class="token operator">&lt;=</span> <span class="token number">20</span>）只有 <span class="token number">11</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">100</span>
输出：<span class="token number">10</span>
解释：具有至少 <span class="token number">1</span> 位重复数字的正数（<span class="token operator">&lt;=</span> <span class="token number">100</span>）有 <span class="token number">11</span>，<span class="token number">22</span>，<span class="token number">33</span>，<span class="token number">44</span>，<span class="token number">55</span>，<span class="token number">66</span>，<span class="token number">77</span>，<span class="token number">88</span>，<span class="token number">99</span> 和 <span class="token number">100</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1000</span>
输出：<span class="token number">262</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="考虑前导0-cnt类-依据题意模拟" tabindex="-1"><a class="header-anchor" href="#考虑前导0-cnt类-依据题意模拟" aria-hidden="true">#</a> 考虑前导0， cnt类，依据题意模拟</h3>`,13),Q={id:"_902-最大为-n-的数字组合",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#_902-最大为-n-的数字组合","aria-hidden":"true"},"#",-1),W={href:"https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/",target:"_blank",rel:"noopener noreferrer"},nn=a(`<p>给定一个按 <strong>非递减顺序</strong> 排列的数字数组 <code>digits</code> 。你可以用任意次数 <code>digits[i]</code> 来写的数字。例如，如果 <code>digits = [&#39;1&#39;,&#39;3&#39;,&#39;5&#39;]</code>，我们可以写数字，如 <code>&#39;13&#39;</code>, <code>&#39;551&#39;</code>, 和 <code>&#39;1351315&#39;</code>。</p><p>返回 <em>可以生成的小于或等于给定整数 <code>n</code> 的正整数的个数</em> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">100</span>
输出：<span class="token number">20</span>
解释：
可写出的 <span class="token number">20</span> 个数字是：
<span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">77.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;9&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1000000000</span>
输出：<span class="token number">29523</span>
解释：
我们可以写 <span class="token number">3</span> 个一位数字，<span class="token number">9</span> 个两位数字，<span class="token number">27</span> 个三位数字，
<span class="token number">81</span> 个四位数字，<span class="token number">243</span> 个五位数字，<span class="token number">729</span> 个六位数字，
<span class="token number">2187</span> 个七位数字，<span class="token number">6561</span> 个八位数字和 <span class="token number">19683</span> 个九位数字。
总共，可以使用<span class="token constant">D</span>中的数字写出 <span class="token number">29523</span> 个整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">8</span>
输出：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= digits.length &lt;= 9</code></li><li><code>digits[i].length == 1</code></li><li><code>digits[i]</code> 是从 <code>&#39;1&#39;</code> 到 <code>&#39;9&#39;</code> 的数</li><li><code>digits</code> 中的所有值都 <strong>不同</strong></li><li><code>digits</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>1 &lt;= n &lt;= 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),sn={id:"_2801-统计范围内的步进数字数目",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#_2801-统计范围内的步进数字数目","aria-hidden":"true"},"#",-1),en={href:"https://leetcode.cn/problems/count-stepping-numbers-in-range/",target:"_blank",rel:"noopener noreferrer"},pn=a(`<p>给你两个正整数 <code>low</code> 和 <code>high</code> ，都用字符串表示，请你统计闭区间 <code>[low, high]</code> 内的 <strong>步进数字</strong> 数目。</p><p>如果一个整数相邻数位之间差的绝对值都 <strong>恰好</strong> 是 <code>1</code> ，那么这个数字被称为 <strong>步进数字</strong> 。</p><p>请你返回一个整数，表示闭区间 <code>[low, high]</code> 之间步进数字的数目。</p><p>由于答案可能很大，请你将它对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>注意</strong>：步进数字不能有前导 0 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：low <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span>
输出：<span class="token number">10</span>
解释：区间 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span> 内的步进数字为 <span class="token number">1</span> ，<span class="token number">2</span> ，<span class="token number">3</span> ，<span class="token number">4</span> ，<span class="token number">5</span> ，<span class="token number">6</span> ，<span class="token number">7</span> ，<span class="token number">8</span> ，<span class="token number">9</span> 和 <span class="token number">10</span> 。总共有 <span class="token number">10</span> 个步进数字。所以输出为 <span class="token number">10</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：low <span class="token operator">=</span> <span class="token string">&quot;90&quot;</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token string">&quot;101&quot;</span>
输出：<span class="token number">2</span>
解释：区间 <span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">]</span> 内的步进数字为 <span class="token number">98</span> 和 <span class="token number">101</span> 。总共有 <span class="token number">2</span> 个步进数字。所以输出为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= int(low) &lt;= int(high) &lt; 10^100</code></li><li><code>1 &lt;= low.length, high.length &lt;= 100</code></li><li><code>low</code> 和 <code>high</code> 只包含数字。</li><li><code>low</code> 和 <code>high</code> 都不含前导 0 。</li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),on={id:"_2827-范围中美丽整数的数目",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#_2827-范围中美丽整数的数目","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode.cn/problems/number-of-beautiful-integers-in-the-range/",target:"_blank",rel:"noopener noreferrer"},ln=a(`<p>给你正整数 <code>low</code> ，<code>high</code> 和 <code>k</code> 。</p><p>如果一个数满足以下两个条件，那么它是 <strong>美丽的</strong> ：</p><ul><li>偶数数位的数目与奇数数位的数目相同。</li><li>这个整数可以被 <code>k</code> 整除。</li></ul><p>请你返回范围 <code>[low, high]</code> 中美丽整数的数目。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：low <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">2</span>
解释：给定范围中有 <span class="token number">2</span> 个美丽数字：<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">12</span> 是美丽整数，因为它有 <span class="token number">1</span> 个奇数数位和 <span class="token number">1</span> 个偶数数位，而且可以被 k <span class="token operator">=</span> <span class="token number">3</span> 整除。
<span class="token operator">-</span> <span class="token number">18</span> 是美丽整数，因为它有 <span class="token number">1</span> 个奇数数位和 <span class="token number">1</span> 个偶数数位，而且可以被 k <span class="token operator">=</span> <span class="token number">3</span> 整除。
以下是一些不是美丽整数的例子：
<span class="token operator">-</span> <span class="token number">16</span> 不是美丽整数，因为它不能被 k <span class="token operator">=</span> <span class="token number">3</span> 整除。
<span class="token operator">-</span> <span class="token number">15</span> 不是美丽整数，因为它的奇数数位和偶数数位的数目不相等。
给定范围内总共有 <span class="token number">2</span> 个美丽整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">1</span>
解释：给定范围中有 <span class="token number">1</span> 个美丽数字：<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token operator">-</span> <span class="token number">10</span> 是美丽整数，因为它有 <span class="token number">1</span> 个奇数数位和 <span class="token number">1</span> 个偶数数位，而且可以被 k <span class="token operator">=</span> <span class="token number">1</span> 整除。
给定范围内总共有 <span class="token number">1</span> 个美丽整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：low <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">0</span>
解释：给定范围中有 <span class="token number">0</span> 个美丽数字。
<span class="token operator">-</span> <span class="token number">5</span> 不是美丽整数，因为它的奇数数位和偶数数位的数目不相等。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>0 &lt; low &lt;= high &lt;= 10^9</code></li><li><code>0 &lt; k &lt;= 20</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="其他题目" tabindex="-1"><a class="header-anchor" href="#其他题目" aria-hidden="true">#</a> 其他题目</h3>`,16),rn={id:"_1742-盒子中小球的最大数量-1",tabindex:"-1"},un=n("a",{class:"header-anchor",href:"#_1742-盒子中小球的最大数量-1","aria-hidden":"true"},"#",-1),dn={href:"https://leetcode.cn/problems/maximum-number-of-balls-in-a-box/",target:"_blank",rel:"noopener noreferrer"},kn=a(`<p>你在一家生产小球的玩具厂工作，有 <code>n</code> 个小球，编号从 <code>lowLimit</code> 开始，到 <code>highLimit</code> 结束（包括 <code>lowLimit</code> 和 <code>highLimit</code> ，即 <code>n == highLimit - lowLimit + 1</code>）。另有无限数量的盒子，编号从 <code>1</code> 到 <code>infinity</code> 。</p><p>你的工作是将每个小球放入盒子中，其中盒子的编号应当等于小球编号上每位数字的和。例如，编号 <code>321</code> 的小球应当放入编号 <code>3 + 2 + 1 = 6</code> 的盒子，而编号 <code>10</code> 的小球应当放入编号 <code>1 + 0 = 1</code> 的盒子。</p><p>给你两个整数 <code>lowLimit</code> 和 <code>highLimit</code> ，返回放有最多小球的盒子中的小球数量*。*如果有多个盒子都满足放有最多小球，只需返回其中任一盒子的小球数量。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：lowLimit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> highLimit <span class="token operator">=</span> <span class="token number">10</span>
输出：<span class="token number">2</span>
解释：
盒子编号：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">...</span>
小球数量：<span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>  <span class="token number">0</span>  <span class="token operator">...</span>
编号 <span class="token number">1</span> 的盒子放有最多小球，小球数量为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：lowLimit <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> highLimit <span class="token operator">=</span> <span class="token number">15</span>
输出：<span class="token number">2</span>
解释：
盒子编号：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token operator">...</span>
小球数量：<span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>  <span class="token number">0</span>  <span class="token operator">...</span>
编号 <span class="token number">5</span> 和 <span class="token number">6</span> 的盒子放有最多小球，每个盒子中的小球数量都是 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：lowLimit <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">,</span> highLimit <span class="token operator">=</span> <span class="token number">28</span>
输出：<span class="token number">2</span>
解释：
盒子编号：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token operator">...</span>
小球数量：<span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span>  <span class="token number">0</span>  <span class="token number">0</span>  <span class="token operator">...</span>
编号 <span class="token number">10</span> 的盒子放有最多小球，小球数量为 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= lowLimit &lt;= highLimit &lt;= 10^5</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),mn={id:"_1397-找到所有好字符串",tabindex:"-1"},bn=n("a",{class:"header-anchor",href:"#_1397-找到所有好字符串","aria-hidden":"true"},"#",-1),vn={href:"https://leetcode.cn/problems/find-all-good-strings/",target:"_blank",rel:"noopener noreferrer"},gn=a(`<p>给你两个长度为 <code>n</code> 的字符串 <code>s1</code> 和 <code>s2</code> ，以及一个字符串 <code>evil</code> 。请你返回 <strong>好字符串</strong> 的数目。</p><p><strong>好字符串</strong> 的定义为：它的长度为 <code>n</code> ，字典序大于等于 <code>s1</code> ，字典序小于等于 <code>s2</code> ，且不包含 <code>evil</code> 为子字符串。</p><p>由于答案可能很大，请你返回答案对 10^9 + 7 取余的结果。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> s1 <span class="token operator">=</span> <span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">&quot;da&quot;</span><span class="token punctuation">,</span> evil <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>
输出：<span class="token number">51</span> 
解释：总共有 <span class="token number">25</span> 个以 <span class="token string">&#39;a&#39;</span> 开头的好字符串：<span class="token string">&quot;aa&quot;</span>，<span class="token string">&quot;ac&quot;</span>，<span class="token string">&quot;ad&quot;</span>，<span class="token operator">...</span>，<span class="token string">&quot;az&quot;</span>。还有 <span class="token number">25</span> 个以 <span class="token string">&#39;c&#39;</span> 开头的好字符串：<span class="token string">&quot;ca&quot;</span>，<span class="token string">&quot;cc&quot;</span>，<span class="token string">&quot;cd&quot;</span>，<span class="token operator">...</span>，<span class="token string">&quot;cz&quot;</span>。最后，还有一个以 <span class="token string">&#39;d&#39;</span> 开头的好字符串：<span class="token string">&quot;da&quot;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> s1 <span class="token operator">=</span> <span class="token string">&quot;leetcode&quot;</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">&quot;leetgoes&quot;</span><span class="token punctuation">,</span> evil <span class="token operator">=</span> <span class="token string">&quot;leet&quot;</span>
输出：<span class="token number">0</span> 
解释：所有字典序大于等于 s1 且小于等于 s2 的字符串都以 evil 字符串 <span class="token string">&quot;leet&quot;</span> 开头。所以没有好字符串。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> s1 <span class="token operator">=</span> <span class="token string">&quot;gx&quot;</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token string">&quot;gz&quot;</span><span class="token punctuation">,</span> evil <span class="token operator">=</span> <span class="token string">&quot;x&quot;</span>
输出：<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>s1.length == n</code></li><li><code>s2.length == n</code></li><li><code>s1 &lt;= s2</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= evil.length &lt;= 50</code></li><li>所有字符串都只包含小写英文字母。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),hn={id:"_2376-统计特殊整数-1",tabindex:"-1"},_n=n("a",{class:"header-anchor",href:"#_2376-统计特殊整数-1","aria-hidden":"true"},"#",-1),qn={href:"https://leetcode.cn/problems/count-special-integers/",target:"_blank",rel:"noopener noreferrer"},jn=a(`<p>如果一个正整数每一个数位都是 <strong>互不相同</strong> 的，我们称它是 <strong>特殊整数</strong> 。</p><p>给你一个 <strong>正</strong> 整数 <code>n</code> ，请你返回区间 <code>[1, n]</code> 之间特殊整数的数目。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">20</span>
输出：<span class="token number">19</span>
解释：<span class="token number">1</span> 到 <span class="token number">20</span> 之间所有整数除了 <span class="token number">11</span> 以外都是特殊整数。所以总共有 <span class="token number">19</span> 个特殊整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">5</span>
解释：<span class="token number">1</span> 到 <span class="token number">5</span> 所有整数都是特殊整数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">135</span>
输出：<span class="token number">110</span>
解释：从 <span class="token number">1</span> 到 <span class="token number">135</span> 总共有 <span class="token number">110</span> 个整数是特殊整数。
不特殊的部分数字为：<span class="token number">22</span> ，<span class="token number">114</span> 和 <span class="token number">131</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 2 * 10^9</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,13),xn={id:"_2930-重新排列后包含指定子字符串的字符串数目",tabindex:"-1"},fn=n("a",{class:"header-anchor",href:"#_2930-重新排列后包含指定子字符串的字符串数目","aria-hidden":"true"},"#",-1),yn={href:"https://leetcode.cn/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/",target:"_blank",rel:"noopener noreferrer"},wn=a(`<p>给你一个整数 <code>n</code> 。</p><p>如果一个字符串 <code>s</code> 只包含小写英文字母，<strong>且</strong> 将 <code>s</code> 的字符重新排列后，新字符串包含 <strong>子字符串</strong> <code>&quot;leet&quot;</code> ，那么我们称字符串 <code>s</code> 是一个 <strong>好</strong> 字符串。</p><p>比方说：</p><ul><li>字符串 <code>&quot;lteer&quot;</code> 是好字符串，因为重新排列后可以得到 <code>&quot;leetr&quot;</code> 。</li><li><code>&quot;letl&quot;</code> 不是好字符串，因为无法重新排列并得到子字符串 <code>&quot;leet&quot;</code> 。</li></ul><p>请你返回长度为 <code>n</code> 的好字符串 <strong>总</strong> 数目。</p><p>由于答案可能很大，将答案对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>子字符串</strong> 是一个字符串中一段连续的字符序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">12</span>
解释：总共有 <span class="token number">12</span> 个字符串重新排列后包含子字符串 <span class="token string">&quot;leet&quot;</span> ：<span class="token string">&quot;eelt&quot;</span> ，<span class="token string">&quot;eetl&quot;</span> ，<span class="token string">&quot;elet&quot;</span> ，<span class="token string">&quot;elte&quot;</span> ，<span class="token string">&quot;etel&quot;</span> ，<span class="token string">&quot;etle&quot;</span> ，<span class="token string">&quot;leet&quot;</span> ，<span class="token string">&quot;lete&quot;</span> ，<span class="token string">&quot;ltee&quot;</span> ，<span class="token string">&quot;teel&quot;</span> ，<span class="token string">&quot;tele&quot;</span> 和 <span class="token string">&quot;tlee&quot;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">10</span>
输出：<span class="token number">83943898</span>
解释：长度为 <span class="token number">10</span> 的字符串重新排列后包含子字符串 <span class="token string">&quot;leet&quot;</span> 的方案数为 <span class="token number">526083947580</span> 。所以答案为 <span class="token number">526083947580</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">109</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">83943898</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),Ln={id:"_3003-执行操作后的最大分割数量",tabindex:"-1"},zn=n("a",{class:"header-anchor",href:"#_3003-执行操作后的最大分割数量","aria-hidden":"true"},"#",-1),Nn={href:"https://leetcode.cn/problems/maximize-the-number-of-partitions-after-operations/",target:"_blank",rel:"noopener noreferrer"},Dn=a(`<p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>s</code> 和一个整数 <code>k</code>。</p><p>你需要执行以下分割操作，直到字符串 <code>s </code>变为 <strong>空</strong>：</p><ul><li>选择 <code>s</code> 的最长<strong>前缀</strong>，该前缀最多包含 <code>k </code>个 <strong>不同</strong> 字符。</li><li><strong>删除</strong> 这个前缀，并将分割数量加一。如果有剩余字符，它们在 <code>s</code> 中保持原来的顺序。</li></ul><p>执行操作之 <strong>前</strong> ，你可以将 <code>s</code> 中 <strong>至多一处</strong> 下标的对应字符更改为另一个小写英文字母。</p><p>在最优选择情形下改变至多一处下标对应字符后，用整数表示并返回操作结束时得到的最大分割数量。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;accca&quot;</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span>
解释：在此示例中，为了最大化得到的分割数量，可以将 s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> 改为 <span class="token string">&#39;b&#39;</span>。
s 变为 <span class="token string">&quot;acbca&quot;</span>。
按照以下方式执行操作，直到 s 变为空：
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">2</span> 个不同字符的前缀，<span class="token string">&quot;acbca&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为 <span class="token string">&quot;bca&quot;</span>。现在分割数量为 <span class="token number">1</span>。
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">2</span> 个不同字符的前缀，<span class="token string">&quot;bca&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为 <span class="token string">&quot;a&quot;</span>。现在分割数量为 <span class="token number">2</span>。
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">2</span> 个不同字符的前缀，<span class="token string">&quot;a&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为空。现在分割数量为 <span class="token number">3</span>。
因此，答案是 <span class="token number">3</span>。
可以证明，分割数量不可能超过 <span class="token number">3</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;aabaab&quot;</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">1</span>
解释：在此示例中，为了最大化得到的分割数量，可以保持 s 不变。
按照以下方式执行操作，直到 s 变为空： 
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">3</span> 个不同字符的前缀，<span class="token string">&quot;aabaab&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为空。现在分割数量为 <span class="token number">1</span>。
因此，答案是 <span class="token number">1</span>。
可以证明，分割数量不可能超过 <span class="token number">1</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;xxyz&quot;</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">4</span>
解释：在此示例中，为了最大化得到的分割数量，可以将 s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> 改为 <span class="token string">&#39;a&#39;</span>。
s 变为 <span class="token string">&quot;xayz&quot;</span>。
按照以下方式执行操作，直到 s 变为空：
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">1</span> 个不同字符的前缀，<span class="token string">&quot;xayz&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为 <span class="token string">&quot;ayz&quot;</span>。现在分割数量为 <span class="token number">1</span>。
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">1</span> 个不同字符的前缀，<span class="token string">&quot;ayz&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为 <span class="token string">&quot;yz&quot;</span>，现在分割数量为 <span class="token number">2</span>。
<span class="token operator">-</span> 选择最长且至多包含 <span class="token number">1</span> 个不同字符的前缀，<span class="token string">&quot;yz&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为 <span class="token string">&quot;z&quot;</span>。现在分割数量为 <span class="token number">3</span>。
<span class="token operator">-</span> 选择最且至多包含 <span class="token number">1</span> 个不同字符的前缀，<span class="token string">&quot;z&quot;</span>。
<span class="token operator">-</span> 删除该前缀，s 变为空。现在分割数量为 <span class="token number">4</span>。
因此，答案是 <span class="token number">4</span>。
可以证明，分割数量不可能超过 <span class="token number">4</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 只包含小写英文字母。</li><li><code>1 &lt;= k &lt;= 26</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,16),Pn={id:"_3007-价值和小于等于-k-的最大数字",tabindex:"-1"},In=n("a",{class:"header-anchor",href:"#_3007-价值和小于等于-k-的最大数字","aria-hidden":"true"},"#",-1),Vn={href:"https://leetcode.cn/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k/",target:"_blank",rel:"noopener noreferrer"},Xn=a(`<p>给你一个整数 <code>k</code> 和一个整数 <code>x</code> 。</p><p>令 <code>s</code> 为整数 <code>num</code> 的下标从 <strong>1</strong> 开始的二进制表示。我们说一个整数 <code>num</code> 的 <strong>价值</strong> 是满足 <code>i % x == 0</code> 且 <code>s[i]</code> 是 <strong>设置位</strong> 的 <code>i</code> 的数目。</p><p>请你返回 <strong>最大</strong> 整数 <code>num</code> ，满足从 <code>1</code> 到 <code>num</code> 的所有整数的 <strong>价值</strong> 和小于等于 <code>k</code> 。</p><p><strong>注意：</strong></p><ul><li>一个整数二进制表示下 <strong>设置位</strong> 是值为 <code>1</code> 的数位。</li><li>一个整数的二进制表示下标从右到左编号，比方说如果 <code>s == 11100</code> ，那么 <code>s[4] == 1</code> 且 <code>s[2] == 0</code> 。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：k <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">6</span>
解释：数字 <span class="token number">1</span> ，<span class="token number">2</span> ，<span class="token number">3</span> ，<span class="token number">4</span> ，<span class="token number">5</span> 和 <span class="token number">6</span> 二进制表示分别为 <span class="token string">&quot;1&quot;</span> ，<span class="token string">&quot;10&quot;</span> ，<span class="token string">&quot;11&quot;</span> ，<span class="token string">&quot;100&quot;</span> ，<span class="token string">&quot;101&quot;</span> 和 <span class="token string">&quot;110&quot;</span> 。
由于 x 等于 <span class="token number">1</span> ，每个数字的价值分别为所有设置位的数目。
这些数字的所有设置位数目总数是 <span class="token number">9</span> ，所以前 <span class="token number">6</span> 个数字的价值和为 <span class="token number">9</span> 。
所以答案为 <span class="token number">6</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：k <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">9</span>
解释：由于 x 等于 <span class="token number">2</span> ，我们检查每个数字的偶数位。
<span class="token number">2</span> 和 <span class="token number">3</span> 在二进制表示下的第二个数位为设置位，所以它们的价值和为 <span class="token number">2</span> 。
<span class="token number">6</span> 和 <span class="token number">7</span> 在二进制表示下的第二个数位为设置位，所以它们的价值和为 <span class="token number">2</span> 。
<span class="token number">8</span> 和 <span class="token number">9</span> 在二进制表示下的第四个数位为设置位但第二个数位不是设置位，所以它们的价值和为 <span class="token number">2</span> 。
数字 <span class="token number">1</span> ，<span class="token number">4</span> 和 <span class="token number">5</span> 在二进制下偶数位都不是设置位，所以它们的价值和为 <span class="token number">0</span> 。
<span class="token number">10</span> 在二进制表示下的第二个数位和第四个数位都是设置位，所以它的价值为 <span class="token number">2</span> 。
前 <span class="token number">9</span> 个数字的价值和为 <span class="token number">6</span> 。
前 <span class="token number">10</span> 个数字的价值和为 <span class="token number">8</span>，超过了 k <span class="token operator">=</span> <span class="token number">7</span> ，所以答案为 <span class="token number">9</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= 10^15</code></li><li><code>1 &lt;= x &lt;= 8</code></li></ul><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14);function Bn(En,Sn){const e=t("ExternalLinkIcon");return c(),l("div",null,[i,n("h4",u,[d,s(),n("a",k,[s("788. 旋转数字"),p(e)])]),m,n("h4",b,[v,s(),n("a",g,[s("600. 不含连续1的非负整数"),p(e)])]),h,n("h4",_,[q,s(),n("a",j,[s("面试题 17.06. 2出现的次数"),p(e)])]),x,n("h4",f,[y,s(),n("a",w,[s("233. 数字 1 的个数"),p(e)])]),L,n("h4",z,[N,s(),n("a",D,[s("2719. 统计整数数目"),p(e)])]),P,n("h4",I,[V,s(),n("a",X,[s("1742. 盒子中小球的最大数量"),p(e)])]),B,n("h4",E,[S,s(),n("a",A,[s("2999. 统计强大整数的数目"),p(e)])]),C,n("h4",H,[K,s(),n("a",O,[s("357. 统计各位数字都不同的数字个数"),p(e)])]),R,n("h4",T,[Y,s(),n("a",Z,[s("2376. 统计特殊整数"),p(e)])]),$,n("h4",F,[G,s(),n("a",J,[s("1012. 至少有 1 位重复的数字"),p(e)])]),M,n("h4",Q,[U,s(),n("a",W,[s("902. 最大为 N 的数字组合"),p(e)])]),nn,n("h4",sn,[an,s(),n("a",en,[s("2801. 统计范围内的步进数字数目"),p(e)])]),pn,n("h4",on,[tn,s(),n("a",cn,[s("2827. 范围中美丽整数的数目"),p(e)])]),ln,n("h4",rn,[un,s(),n("a",dn,[s("1742. 盒子中小球的最大数量"),p(e)])]),kn,n("h4",mn,[bn,s(),n("a",vn,[s("1397. 找到所有好字符串"),p(e)])]),gn,n("h4",hn,[_n,s(),n("a",qn,[s("2376. 统计特殊整数"),p(e)])]),jn,n("h4",xn,[fn,s(),n("a",yn,[s("2930. 重新排列后包含指定子字符串的字符串数目"),p(e)])]),wn,n("h4",Ln,[zn,s(),n("a",Nn,[s("3003. 执行操作后的最大分割数量"),p(e)])]),Dn,n("h4",Pn,[In,s(),n("a",Vn,[s("3007. 价值和小于等于 K 的最大数字"),p(e)])]),Xn])}const Cn=o(r,[["render",Bn],["__file","bitDP.html.vue"]]);export{Cn as default};
