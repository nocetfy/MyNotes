import{_ as e,H as o,X as c,Y as l,Z as n,a0 as s,a1 as p,$ as t}from"./framework-47f15ee6.js";const i={},u=n("h1",{id:"位运算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#位运算","aria-hidden":"true"},"#"),s(" 位运算")],-1),r=n("p",null,"[TOC]",-1),k=n("h2",{id:"位运算简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#位运算简介","aria-hidden":"true"},"#"),s(" 位运算简介：")],-1),d={href:"https://baike.baidu.com/item/%E5%82%A8%E5%AD%98/2446499",target:"_blank",rel:"noopener noreferrer"},m={href:"https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C/33052",target:"_blank",rel:"noopener noreferrer"},v={href:"https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="位运算的特点" tabindex="-1"><a class="header-anchor" href="#位运算的特点" aria-hidden="true">#</a> 位运算的特点：</h2><ul><li>在处理<strong>整形数值</strong>时，可以直接对组成整形数值的各个位进行操作。这意味着可以使用屏蔽技术获得整个数中的各个位。</li><li>&amp;（与）、|（或）、^(异或)、~（非 / 取反）</li><li>&gt;&gt; 和 &lt;&lt; 运算符将二进制位进行右移或者左移操作。</li><li>&gt;&gt;&gt; 运算符将用 0 填充高位；&gt;&gt; 运算符用符号位填充高位，没有 &lt;&lt;&lt; 运算符。</li><li>对于 int 型，1&lt;&lt; 35 与 1&lt;&lt;3 是相同的，而左边的操作数是 long 型是需要对右侧的操作数作数模 64。</li><li>与：相同为 1，或：有一个为 1 结果为 1，异或：相同为 0，不同为 1.</li><li>按位或的性质：每一位要么不变，要么从<code>0</code>变<code>1</code></li></ul><h2 id="位运算的规则" tabindex="-1"><a class="header-anchor" href="#位运算的规则" aria-hidden="true">#</a> 位运算的规则：</h2><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/UMcFqRNEADnv5Vt.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="异或的性质" tabindex="-1"><a class="header-anchor" href="#异或的性质" aria-hidden="true">#</a> 异或的性质</h4><p>异或，可以理解为不进位的加法：1+1=0； 0+0=0；1+0=1</p><ul><li>交换律：可任意交换运算因子的位置，结果不变。</li><li>结合律：即（a<sup>b）</sup>c == a<sup>(b</sup>c)</li><li>对于任何数 x，都有 <code>x ^ x =0</code>, <code>x ^ 0 = x</code>， 同自己求异或为 0，同 0 求异或为自己。</li><li>自反性：A<sup>B</sup>B = A^0=A, 连续和同一个因子做异或运算，最终结果为自己。</li><li>当前位异或<code>1</code>，相当于对当前位取反<code>~</code>。</li><li><code>x &amp; (x - 1)</code>会去除<code>x</code>最右位的<code>1</code>，可以用来统计<code>1</code>的个数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>异或运算：x <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> x， x <span class="token operator">^</span> <span class="token number">0xffffffff</span> <span class="token operator">=</span> <span class="token operator">~</span>x
与运算： x <span class="token operator">&amp;</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span>， x <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">=</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="lowbit" tabindex="-1"><a class="header-anchor" href="#lowbit" aria-hidden="true">#</a> lowbit</h4><p><code>lowbit(n)</code> 运算是一个位运算的常用技巧，它的作用是求出 <code>n</code> 在表示成二进制的时候，最右边的 <code>1</code> 出现的位置对应的数。</p><blockquote><p>公式：<code>lowbit(n) = n &amp; -n</code></p></blockquote><p>如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span><span class="token number">1010</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断是否是<code>2</code>的幂次</p><blockquote><p><code>n &amp; (n - 1) == 0</code>则代表<code>n</code>是<code>2</code>的幂</p></blockquote><p>寻找最右的<code>0</code></p><blockquote><p>先把数取反，再使用<code>lowbit</code>找<code>1</code>即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mask <span class="token operator">=</span> <span class="token operator">~</span>mask
mask <span class="token operator">&amp;</span> <span class="token operator">-</span>mask
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h4 id="移位" tabindex="-1"><a class="header-anchor" href="#移位" aria-hidden="true">#</a> 移位</h4><p><code>&lt;&lt;</code>：左移，将<code>移位的数字</code>的二进制位全部左移指定的<code>移位量</code>移位量由右操作数指定，右操作数必须是非负值，其右边空出的位用<code>0</code>填补，高位左移溢出则舍弃该高位。可能发生溢出，正数移位变负数，负数移位变正数，但是与相应的乘法运算结果相同。<strong>左移<code>1</code>位相当于对数字乘以<code>2</code></strong>。</p><p><code>&gt;&gt;</code>：逻辑右移，逻辑右移运算是将<code>移动的数字</code>的二进制位数按指定<code>移位量</code>向右移动，右边低位溢出 y 位则舍弃。<strong>左边的空位一律补符号位</strong>。<strong>右移<code>1</code>位相当于对数字除以<code>2</code></strong>。</p><blockquote><p>​ 因为右移相当于除以<code>2</code>，所以对<code>2</code>取模相当于拿到右移移走的这些位，即低位的<code>n</code>位。与<code>2</code>的幂减<code>1</code>做按位与运算，即可以得到这些位。所以<code>HashMap</code>容量要设计为<code>2</code>的次幂。当<code>n</code>为<code>2</code>时，有<code>x % n == x &amp; n - 1</code>。</p></blockquote><p><code>&gt;&gt;&gt;</code>：算术右移，逻辑右移运算是将<code>移动的数字</code>的二进制位数按指定<code>移位量</code>向右移动，右边低位溢出 y 位则舍弃。<strong>左边的空位一律补0</strong>，会把负数变成正数。</p><blockquote><p>限制：</p><p>​ 如果超过了移位的最大次数，会对最大次数取模作为移位的次数。以<code>int</code>为例(<code>4</code>字节，<code>32</code>位)，如果直接左移<code>36</code>位，结果并不是<code>0</code>，而是等同于左移<code>36%32=4</code>位。</p></blockquote><h4 id="判断某一位是否是1" tabindex="-1"><a class="header-anchor" href="#判断某一位是否是1" aria-hidden="true">#</a> 判断某一位是否是1</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mask <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span>     
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="将某一位置为1" tabindex="-1"><a class="header-anchor" href="#将某一位置为1" aria-hidden="true">#</a> 将某一位置为1</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mask <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="将某一位置为0" tabindex="-1"><a class="header-anchor" href="#将某一位置为0" aria-hidden="true">#</a> 将某一位置为0</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>mask <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="常用小技巧" tabindex="-1"><a class="header-anchor" href="#常用小技巧" aria-hidden="true">#</a> 常用小技巧</h4><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/1686879866-VArRlW-Binar_Fundamentals_00.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="位运算的简单应用" tabindex="-1"><a class="header-anchor" href="#位运算的简单应用" aria-hidden="true">#</a> 位运算的简单应用</h2><h3 id="判断奇偶数" tabindex="-1"><a class="header-anchor" href="#判断奇偶数" aria-hidden="true">#</a> 判断奇偶数：</h3><blockquote><p>思路：</p><p>​ 任何整数，如果是奇数，则转化为二进制数后，最后一位二进制位肯定为<code>1</code>，为偶数，则最后一位二进制位为 <code>0</code>。利用这个性质，将任意整数 x 与 1 作与运算，如果结果为 1，则 x 为奇数；结果为 0，则 x 为 0 数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Case1_JudjeOddEven</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>
	<span class="token function">judjeOddEven</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">judjeOddEven</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">judjeOddEven</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot;是偶数！&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot;是奇数！&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//-------------------------------------------------------</span>
<span class="token comment">// 运行结果：</span>
<span class="token number">40</span>是偶数！
<span class="token number">31</span>是奇数！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取二进制位是-1-还是-0-两种解决方法" tabindex="-1"><a class="header-anchor" href="#获取二进制位是-1-还是-0-两种解决方法" aria-hidden="true">#</a> 获取二进制位是 1 还是 0（两种解决方法）：</h3><ul><li>方案 1：做与运算。例如：判断 x 的第五位二进制是 1 还是 0，可以与 1&lt;&lt;4 做与运算，然后将结果&gt;&gt;4 位，判断最终结果是 1 还是 0。如果最终结果是 0，则 x 的第五位为 0，否则第五位的二进制位 1。</li><li>方案 2：做与运算。例如：判断 x 的第五位二进制是 1 还是 0，可以将 x&gt;&gt;4 位，与 1 做与运算，判断最终结果是 1 还是 0。如果最终结果是 0，则 x 的第五位为 0，否则第五位的二进制位 1。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Case2_Judje0_1</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">judje0_1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">judje0_1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">judje0_1_2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">judje0_1_2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token doc-comment comment">/**
	 * 判断整数x的第y位的二进制位是0还是1
	 * <span class="token keyword">@param</span> <span class="token parameter">x</span> 一个整数x
	 * <span class="token keyword">@param</span> <span class="token parameter">y</span> 判断x的二进制的第几位
	 */</span>
    <span class="token comment">//方案1代码</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">judje0_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot;的第&quot;</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">&quot;位的二进制位为：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
    <span class="token comment">//方案2代码</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">judje0_1_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">&quot;的第&quot;</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">&quot;位的二进制位为：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">10</span>的第<span class="token number">2</span>位的二进制位为：<span class="token number">1</span>
<span class="token number">10</span>的第<span class="token number">3</span>位的二进制位为：<span class="token number">0</span>
<span class="token number">10</span>的第<span class="token number">2</span>位的二进制位为：<span class="token number">1</span>
<span class="token number">10</span>的第<span class="token number">3</span>位的二进制位为：<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="交换两个整数变量的值" tabindex="-1"><a class="header-anchor" href="#交换两个整数变量的值" aria-hidden="true">#</a> 交换两个整数变量的值：</h3><blockquote><p>利用异或的性质实现。对于任何数 x，都有 x^x =0, x^0 = x， 同自己求异或为 0，同 0 求异或为自己。 自反性：A<sup>B</sup>B = A^0=A, 连续喝同一个因子做异或运算，最终结果为自己。如交换 A、B 的值，有：</p><ol><li>A = A ^ B</li><li>B = A ^ B （B = A ^ B ^ B = A）</li><li>A = A ^ B (A = A ^ A ^ B = B)</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Case3_SwapValue</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换前：a=&quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot; b=&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
	b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
	a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;交换后：a=&quot;</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">&quot; b=&quot;</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>交换前：a<span class="token operator">=</span><span class="token number">3</span> b<span class="token operator">=</span><span class="token number">6</span>
交换后：a<span class="token operator">=</span><span class="token number">6</span> b<span class="token operator">=</span><span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="不用判断语句-求整数的绝对值" tabindex="-1"><a class="header-anchor" href="#不用判断语句-求整数的绝对值" aria-hidden="true">#</a> 不用判断语句，求整数的绝对值：</h3><blockquote><p>利用位运算的移位，异或运算实现。</p><p>原理：将一个整型整数 x，带符号右移 31 位，则结果要么是 0，要么是 - 1。其中如果是 0，则 x 为正数，为 - 1 则 x 为负数。然后，将 x 与右移 31 位后的结果做异或运算，当与 x^0 是，结果还是 x。 当 x^-1 时，结果为 x 取反，即 x 的反码，然后 + 1，即为 x 的绝对值。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> a <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">~</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">abs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> <span class="token number">31</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">^</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h2><h3 id="基础题目" tabindex="-1"><a class="header-anchor" href="#基础题目" aria-hidden="true">#</a> 基础题目</h3>`,48),g={id:"_89-格雷编码",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_89-格雷编码","aria-hidden":"true"},"#",-1),y={href:"https://leetcode-cn.com/problems/gray-code/",target:"_blank",rel:"noopener noreferrer"},w=t(`<p><strong>n 位格雷码序列</strong> 是一个由 <code>2n</code> 个整数组成的序列，其中：</p><ul><li>每个整数都在范围 <code>[0, 2n - 1]</code> 内（含 <code>0</code> 和 <code>2n - 1</code>）</li><li>第一个整数是 <code>0</code></li><li>一个整数在序列中出现 <strong>不超过一次</strong></li><li>每对 <strong>相邻</strong> 整数的二进制表示 <strong>恰好一位不同</strong> ，且</li><li><strong>第一个</strong> 和 <strong>最后一个</strong> 整数的二进制表示 <strong>恰好一位不同</strong></li></ul><p>给你一个整数 <code>n</code> ，返回任一有效的 <strong>n 位格雷码序列</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
解释：
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 的二进制表示是 <span class="token punctuation">[</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> <span class="token number">00</span> 和 <span class="token number">01</span> 有一位不同
<span class="token operator">-</span> <span class="token number">01</span> 和 <span class="token number">11</span> 有一位不同
<span class="token operator">-</span> <span class="token number">11</span> 和 <span class="token number">10</span> 有一位不同
<span class="token operator">-</span> <span class="token number">10</span> 和 <span class="token number">00</span> 有一位不同
<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 也是一个有效的格雷码序列，其二进制表示是 <span class="token punctuation">[</span><span class="token number">00</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">01</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> <span class="token number">00</span> 和 <span class="token number">10</span> 有一位不同
<span class="token operator">-</span> <span class="token number">10</span> 和 <span class="token number">11</span> 有一位不同
<span class="token operator">-</span> <span class="token number">11</span> 和 <span class="token number">01</span> 有一位不同
<span class="token operator">-</span> <span class="token number">01</span> 和 <span class="token number">00</span> 有一位不同
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 关键是搞清楚格雷编码的生成过程, G(i) = i ^ (i/2);</p><p>​ 如 n = 3:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">000</span><span class="token punctuation">,</span> 
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">001</span> <span class="token operator">^</span> <span class="token number">000</span> <span class="token operator">=</span> <span class="token number">001</span>
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">010</span> <span class="token operator">^</span> <span class="token number">001</span> <span class="token operator">=</span> <span class="token number">011</span> 
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">^</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">011</span> <span class="token operator">^</span> <span class="token number">001</span> <span class="token operator">=</span> <span class="token number">010</span>
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">^</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">^</span> <span class="token number">010</span> <span class="token operator">=</span> <span class="token number">110</span>
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">^</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">101</span> <span class="token operator">^</span> <span class="token number">010</span> <span class="token operator">=</span> <span class="token number">111</span>
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">^</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">110</span> <span class="token operator">^</span> <span class="token number">011</span> <span class="token operator">=</span> <span class="token number">101</span>
        <span class="token constant">G</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token operator">^</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">111</span> <span class="token operator">^</span> <span class="token number">011</span> <span class="token operator">=</span> <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">grayCode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i <span class="token operator">^</span> i<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),f={id:"_67-二进制求和",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#_67-二进制求和","aria-hidden":"true"},"#",-1),j={href:"https://leetcode-cn.com/problems/add-binary/",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>给你两个二进制字符串，返回它们的和（用二进制表示）。</p><p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和 <code>0</code>。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> a <span class="token operator">=</span> <span class="token string">&quot;11&quot;</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token string">&quot;100&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> a <span class="token operator">=</span> <span class="token string">&quot;1010&quot;</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">&quot;1011&quot;</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token string">&quot;10101&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 我们可以设计这样的算法来计算：</p><ul><li>把 <em>a</em> 和 <em>b</em> 转换成整型数字 <em>x</em> 和<em>y</em>，在接下来的过程中，<em>x</em> 保存结果，<em>y</em> 保存进位。</li><li>当进位不为 00时 <ul><li>计算当前 <em>x</em> 和 <em>y</em> 的无进位相加结果：<code>answer = x ^ y</code></li><li>计算当前 <em>x</em> 和 <em>y</em> 的进位：<code>carry = (x &amp; y) &lt;&lt; 1</code></li><li>完成本次循环，更新 <code>x = answer</code>，<code>y = carry</code></li></ul></li><li>返回 <em>x</em> 的二进制形式</li></ul><p>为什么这个方法是可行的呢？在第一轮计算中，<code>answer</code> 的最后一位是 <em>x</em> 和 <em>y</em> 相加之后的结果，<code>carry</code>的倒数第二位是 <em>x</em> 和 <em>y</em> 最后一位相加的进位。接着每一轮中，由于 <code>carry</code> 是由 <em>x</em> 和 <em>y</em> 按位与并且左移得到的，那么最后会补零，所以在下面计算的过程中后面的数位不受影响，而每一轮都可以得到一个低 i* 位的答案和它向低 <code>i+1</code> 位的进位，也就模拟了加法的过程。</p></blockquote><hr>`,8),q={id:"_338-比特位计数",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#_338-比特位计数","aria-hidden":"true"},"#",-1),I={href:"https://leetcode-cn.com/problems/counting-bits/",target:"_blank",rel:"noopener noreferrer"},A=t(`<p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code> 中的每个 <code>i</code> ，计算其二进制表示中 <strong><code>1</code> 的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组 <code>ans</code> 作为答案。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
解释：
<span class="token number">0</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
解释：
<span class="token number">0</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">0</span>
<span class="token number">1</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">1</span>
<span class="token number">2</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">10</span>
<span class="token number">3</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">11</span>
<span class="token number">4</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">100</span>
<span class="token number">5</span> <span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token number">101</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 偶数的位数等于其一半的数的位数，奇数的则等于其一半数的位数加一。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> dp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,8),L={id:"_342-4-的幂",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#_342-4-的幂","aria-hidden":"true"},"#",-1),B={href:"https://leetcode-cn.com/problems/power-of-four/",target:"_blank",rel:"noopener noreferrer"},z=t(`<p>给定一个整数，写一个函数来判断它是否是 <code>4</code> 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>整数 <code>n</code> 是 <code>4</code> 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 4x</code></p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">16</span>
输出：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 如果是<code>4</code>的幂，则转为二进制为奇数位，且第一位为<code>1</code>，其余为<code>0</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 先判断是否是<code>2</code>的幂，可以用<code>lowbit</code> ，也可以用快速去最右<code>1</code>。然后判断奇数位是否有<code>1</code>，可以使用<code>0x5</code>即<code>0b0101</code>来判断。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfFour</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       	<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    	<span class="token punctuation">}</span>
    	<span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">0x55555555</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),M={id:"_405-数字转换为十六进制数",tabindex:"-1"},E=n("a",{class:"header-anchor",href:"#_405-数字转换为十六进制数","aria-hidden":"true"},"#",-1),R={href:"https://leetcode-cn.com/problems/convert-a-number-to-hexadecimal/",target:"_blank",rel:"noopener noreferrer"},X={href:"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},C=t(`<p><strong>注意:</strong></p><ol><li>十六进制中所有字母 (a-f) 都必须是小写。</li><li>十六进制字符串中不能包含多余的前导零。如果要转化的数为 0，那么以单个字符&#39;0&#39; 来表示；对于其他情况，十六进制字符串中的第一个字符将不会是 0 字符。</li><li>给定的数确保在 32 位有符号整数范围内。</li><li>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</li></ol><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span>
<span class="token number">26</span>

<span class="token literal-property property">输出</span><span class="token operator">:</span>
<span class="token string">&quot;1a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span>
<span class="token operator">-</span><span class="token number">1</span>

<span class="token literal-property property">输出</span><span class="token operator">:</span>
<span class="token string">&quot;ffffffff&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 使用<code>0xf</code>获取数字的低<code>4</code>位，然后取出在对应数组中表示的十六进制数，然后拼接，然后将数字无符号右移<code>4</code>位，最后数字会变为<code>0</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toHex</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> hex <span class="token operator">=</span> <span class="token string">&quot;0123456789abcdef&quot;</span> <span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>
            num <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">4</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,9),D={id:"_190-颠倒二进制位",tabindex:"-1"},H=n("a",{class:"header-anchor",href:"#_190-颠倒二进制位","aria-hidden":"true"},"#",-1),N={href:"https://leetcode-cn.com/problems/reverse-bits/",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>颠倒给定的 32 位无符号整数的二进制位。</p><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">00000010100101000001111010011100</span>
<span class="token function">输出：964176192</span> <span class="token punctuation">(</span><span class="token number">00111001011110000010100101000000</span><span class="token punctuation">)</span>
解释：输入的二进制串 <span class="token number">00000010100101000001111010011100</span> 表示无符号整数 <span class="token number">43261596</span>，
     因此返回 <span class="token number">964176192</span>，其二进制表示形式为 <span class="token number">00111001011110000010100101000000</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">11111111111111111111111111111101</span>
<span class="token function">输出：3221225471</span> <span class="token punctuation">(</span><span class="token number">10111111111111111111111111111111</span><span class="token punctuation">)</span>
解释：输入的二进制串 <span class="token number">11111111111111111111111111111101</span> 表示无符号整数 <span class="token number">4294967293</span>，
     因此返回 <span class="token number">3221225471</span> 其二进制表示形式为 <span class="token number">10111111111111111111111111111111</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 每位遍历，如果这一位是<code>1</code>则将结果中对应位(<code>31 - i</code>这一位)置为<code>1</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">// you need treat n as an unsigned value</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),V={id:"_191-位-1-的个数",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_191-位-1-的个数","aria-hidden":"true"},"#",-1),Z={href:"https://leetcode-cn.com/problems/number-of-1-bits/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F",target:"_blank",rel:"noopener noreferrer"},P=t(`<p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 3 中，表示有符号整数 -3。</li></ul><p><strong>示例 1：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入：<span class="token number">00000000000000000000000000001011</span>
输出：<span class="token number">3</span>
解释：输入的二进制串 <span class="token number">00000000000000000000000000001011</span> 中，共有三位为 <span class="token char">&#39;1&#39;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：<span class="token number">00000000000000000000000010000000</span>
输出：<span class="token number">1</span>
解释：输入的二进制串 <span class="token number">00000000000000000000000010000000</span> 中，共有一位为 <span class="token string">&#39;1&#39;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：<span class="token number">11111111111111111111111111111101</span>
输出：<span class="token number">31</span>
解释：输入的二进制串 <span class="token number">11111111111111111111111111111101</span> 中，共有 <span class="token number">31</span> 位为 <span class="token string">&#39;1&#39;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 利用<code>x &amp; x - 1</code>会消除<code>x</code>最右边<code>1</code>的性质，进行记数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            n <span class="token operator">&amp;=</span>  n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),J={id:"_476-数字的补数",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#_476-数字的补数","aria-hidden":"true"},"#",-1),U={href:"https://leetcode-cn.com/problems/number-complement/",target:"_blank",rel:"noopener noreferrer"},W=t(`<p>对整数的二进制表示取反（<code>0</code> 变 <code>1</code> ，<code>1</code> 变 <code>0</code>）后，再转换为十进制表示，可以得到这个整数的补数。</p><ul><li>例如，整数 <code>5</code> 的二进制表示是 <code>&quot;101&quot;</code> ，取反后得到 <code>&quot;010&quot;</code> ，再转回十进制表示得到补数 <code>2</code> 。</li></ul><p>给你一个整数 <code>num</code> ，输出它的补数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">2</span>
解释：<span class="token number">5</span> 的二进制表示为 <span class="token number">101</span>（没有前导零位），其补数为 <span class="token number">010</span>。所以你需要输出 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：num <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">0</span>
解释：<span class="token number">1</span> 的二进制表示为 <span class="token number">1</span>（没有前导零位），其补数为 <span class="token number">0</span>。所以你需要输出 <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 每位取反，再转成数字。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span>
                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>以下做法在输入为0时都会出现问题，需要特殊处理。</strong></p><blockquote><p>思路：</p><p>​ 模拟，先找到最高位<code>1</code>的位置，然后对有效位取反。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                index <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       	<span class="token comment">// 默认每位都是0，只有原来是0的才需要取反，所以循环只到index，不到index + 1</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
              	<span class="token comment">// 当前位赋1 </span>
                res <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 参考<code>jdk8</code>中<code>HashMap</code>求最近的<code>2</code>的次幂的算法，得到最高为<code>1</code>的位后全为<code>1</code>的数，然后对两个数求异或，即原来<code>1</code>的位变<code>0</code>，原来<code>0</code>的位变<code>1</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">int</span> n <span class="token operator">=</span> num<span class="token punctuation">;</span>
       n <span class="token operator">=</span> n<span class="token operator">|=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
       n <span class="token operator">=</span> n<span class="token operator">|=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
       n <span class="token operator">=</span> n<span class="token operator">|=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
       n <span class="token operator">=</span> n<span class="token operator">|=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
       n <span class="token operator">=</span> n<span class="token operator">|=</span> n <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> n <span class="token operator">^</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ <code>jdk11</code>中<code>HashMap</code>的实现，二分查找找到前导<code>0</code>，然后构建最高位为<code>1</code>的位后全为<code>1</code>的数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> n <span class="token operator">^</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 如果 <code>num</code> 的二进制表示中最高位 <code>1</code> 的位置为 <code>s</code> 的话，那么实际上我们只需要对 <code>num</code> 的前 <code>s - 1</code> 位进行取反即是答案（第 <code>s</code> 位的取反结果始终为 <code>0</code>）。</p><p>​ 因此我们可以先使用 <code>lowbit</code> 操作来得到 <code>num</code> 二进制表示中最高位 <code>1</code> 的位置为 <code>1</code>，其余位为 <code>0</code>时所代表的数字 <code>x</code>。然后 <code>x - 1</code> 即是二进制表示中前 <code>s - 1</code>位均为 <code>1</code>，其余位为 <code>0</code> 的数字，将其与 <code>num</code> 的<strong>取反数</strong>执行「按位与」操作，即可达到「仅对 <code>num</code> 的前 <code>s − 1</code> 位进行取反」的效果。</p><p>​ 因为取反数前面位均为<code>1</code>，做按位与后全置为<code>0</code>，而最高<code>1</code>位后的数先取反，再与<code>1</code>按位与，结果不变。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">)</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">~</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num<span class="token punctuation">;</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token function">lowbit</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> x <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">~</span>num <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      
      	lowbit <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
          <span class="token keyword">return</span> i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,20),Y={id:"_231-2-的幂",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#_231-2-的幂","aria-hidden":"true"},"#",-1),Q={href:"https://leetcode-cn.com/problems/power-of-two/",target:"_blank",rel:"noopener noreferrer"},nn=t(`<p>给你一个整数 <code>n</code>，请你判断该整数是否是 2 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>如果存在一个整数 <code>x</code> 使得 <code>n == 2x</code> ，则认为 <code>n</code> 是 2 的幂次方。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token boolean">true</span>
解释：<span class="token number">2</span> <span class="token operator">^</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 5：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 2的幂转为二进制后，第一位为<code>1</code>，其他位为<code>0</code>。特殊情况：<code>Integer.MIN_VALUE</code>符号位为<code>1</code>，其他位为<code>0</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2147483648</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 找到<code>int</code>中2的最大次幂，即<code>1 &lt;&lt; 30</code>, 如果它对<code>n</code>取模是<code>0</code>则满足条件。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 如果是<code>2</code>的次幂，则最高位为<code>1</code>，其余为<code>0</code>，在补码下可以得到<code>n &amp; -n</code>的结果仍为<code>n</code>，如<code>8</code>为<code>00001000</code>，而<code>-8</code>为<code>11111000</code>，<code>&amp;</code>的结果仍为<code>8</code>。即<code>lowbit</code>。<code>2</code>的幂次方在二进制下，只有<code>1</code>位是<code>1</code>，其余全是<code>0</code>。例如:<code>8---00001000</code>。负数的在计算机中二进制表示为补码(原码-&gt;正常二进制表示，原码按位取反<code>(0-1,1-0)</code>，最后再<code>+1</code>。然后两者进行与操作，得到的肯定是原码中最后一个二进制的<code>1</code>。例如<code>&amp;(-8)-&gt;00001000 &amp; 11111000</code> 得 <code>00001000</code>，即8。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token operator">-</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),sn={id:"_326-3-的幂",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#_326-3-的幂","aria-hidden":"true"},"#",-1),pn={href:"https://leetcode.cn/problems/power-of-three/",target:"_blank",rel:"noopener noreferrer"},tn=t(`<p>给定一个整数，写一个函数来判断它是否是 3 的幂次方。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>整数 <code>n</code> 是 3 的幂次方需满足：存在整数 <code>x</code> 使得 <code>n == 3x</code></p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">27</span>
输出：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">0</span>
输出：<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">9</span>
输出：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">45</span>
输出：<span class="token boolean">false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：使用Set保存数字，然后计算</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cur <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPowerOfThree</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,13),en={id:"_318-最大单词长度乘积",tabindex:"-1"},on=n("a",{class:"header-anchor",href:"#_318-最大单词长度乘积","aria-hidden":"true"},"#",-1),cn={href:"https://leetcode-cn.com/problems/maximum-product-of-word-lengths/",target:"_blank",rel:"noopener noreferrer"},ln=t(`<p>给你一个字符串数组 <code>words</code> ，找出并返回 <code>length(words[i]) * length(words[j])</code> 的最大值，并且这两个单词不含有公共字母。如果不存在这样的两个单词，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;abcw&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;xtfn&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abcdef&quot;</span><span class="token punctuation">]</span>
输出：<span class="token number">16</span> 
解释：这两个单词为 <span class="token string">&quot;abcw&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xtfn&quot;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cd&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bcd&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span> 
解释：这两个单词为 <span class="token string">&quot;ab&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cd&quot;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span> 
解释：不存在这样的两个单词。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 因为全是小写字母，使用<code>32</code>位的<code>int</code>可以放下每个字母是否出现过，然后计算两个数<code>&amp;</code>的值，如果为<code>0</code>则所有字符均不同，然后更新最大值。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res <span class="token punctuation">,</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),un={id:"_421-数组中两个数的最大异或值",tabindex:"-1"},rn=n("a",{class:"header-anchor",href:"#_421-数组中两个数的最大异或值","aria-hidden":"true"},"#",-1),kn={href:"https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/",target:"_blank",rel:"noopener noreferrer"},dn=t(`<p>给你一个整数数组 <code>nums</code> ，返回 <code>nums[i] XOR nums[j]</code> 的最大运算结果，其中 <code>0 ≤ i ≤ j &lt; n</code> 。</p><p><strong>进阶:</strong> 你可以在 <code>O(n)</code> 的时间解决这个问题吗？</p><p><strong>示例 1：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
输出：<span class="token number">28</span>
解释：最大运算结果是 <span class="token number">5</span> <span class="token class-name">XOR</span> <span class="token number">25</span> <span class="token operator">=</span> <span class="token number">28.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 4：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 5：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">83</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">]</span>
输出：<span class="token number">127</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,15),mn={id:"_461-汉明距离",tabindex:"-1"},vn=n("a",{class:"header-anchor",href:"#_461-汉明距离","aria-hidden":"true"},"#",-1),bn={href:"https://leetcode-cn.com/problems/hamming-distance/",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB",target:"_blank",rel:"noopener noreferrer"},hn=t(`<p>给你两个整数 <code>x</code> 和 <code>y</code>，计算并返回它们之间的汉明距离。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">2</span>
解释：
<span class="token number">1</span>   <span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">4</span>   <span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">)</span>
       ↑   ↑
上面的箭头指出了对应二进制位不同的位置。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 先计算<code>x</code>和<code>y</code>的异或值，然后统计其中<code>1</code>的位数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sum <span class="token operator">&amp;=</span> sum <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,8),yn={id:"_477-汉明距离总和",tabindex:"-1"},wn=n("a",{class:"header-anchor",href:"#_477-汉明距离总和","aria-hidden":"true"},"#",-1),fn={href:"https://leetcode-cn.com/problems/total-hamming-distance/",target:"_blank",rel:"noopener noreferrer"},xn={href:"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/475174?fr=aladdin",target:"_blank",rel:"noopener noreferrer"},jn=t(`<p>给你一个整数数组 <code>nums</code>，请你计算并返回 <code>nums</code> 中任意两个数之间 <strong>汉明距离的总和</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token number">6</span>
解释：在二进制表示中，<span class="token number">4</span> 表示为 <span class="token number">0100</span> ，<span class="token number">14</span> 表示为 <span class="token number">1110</span> ，<span class="token number">2</span>表示为 <span class="token number">0010</span> 。（这样表示是为了体现后四位之间关系）
所以答案为：
<span class="token function">HammingDistance</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">HammingDistance</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">HammingDistance</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 分别统计每一位上，<code>0</code>和<code>1</code>的个数，这一位的总和即为这两个数相乘(即排列组合)。<code>int</code>为<code>32</code>位，将每一位结果累加。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">totalHammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    x<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
                    y<span class="token operator">++</span><span class="token punctuation">;</span>
              <span class="token punctuation">}</span>
           <span class="token punctuation">}</span>
           res <span class="token operator">+=</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,8),_n={id:"_371-两整数之和",tabindex:"-1"},qn=n("a",{class:"header-anchor",href:"#_371-两整数之和","aria-hidden":"true"},"#",-1),Sn={href:"https://leetcode-cn.com/problems/sum-of-two-integers/",target:"_blank",rel:"noopener noreferrer"},In=t(`<p>给你两个整数 <code>a</code> 和 <code>b</code> ，<strong>不使用</strong> 运算符 <code>+</code> 和 <code>-</code> ，计算并返回两整数之和。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ <code>a ^ b</code>是无进位的相加； <code>a &amp; b</code>得到每一位的进位；让无进位相加的结果与进位不断的异或， 直到进位为<code>0</code>；</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> b<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> a<span class="token punctuation">;</span>
            <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>
            <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">getSum</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,8),An={id:"_526-优美的排列",tabindex:"-1"},Ln=n("a",{class:"header-anchor",href:"#_526-优美的排列","aria-hidden":"true"},"#",-1),On={href:"https://leetcode-cn.com/problems/beautiful-arrangement/",target:"_blank",rel:"noopener noreferrer"},Bn=t(`<p>假设有从 1 到 n 的 n 个整数。用这些整数构造一个数组 <code>perm</code>（<strong>下标从 1 开始</strong>），只要满足下述条件 <strong>之一</strong> ，该数组就是一个 <strong>优美的排列</strong> ：</p><ul><li><code>perm[i]</code> 能够被 <code>i</code> 整除</li><li><code>i</code> 能够被 <code>perm[i]</code> 整除</li></ul><p>给你一个整数 <code>n</code> ，返回可以构造的 <strong>优美排列</strong> 的 <strong>数量</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">2</span>
解释：
第 <span class="token number">1</span> 个优美的排列是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>：
    <span class="token operator">-</span> perm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> 能被 i <span class="token operator">=</span> <span class="token number">1</span> 整除
    <span class="token operator">-</span> perm<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> 能被 i <span class="token operator">=</span> <span class="token number">2</span> 整除
第 <span class="token number">2</span> 个优美的排列是 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">:</span>
    <span class="token operator">-</span> perm<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> 能被 i <span class="token operator">=</span> <span class="token number">1</span> 整除
    <span class="token operator">-</span> i <span class="token operator">=</span> <span class="token number">2</span> 能被 perm<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> 整除
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,10),zn={id:"_1711-大餐计数",tabindex:"-1"},Mn=n("a",{class:"header-anchor",href:"#_1711-大餐计数","aria-hidden":"true"},"#",-1),En={href:"https://leetcode-cn.com/problems/count-good-meals/",target:"_blank",rel:"noopener noreferrer"},Rn=t(`<p><strong>大餐</strong> 是指 <strong>恰好包含两道不同餐品</strong> 的一餐，其美味程度之和等于 2 的幂。</p><p>你可以搭配 <strong>任意</strong> 两道餐品做一顿大餐。</p><p>给你一个整数数组 <code>deliciousness</code> ，其中 <code>deliciousness[i]</code> 是第 <code>i</code> 道餐品的美味程度，返回你可以用数组中的餐品做出的不同 <strong>大餐</strong> 的数量。结果需要对 <code>109 + 7</code> 取余。</p><p>注意，只要餐品下标不同，就可以认为是不同的餐品，即便它们的美味程度相同。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：deliciousness <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
<span class="token function">解释：大餐的美味程度组合为</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token function">、</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token function">、</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token function">和</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span> 。
它们各自的美味程度之和分别为 <span class="token number">4</span> 、<span class="token number">8</span> 、<span class="token number">8</span> 和 <span class="token number">16</span> ，都是 <span class="token number">2</span> 的幂。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：deliciousness <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
输出：<span class="token number">15</span>
解释：大餐的美味程度组合为 <span class="token number">3</span> <span class="token function">种</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> ，<span class="token number">9</span> <span class="token function">种</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> ，和 <span class="token number">3</span> <span class="token function">种</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,11),Xn={id:"_1178-猜字谜",tabindex:"-1"},Cn=n("a",{class:"header-anchor",href:"#_1178-猜字谜","aria-hidden":"true"},"#",-1),Dn={href:"https://leetcode-cn.com/problems/number-of-valid-words-for-each-puzzle/",target:"_blank",rel:"noopener noreferrer"},Hn=t(`<p>外国友人仿照中国字谜设计了一个英文版猜字谜小游戏，请你来猜猜看吧。</p><p>字谜的迷面 <code>puzzle</code> 按字符串形式给出，如果一个单词 <code>word</code> 符合下面两个条件，那么它就可以算作谜底：</p><ul><li>单词 <code>word</code> 中包含谜面 <code>puzzle</code> 的第一个字母。</li><li>单词 <code>word</code> 中的每一个字母都可以在谜面 <code>puzzle</code> 中找到。</li></ul><p>例如，如果字谜的谜面是 &quot;abcdefg&quot;，那么可以作为谜底的单词有 &quot;faced&quot;, &quot;cabbage&quot;, 和 &quot;baggage&quot;；而 &quot;beefed&quot;（不含字母 &quot;a&quot;）以及 &quot;based&quot;（其中的 &quot;s&quot; 没有出现在谜面中）都不能作为谜底。</p><p>返回一个答案数组 <code>answer</code>，数组中的每个元素 <code>answer[i]</code> 是在给出的单词列表 <code>words</code> 中可以作为字谜迷面 <code>puzzles[i]</code> 所对应的谜底的单词数目。</p><p><strong>示例：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：
words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;asas&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;able&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;ability&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;actt&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;actor&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;access&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> 
puzzles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;aboveyz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abrodyz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abslute&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;absoryz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;actresz&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;gaswxyz&quot;</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
解释：
<span class="token number">1</span> 个单词可以作为 <span class="token string">&quot;aboveyz&quot;</span> <span class="token literal-property property">的谜底</span> <span class="token operator">:</span> <span class="token string">&quot;aaaa&quot;</span> 
<span class="token number">1</span> 个单词可以作为 <span class="token string">&quot;abrodyz&quot;</span> <span class="token literal-property property">的谜底</span> <span class="token operator">:</span> <span class="token string">&quot;aaaa&quot;</span>
<span class="token number">3</span> 个单词可以作为 <span class="token string">&quot;abslute&quot;</span> <span class="token literal-property property">的谜底</span> <span class="token operator">:</span> <span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;asas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;able&quot;</span>
<span class="token number">2</span> 个单词可以作为 <span class="token string">&quot;absoryz&quot;</span> <span class="token literal-property property">的谜底</span> <span class="token operator">:</span> <span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;asas&quot;</span>
<span class="token number">4</span> 个单词可以作为 <span class="token string">&quot;actresz&quot;</span> <span class="token literal-property property">的谜底</span> <span class="token operator">:</span> <span class="token string">&quot;aaaa&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;asas&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;actt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;access&quot;</span>
没有单词可以作为 <span class="token string">&quot;gaswxyz&quot;</span> 的谜底，因为列表中的单词都不含字母 <span class="token string">&#39;g&#39;</span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 使用一个<code>int</code>可以保存一个字符串中字符出现与否，所以统计单词，因为编码过程可能会出现重复数字，如<code>abc -&gt; 111</code> , <code>aaabbc -&gt; 111</code>，所以使用哈希表存储数字出现的次数，然后判断<code>key</code>是否满足条件，满足直接加上<code>value</code>可以有效降低时间复杂度。</p><p>​ 判断逻辑：对于每个<code>puzzle</code>，我们找到它所有符合条件的子集，然后在上一步求得的<code>map</code>中找对应子集出现的次数，累加可得该<code>puzzle</code>对应的单词总数。</p><p>​ 比如<code>puzzle</code>为<code>eca</code>，它对应的所有子集为<code>e, ec, ea, eca</code>，我们先用<code>getBitMask()</code>对其进行二进制压缩，然后在<code>map</code>中寻找<code>key</code>为这几个子集的元素，并累加可得结果。</p><p>​ 那么如何找到一个字符串所有的子集？这里引入一个寻找二进制数子集的模板</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">int</span> subset <span class="token operator">=</span> mask<span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>subset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	subset <span class="token operator">=</span> <span class="token punctuation">(</span>subset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这个模板不是很容易理解，解释一下：</p><p>​ 首先将<code>subset</code>设为<code>mask</code>的二进制码，然后不断对<code>subset</code>减一，再与<code>mask</code>进行与运算，这样可以求得<code>mask</code>的所有子集。</p><p>​ 其他题解中还有一个更简单的模板，不用重复计算后面字符为空的情况：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">int</span> subset <span class="token operator">=</span> mask<span class="token punctuation">;</span>
	<span class="token keyword">do</span> <span class="token punctuation">{</span>
	    subset <span class="token operator">=</span> <span class="token punctuation">(</span>subset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>subset <span class="token operator">!=</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 这个结束条件为什么是<code>subset != mask</code>呢</p><p>​ 当<code>subset</code>等于<code>0</code>时，再减=<code>1</code>，它的二进制值会变成<code>1111111....1111</code>，再与<code>mask</code>进行与运算就等于<code>mask</code>，此时循环结束。这样做的好处是直接算进了子集为空的情景。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNumOfValidWords</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> puzzles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 首先计算每个word出现次数，使用二进制状态压缩每个word</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token function">getBitMask</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果包含的字符数量大于7，那么一定无法作为谜底，无需加入映射表</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>mask<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> puzzle <span class="token operator">:</span> puzzles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

            <span class="token comment">// 第一个字符必须存在，先获取第一个字符的二进制码</span>
            <span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token function">getBitMask</span><span class="token punctuation">(</span>puzzle<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取后面字符串的二进制码</span>
            <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token function">getBitMask</span><span class="token punctuation">(</span>puzzle<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> subset <span class="token operator">=</span> mask<span class="token punctuation">;</span>
            <span class="token comment">// 枚举后面字符串子集</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>subset <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              	<span class="token comment">// 拼接包含首字母的迷面字集</span>
                <span class="token keyword">int</span> key <span class="token operator">=</span> first <span class="token operator">|</span> subset<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    cnt <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                subset <span class="token operator">=</span> <span class="token punctuation">(</span>subset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 后面字符串为空的情况</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cnt <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getBitMask</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> mask <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> ch <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mask <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> mask<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),Nn={id:"_2275-按位与结果大于零的最长组合",tabindex:"-1"},Tn=n("a",{class:"header-anchor",href:"#_2275-按位与结果大于零的最长组合","aria-hidden":"true"},"#",-1),Vn={href:"https://leetcode.cn/problems/largest-combination-with-bitwise-and-greater-than-zero/",target:"_blank",rel:"noopener noreferrer"},Gn=t(`<p>对数组 <code>nums</code> 执行 <strong>按位与</strong> 相当于对数组 <code>nums</code> 中的所有整数执行 <strong>按位与</strong> 。</p><ul><li>例如，对 <code>nums = [1, 5, 3]</code> 来说，按位与等于 <code>1 &amp; 5 &amp; 3 = 1</code> 。</li><li>同样，对 <code>nums = [7]</code> 而言，按位与等于 <code>7</code> 。</li></ul><p>给你一个正整数数组 <code>candidates</code> 。计算 <code>candidates</code> 中的数字每种组合下 <strong>按位与</strong> 的结果。 <code>candidates</code> 中的每个数字在每种组合中只能使用 <strong>一次</strong> 。</p><p>返回按位与结果大于 <code>0</code> 的 <strong>最长</strong> 组合的长度。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：candidates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span>
输出：<span class="token number">4</span>
解释：组合 <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">]</span> 的按位与结果是 <span class="token number">16</span> <span class="token operator">&amp;</span> <span class="token number">17</span> <span class="token operator">&amp;</span> <span class="token number">62</span> <span class="token operator">&amp;</span> <span class="token number">24</span> <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">&gt;</span> <span class="token number">0</span> 。
组合长度是 <span class="token number">4</span> 。
可以证明不存在按位与结果大于 <span class="token number">0</span> 且长度大于 <span class="token number">4</span> 的组合。
注意，符合长度最大的组合可能不止一种。
例如，组合 <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">]</span> 的按位与结果是 <span class="token number">62</span> <span class="token operator">&amp;</span> <span class="token number">12</span> <span class="token operator">&amp;</span> <span class="token number">24</span> <span class="token operator">&amp;</span> <span class="token number">14</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&gt;</span> <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：candidates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：最长组合是 <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span> ，按位与结果 <span class="token number">8</span> <span class="token operator">&amp;</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">&gt;</span> <span class="token number">0</span> 。
组合长度是 <span class="token number">2</span> ，所以返回 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 按位与，某一位为都为1<code>1</code>，结果才会是<code>1</code>，所以要求的结果即统计二进制所有位中哪一位的<code>1</code>出现的次数最多。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">largestCombination</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 题目最大数字为10^7，转为二进制数是24位</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 这一位有多少个数是1</span>
                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> count <span class="token operator">+=</span> <span class="token punctuation">(</span>candidate <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> max<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),Zn={id:"_2401-最长优雅子数组",tabindex:"-1"},Fn=n("a",{class:"header-anchor",href:"#_2401-最长优雅子数组","aria-hidden":"true"},"#",-1),Pn={href:"https://leetcode.cn/problems/longest-nice-subarray/",target:"_blank",rel:"noopener noreferrer"},Jn=t(`<p>给你一个由 <strong>正</strong> 整数组成的数组 <code>nums</code> 。</p><p>如果 <code>nums</code> 的子数组中位于 <strong>不同</strong> 位置的每对元素按位 **与（AND）**运算的结果等于 <code>0</code> ，则称该子数组为 <strong>优雅</strong> 子数组。</p><p>返回 <strong>最长</strong> 的优雅子数组的长度。</p><p><strong>子数组</strong> 是数组中的一个 <strong>连续</strong> 部分。</p><p>**注意：**长度为 <code>1</code> 的子数组始终视作优雅子数组。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：最长的优雅子数组是 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">]</span> 。子数组满足题目条件：
<span class="token operator">-</span> <span class="token number">3</span> <span class="token constant">AND</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">-</span> <span class="token number">3</span> <span class="token constant">AND</span> <span class="token number">48</span> <span class="token operator">=</span> <span class="token number">0</span>
<span class="token operator">-</span> <span class="token number">8</span> <span class="token constant">AND</span> <span class="token number">48</span> <span class="token operator">=</span> <span class="token number">0</span>
可以证明不存在更长的优雅子数组，所以返回 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">]</span>
输出：<span class="token number">1</span>
解释：最长的优雅子数组长度为 <span class="token number">1</span> ，任何长度为 <span class="token number">1</span> 的子数组都满足题目条件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),Kn={id:"_2411-按位或最大的最小子数组长度",tabindex:"-1"},Un=n("a",{class:"header-anchor",href:"#_2411-按位或最大的最小子数组长度","aria-hidden":"true"},"#",-1),Wn={href:"https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/",target:"_blank",rel:"noopener noreferrer"},Yn=t(`<p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组中所有数字均为非负整数。对于 <code>0</code> 到 <code>n - 1</code> 之间的每一个下标 <code>i</code> ，你需要找出 <code>nums</code> 中一个 <strong>最小</strong> 非空子数组，它的起始位置为 <code>i</code> （包含这个位置），同时有 <strong>最大</strong> 的 <strong>按位或运算值</strong> 。</p><ul><li>换言之，令 <code>Bij</code> 表示子数组 <code>nums[i...j]</code> 的按位或运算的结果，你需要找到一个起始位置为 <code>i</code> 的最小子数组，这个子数组的按位或运算的结果等于 <code>max(Bik)</code> ，其中 <code>i &lt;= k &lt;= n - 1</code> 。</li></ul><p>一个数组的按位或运算值是这个数组里所有数字按位或运算的结果。</p><p>请你返回一个大小为 <code>n</code> 的整数数组 <code>answer</code>，其中 <code>answer[i]</code>是开始位置为 <code>i</code> ，按位或运算结果最大，且 <strong>最短</strong> 子数组的长度。</p><p><strong>子数组</strong> 是数组里一段连续非空元素组成的序列。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
解释：
任何位置开始，最大按位或运算的结果都是 <span class="token number">3</span> 。
<span class="token operator">-</span> 下标 <span class="token number">0</span> 处，能得到结果 <span class="token number">3</span> 的最短子数组是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 下标 <span class="token number">1</span> 处，能得到结果 <span class="token number">3</span> 的最短子数组是 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 下标 <span class="token number">2</span> 处，能得到结果 <span class="token number">3</span> 的最短子数组是 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 下标 <span class="token number">3</span> 处，能得到结果 <span class="token number">3</span> 的最短子数组是 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 。
<span class="token operator">-</span> 下标 <span class="token number">4</span> 处，能得到结果 <span class="token number">3</span> 的最短子数组是 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 。
所以我们返回 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
解释：
下标 <span class="token number">0</span> 处，能得到最大按位或运算值的最短子数组长度为 <span class="token number">2</span> 。
下标 <span class="token number">1</span> 处，能得到最大按位或运算值的最短子数组长度为 <span class="token number">1</span> 。
所以我们返回 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 109</code></li></ul><blockquote><ol><li>求出<strong>所有</strong>子数组的按位或的结果，以及值等于该结果的子数组的个数。</li><li>求按位或结果等于<strong>任意给定数字</strong>的子数组的最短长度/最长长度。</li></ol></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>class Solution {
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> smallestSubarrays<span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> {
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> new <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> ors <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">--i) {</span>
            ors<span class="token punctuation">.</span><span class="token keyword">add</span><span class="token punctuation">(</span>new <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>{<span class="token number">0</span><span class="token punctuation">,</span> i}<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">or</span> : ors<span class="token punctuation">)</span> {
                <span class="token operator">or</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">|</span><span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ors<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token operator">=</span> <span class="token operator">or</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    ors<span class="token punctuation">.</span>get<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">or</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> ors<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token operator">+</span>k<span class="token punctuation">,</span> <span class="token operator">or</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            }
            ors<span class="token punctuation">.</span>subList<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> ors<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ors<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        }
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14),$n={id:"_2568-最小无法得到的或值",tabindex:"-1"},Qn=n("a",{class:"header-anchor",href:"#_2568-最小无法得到的或值","aria-hidden":"true"},"#",-1),ns={href:"https://leetcode.cn/problems/minimum-impossible-or/",target:"_blank",rel:"noopener noreferrer"},ss=t(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。</p><p>如果存在一些整数满足 <code>0 &lt;= index1 &lt; index2 &lt; ... &lt; indexk &lt; nums.length</code> ，得到 <code>nums[index1] | nums[index2] | ... | nums[indexk] = x</code> ，那么我们说 <code>x</code> 是 <strong>可表达的</strong> 。换言之，如果一个整数能由 <code>nums</code> 的某个子序列的或运算得到，那么它就是可表达的。</p><p>请你返回 <code>nums</code> 不可表达的 <strong>最小非零整数</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [2,1]
输出：4
解释：1 和 2 已经在数组中，因为 nums[0] | nums[1] = 2 | 1 = 3 ，所以 3 是可表达的。由于 4 是不可表达的，所以我们返回 4 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：nums = [5,3,2]
输出：1
解释：1 是最小不可表达的数字。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li></ul><blockquote><p>思路：</p><p>​ 如果数组里没有<code>1</code>则答案一定是<code>1</code>，因为或运算越或越大，所以答案是数组中没出现的最小的<code>2</code>的次幂。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minImpossibleOR</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 可以使用<code>lowbit</code>进行优化，使用1个数保存<code>2</code>的次幂出现的信息，找到最右端的<code>0</code>对应的<code>2</code>的次幂即为答案。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minImpossibleOR</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> temp <span class="token operator">|=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      	<span class="token comment">// 最右端的0反转为找最右端的1，然后使用lowbit寻找即可</span>
        temp <span class="token operator">=</span> <span class="token operator">~</span>temp<span class="token punctuation">;</span>
        <span class="token keyword">return</span> temp <span class="token operator">&amp;</span> <span class="token operator">-</span>temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14),as={id:"_2575-找出字符串的可整除数组",tabindex:"-1"},ps=n("a",{class:"header-anchor",href:"#_2575-找出字符串的可整除数组","aria-hidden":"true"},"#",-1),ts={href:"https://leetcode.cn/problems/find-the-divisibility-array-of-a-string/",target:"_blank",rel:"noopener noreferrer"},es=t(`<p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>word</code> ，长度为 <code>n</code> ，由从 <code>0</code> 到 <code>9</code> 的数字组成。另给你一个正整数 <code>m</code> 。</p><p><code>word</code> 的 <strong>可整除数组</strong> <code>div</code> 是一个长度为 <code>n</code> 的整数数组，并满足：</p><ul><li>如果 <code>word[0,...,i]</code> 所表示的 <strong>数值</strong> 能被 <code>m</code> 整除，<code>div[i] = 1</code></li><li>否则，<code>div[i] = 0</code></li></ul><p>返回 <code>word</code> 的可整除数组。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：word = &quot;998244353&quot;, m = 3
输出：[1,1,0,0,0,1,1,0,0]
解释：仅有 4 个前缀可以被 3 整除：&quot;9&quot;、&quot;99&quot;、&quot;998244&quot; 和 &quot;9982443&quot; 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：word = &quot;1010&quot;, m = 10
输出：[0,1,0,1]
解释：仅有 2 个前缀可以被 10 整除：&quot;10&quot; 和 &quot;1010&quot; 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>word.length == n</code></li><li><code>word</code> 由数字 <code>0</code> 到 <code>9</code> 组成</li><li><code>1 &lt;= m &lt;= 10^9</code></li></ul>`,10),os=n("blockquote",null,[n("p",null,"思路："),n("p",null,[s("​ 递推取余。"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"a"),n("mo",null,"+"),n("mi",null,"b"),n("mo",{stretchy:"false"},")"),n("mspace"),n("mspace",{width:"0.6667em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null," "),n("mtext",null," "),n("mi",null,"m"),n("mo",null,"="),n("mtext",null,"（"),n("mi",null,"a"),n("mspace"),n("mspace",{width:"0.6667em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null," "),n("mtext",null," "),n("mi",null,"m"),n("mtext",null,"）"),n("mo",null,"+"),n("mtext",null,"（"),n("mi",null,"b"),n("mspace"),n("mspace",{width:"0.6667em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null," "),n("mtext",null," "),n("mi",null,"m"),n("mtext",null,"）")]),n("annotation",{encoding:"application/x-tex"},"(a + b) \\mod m = （a \\mod m） + （b \\mod m）")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mclose"},")"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"0.6667em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6833em"}}),n("span",{class:"mord cjk_fallback"},"（"),n("span",{class:"mord mathnormal"},"a"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"0.6667em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord cjk_fallback"},"）"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord cjk_fallback"},"（"),n("span",{class:"mord mathnormal"},"b"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"0.6667em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord cjk_fallback"},"）")])])]),s(" 。证明：设"),n("code",null,"[0:i - 1]"),s("代表的数为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"k"),n("mo",null,"×"),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"m"),n("mi",null,"o"),n("mi",null,"d")]),n("annotation",{encoding:"application/x-tex"},"k \\times m + mod")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d")])])]),s("，"),n("code",null,"[0:i]"),s("代表的数则为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"10"),n("mo",null,"×"),n("mo",{stretchy:"false"},"("),n("mi",null,"k"),n("mo",null,"×"),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"m"),n("mi",null,"o"),n("mi",null,"d"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"10 \\times (k \\times m + mod) + nums[i]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"10"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"]")])])]),s("，则有"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mn",null,"10"),n("mo",null,"×"),n("mo",{stretchy:"false"},"("),n("mi",null,"k"),n("mo",null,"×"),n("mi",null,"m"),n("mo",null,"+"),n("mi",null,"m"),n("mi",null,"o"),n("mi",null,"d"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},")"),n("mspace"),n("mspace",{width:"0.6667em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null," "),n("mtext",null," "),n("mi",null,"m"),n("mo",null,"="),n("mo",{stretchy:"false"},"("),n("mn",null,"10"),n("mo",null,"×"),n("mi",null,"m"),n("mi",null,"o"),n("mi",null,"d"),n("mo",null,"+"),n("mi",null,"n"),n("mi",null,"u"),n("mi",null,"m"),n("mi",null,"s"),n("mo",{stretchy:"false"},"["),n("mi",null,"i"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},")"),n("mspace"),n("mspace",{width:"0.6667em"}),n("mrow",null,[n("mi",{mathvariant:"normal"},"m"),n("mi",{mathvariant:"normal"},"o"),n("mi",{mathvariant:"normal"},"d")]),n("mtext",null," "),n("mtext",null," "),n("mi",null,"m")]),n("annotation",{encoding:"application/x-tex"},"(10 \\times (k \\times m + mod) + nums[i]) \\mod m = (10 \\times mod + nums[i]) \\mod m")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"10"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"])"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"0.6667em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"10"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7778em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal"},"d"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"i"),n("span",{class:"mclose"},"])"),n("span",{class:"mspace allowbreak"}),n("span",{class:"mspace",style:{"margin-right":"0.6667em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},[n("span",{class:"mord mathrm"},"mod")])]),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal"},"m")])])]),s("。")])],-1),cs=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">divisibilityArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">)</span> <span class="token operator">%</span> m<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">addBinary</span><span class="token punctuation">(</span><span class="token class-name">String</span> a<span class="token punctuation">,</span> <span class="token class-name">String</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> index1 <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index2 <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a1 <span class="token punctuation">,</span> b1 <span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> index2 <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            a1 <span class="token operator">=</span> index1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index1<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            b1 <span class="token operator">=</span> index2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index2<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a1 <span class="token operator">^</span> b1 <span class="token operator">^</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> <span class="token punctuation">(</span>a1 <span class="token operator">+</span> b1 <span class="token operator">+</span> temp<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="奇偶性判断" tabindex="-1"><a class="header-anchor" href="#奇偶性判断" aria-hidden="true">#</a> 奇偶性判断</h3>`,5),ls={id:"_540-有序数组中的单一元素",tabindex:"-1"},is=n("a",{class:"header-anchor",href:"#_540-有序数组中的单一元素","aria-hidden":"true"},"#",-1),us={href:"https://leetcode.cn/problems/single-element-in-a-sorted-array/",target:"_blank",rel:"noopener noreferrer"},rs=t(`<p>给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。</p><p>请你找出并返回只出现一次的那个数。</p><p>你设计的解决方案必须满足 <code>O(log n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>0 &lt;= nums[i] &lt;= 10^5</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr><h3 id="异或使用" tabindex="-1"><a class="header-anchor" href="#异或使用" aria-hidden="true">#</a> 异或使用</h3>`,13),ks={id:"_136-只出现一次的数字",tabindex:"-1"},ds=n("a",{class:"header-anchor",href:"#_136-只出现一次的数字","aria-hidden":"true"},"#",-1),ms={href:"https://leetcode-cn.com/problems/single-number/",target:"_blank",rel:"noopener noreferrer"},vs=t(`<p>给定一个<strong>非空</strong>整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p><strong>说明：</strong></p><p>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 异或位运算，从0作为初始值开始，因为自身相异或是0，与0异或是自身，所以最后结果就是结果。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">^=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),bs={id:"_137-只出现一次的数字-ii",tabindex:"-1"},gs=n("a",{class:"header-anchor",href:"#_137-只出现一次的数字-ii","aria-hidden":"true"},"#",-1),hs={href:"https://leetcode-cn.com/problems/single-number-ii/",target:"_blank",rel:"noopener noreferrer"},ys=t(`<p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现 <strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次</strong>。请你找出并返回那个只出现了一次的元素。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span>
输出：<span class="token number">99</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 哈希表，计算<code>value</code>最小的<code>key</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">.</span><span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ <code>DFA</code>，有限状态自动机</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> ones <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> twos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            ones <span class="token operator">=</span> ones <span class="token operator">^</span> num <span class="token operator">&amp;</span> <span class="token operator">~</span>twos<span class="token punctuation">;</span>
            twos <span class="token operator">=</span> twos <span class="token operator">^</span> num <span class="token operator">&amp;</span> <span class="token operator">~</span>ones<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ones<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,10),ws={id:"_260-只出现一次的数字-iii",tabindex:"-1"},fs=n("a",{class:"header-anchor",href:"#_260-只出现一次的数字-iii","aria-hidden":"true"},"#",-1),xs={href:"https://leetcode-cn.com/problems/single-number-iii/",target:"_blank",rel:"noopener noreferrer"},js=t(`<p>给定一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><p><strong>进阶:</strong> 你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
解释：<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> 也是有效的答案。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 使用哈希表计算，返回次数最少的<code>key</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">.</span><span class="token function">comparingByValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 全部异或，最后结果即为要求的两个数的异或结果。然后查找是否有<code>1</code>的位，这一位即为两个结果不相同的位，然后对数组中所有数遍历，找出这一位为<code>1</code>的数，全部异或求出一个结果。对这一位是<code>0</code>的数全部异或求一个结果，得到另一个数。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">^=</span> x<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span>i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                k <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">&gt;&gt;</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^=</span> x<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                ans<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^=</span> x<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h3><blockquote><p>​ 集合可以用二进制表示，二进制<strong>从低到高</strong>第<code>i</code>位为<code>1</code>表示<code>i</code>在集合中，为 0 表示 <code>i</code> 不在集合中。例如集合 {0,2,3} 可以用二进制数 1101 表示；反过来，二进制数 1101就对应着集合 {0,2,3}。</p></blockquote><table><thead><tr><th style="text-align:center;">术语</th><th style="text-align:center;">代码</th><th style="text-align:center;">解释</th></tr></thead><tbody><tr><td style="text-align:center;">集合大小（元素个数）</td><td style="text-align:center;"><code>Integer.bitcount(s)</code></td><td style="text-align:center;">二进制中<code>1</code>的个数，即为集合元素个数大小</td></tr><tr><td style="text-align:center;">二进制长度</td><td style="text-align:center;"><code>Integer.SIZE - Integer.numberOfLeadingZeros(s)</code></td><td style="text-align:center;">获取前导<code>0</code>的个数，整数长度减去前导<code>0</code>的个数就是二进制长度</td></tr><tr><td style="text-align:center;">集合中的最大元素</td><td style="text-align:center;"><code>Integer.SIZE - Integer.numberOfLeadingZeros(s) - 1</code></td><td style="text-align:center;">将上述值减<code>1</code>，即第一个<code>1</code>的位置</td></tr><tr><td style="text-align:center;">集合中的最小元素</td><td style="text-align:center;"><code>Integer.numberOfTrailingZeros(s)</code></td><td style="text-align:center;">末尾<code>0</code>的长度，它同时也是最后一个<code>1</code>的位置</td></tr></tbody></table>`,16),_s={id:"_78-子集",tabindex:"-1"},qs=n("a",{class:"header-anchor",href:"#_78-子集","aria-hidden":"true"},"#",-1),Ss={href:"https://leetcode.cn/problems/subsets/",target:"_blank",rel:"noopener noreferrer"},Is=t(`<p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul>`,8),As=n("blockquote",null,[n("p",null,"思路："),n("p",null,"​ 把所有的合法子集按顺序列出来，会发现我们做的相当于「压缩版」的二进制减法，例如"),n("p",null,"​ 10101→10100→10001→10000→00101→⋯10101→10100→10001→10000→00101→⋯"),n("p",null,"​ 如果忽略掉 10101 中的两个 00，数字的变化和二进制减法是一样的，即"),n("p",null,"​ 111→110→101→100→011→⋯111→110→101→100→011→⋯"),n("p",null,[s("​ 如何快速找到下一个子集呢？以 10100→1000→10001 为例说明，普通的二进制减法会把最低位的 11 变成 00，同时 11 右边的 00 变成 11，即 10100→10011→10011。「压缩版」的二进制减法也是类似的，把最低位的 11 变成 00，但同时对于 11 右边的 00，只保留在 "),n("code",null,"s = 10101"),s(" 中的 11，所以是 10100→10001→10001。怎么保留？& 10101 就行。")]),n("p",null,[s("​ 从大到小枚举"),n("code",null,"s"),s("的所有子集"),n("code",null,"sub"),s("（从"),n("code",null,"s"),s(" 枚举到空集"),n("code",null,"∅"),s("），原理是当 "),n("code",null,"sub = 0"),s("时（空集），再减一就得到"),n("code",null,"-1"),s("，对应的二进制为"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"111....1")]),n("annotation",{encoding:"application/x-tex"},"111....1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"111....1")])])]),s("，再 "),n("code",null,"&s"),s(" 就得到了"),n("code",null,"s"),s("。所以当循环到"),n("code",null,"sub = s"),s("时，说明最后一次循环的"),n("code",null,"sub = 0"),s("(空集），"),n("code",null,"s"),s("的所有子集都枚举到了，退出循环。")]),n("p",null,[s("​ 使用位运算表示集合需要从0开始，所以本题需要做下转换，将"),n("code",null,"-10 ~ 10 "),s("转化为"),n("code",null,"0 ~ 20")])],-1),Ls=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> set <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sub <span class="token operator">=</span> set<span class="token punctuation">;</span>
        <span class="token keyword">do</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">num2List</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            sub <span class="token operator">=</span> <span class="token punctuation">(</span>sub <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> set<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>sub <span class="token operator">!=</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">num2List</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),Os={id:"_46-全排列",tabindex:"-1"},Bs=n("a",{class:"header-anchor",href:"#_46-全排列","aria-hidden":"true"},"#",-1),zs={href:"https://leetcode.cn/problems/permutations/",target:"_blank",rel:"noopener noreferrer"},Ms=t(`<p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><blockquote><p>思路：</p><p>​ 回溯法，使用一个bool数组表示每个数当前是否被选过，无论结果如何，本次递归结束后恢复现场，然后进行下次迭代。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
            path<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 使用位运算对上述过程进行优化，可以使用一个数字来表示各位被用过没有，使用三个位运算的小技巧：判断某一位是否是<code>1</code>，将某一位置为<code>1</code>，将某一位置为<code>0</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> used <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> used<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>used <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            path<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            used <span class="token operator">|=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>
            <span class="token function">backtracking</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>
            path<span class="token punctuation">.</span><span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            used <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14),Es={id:"_1125-最小的必要团队",tabindex:"-1"},Rs=n("a",{class:"header-anchor",href:"#_1125-最小的必要团队","aria-hidden":"true"},"#",-1),Xs={href:"https://leetcode.cn/problems/smallest-sufficient-team/",target:"_blank",rel:"noopener noreferrer"},Cs=t(`<p>作为项目经理，你规划了一份需求的技能清单 <code>req_skills</code>，并打算从备选人员名单 <code>people</code> 中选出些人组成一个「必要团队」（ 编号为 <code>i</code> 的备选人员 <code>people[i]</code> 含有一份该备选人员掌握的技能列表）。</p><p>所谓「必要团队」，就是在这个团队中，对于所需求的技能列表 <code>req_skills</code> 中列出的每项技能，团队中至少有一名成员已经掌握。可以用每个人的编号来表示团队中的成员：</p><ul><li>例如，团队 <code>team = [0, 1, 3]</code> 表示掌握技能分别为 <code>people[0]</code>，<code>people[1]</code>，和 <code>people[3]</code> 的备选人员。</li></ul><p>请你返回 <strong>任一</strong> 规模最小的必要团队，团队成员用人员编号表示。你可以按 <strong>任意顺序</strong> 返回答案，题目数据保证答案存在。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：req_skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;nodejs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：req_skills <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;algorithms&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aws&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;algorithms&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;algorithms&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aws&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;reactjs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;csharp&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;math&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">&quot;aws&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= req_skills.length &lt;= 16</code></li><li><code>1 &lt;= req_skills[i].length &lt;= 16</code></li><li><code>req_skills[i]</code> 由小写英文字母组成</li><li><code>req_skills</code> 中的所有字符串 <strong>互不相同</strong></li><li><code>1 &lt;= people.length &lt;= 60</code></li><li><code>0 &lt;= people[i].length &lt;= 16</code></li><li><code>1 &lt;= people[i][j].length &lt;= 16</code></li><li><code>people[i][j]</code> 由小写英文字母组成</li><li><code>people[i]</code> 中的所有字符串 <strong>互不相同</strong></li><li><code>people[i]</code> 中的每个技能是 <code>req_skills</code> 中的技能</li><li>题目数据保证「必要团队」一定存在</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr><h3 id="gosper-s-hack" tabindex="-1"><a class="header-anchor" href="#gosper-s-hack" aria-hidden="true">#</a> Gosper’s Hack</h3>`,14),Ds=n("p",null,[n("strong",null,"Gosper's Hack"),s("是一种生成"),n("code",null,"n"),s("元集合所有"),n("code",null,"k"),s("元子集的算法，它巧妙地利用了位运算。左半部分等于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"x"),n("mo",null,"+"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mi",null,"b"),n("mi",null,"i"),n("mi",null,"t")]),n("annotation",{encoding:"application/x-tex"},"x + lowbit")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6944em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mord mathnormal"},"bi"),n("span",{class:"mord mathnormal"},"t")])])]),s("，右半部分等于"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,"⊕"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,"+"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mi",null,"b"),n("mi",null,"i"),n("mi",null,"t"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},")"),n("mi",{mathvariant:"normal"},"/"),n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"w"),n("mi",null,"b"),n("mi",null,"i"),n("mi",null,"t"),n("mo",null,">"),n("mo",null,">"),n("mn",null,"2")]),n("annotation",{encoding:"application/x-tex"},"(x \\oplus (x + lowbit)) / lowbit >> 2")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"⊕"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mord mathnormal"},"bi"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mclose"},"))"),n("span",{class:"mord"},"/"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mord mathnormal"},"bi"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},">>"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2")])])]),s("。代码示例如下：")],-1),Hs=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">void</span> <span class="token function">gospersHack</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> lb <span class="token operator">=</span> cur <span class="token operator">&amp;</span> <span class="token operator">-</span>cur<span class="token punctuation">;</span>
            <span class="token keyword">int</span> r <span class="token operator">=</span> cur <span class="token operator">+</span> lb<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">^</span> cur<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfTrailingZeros</span><span class="token punctuation">(</span>lb<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> r<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ns={id:"_77-组合",tabindex:"-1"},Ts=n("a",{class:"header-anchor",href:"#_77-组合","aria-hidden":"true"},"#",-1),Vs={href:"https://leetcode.cn/problems/combinations/",target:"_blank",rel:"noopener noreferrer"},Gs=t(`<p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：
<span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><blockquote><p>思路：</p><p>​ <code>gosper&#39;s hack</code>板子题，直接使用即可，注意是求<code>[1, n]</code>的所有子集，所以转换时需要将每一位表示的数<code>+1 </code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">;</span> cur <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">num2List</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> lb <span class="token operator">=</span> cur <span class="token operator">&amp;</span> <span class="token operator">-</span>cur<span class="token punctuation">;</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> cur <span class="token operator">+</span> lb<span class="token punctuation">;</span>
            cur <span class="token operator">=</span> <span class="token punctuation">(</span>cur <span class="token operator">^</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfTrailingZeros</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">num2List</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;&gt;</span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),Zs={id:"_2397-被列覆盖的最多行数",tabindex:"-1"},Fs=n("a",{class:"header-anchor",href:"#_2397-被列覆盖的最多行数","aria-hidden":"true"},"#",-1),Ps={href:"https://leetcode.cn/problems/maximum-rows-covered-by-columns/",target:"_blank",rel:"noopener noreferrer"},Js=t(`<p>给你一个下标从 <strong>0</strong> 开始的 <code>m x n</code> 二进制矩阵 <code>mat</code> 和一个整数 <code>cols</code> ，表示你需要选出的列数。</p><p>如果一行中，所有的 <code>1</code> 都被你选中的列所覆盖，那么我们称这一行 <strong>被覆盖</strong> 了。</p><p>请你返回在选择 <code>cols</code> 列的情况下，<strong>被覆盖</strong> 的行数 <strong>最大</strong> 为多少。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/rowscovered.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cols <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">3</span>
解释：
如上图所示，覆盖 <span class="token number">3</span> 行的一种可行办法是选择第 <span class="token number">0</span> 和第 <span class="token number">2</span> 列。
可以看出，不存在大于 <span class="token number">3</span> 行被覆盖的方案，所以我们返回 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/rowscovered2-20230728235800381.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cols <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">2</span>
解释：
选择唯一的一列，两行都被覆盖了，原因是整个矩阵都被覆盖了。
所以我们返回 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= m, n &lt;= 12</code></li><li><code>mat[i][j]</code> 要么是 <code>0</code> 要么是 <code>1</code> 。</li><li><code>1 &lt;= cols &lt;= n</code></li></ul><blockquote><p>思路：</p><p>​ 暴力枚举所有列，从0到<code>n - 1</code>，每一列都可以选，可以使用二进制位运算代表每种情况。每种情况下，如果选中的列数不等于题目要求，则continue。然后计算每一行中所有的<code>1</code>是否已被选中，可以使用一个数字来表示原始的一行，每一位<code>&amp;</code>选中的行，如果最后结果等于自己，即每一个<code>1</code>都被选中，则将行数+1，计算每种选择下的答案最大值。预处理行时，从左到右，每个数字左移相应下标的位数，即可表示这一位是<code>0</code>还是<code>1</code>。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumRows</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> numSelect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mask <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>array <span class="token operator">-&gt;</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> numSelect<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> temp<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>思路：</p><p>​ 上面有很多无效的枚举，可以使用gosper’s hack进行优化，获取<code>n</code>的元素内恰好为<code>k</code>个元素的所有子集，然后再进行比较。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumRows</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> numSelect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mask <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>array <span class="token operator">-&gt;</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> numSelect<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> mask<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">)</span> temp<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> lowbit <span class="token operator">=</span> i <span class="token operator">&amp;</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> i <span class="token operator">+</span> lowbit<span class="token punctuation">;</span>
            <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">^</span> left<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">numberOfTrailingZeros</span><span class="token punctuation">(</span>lowbit<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
            i <span class="token operator">=</span> left <span class="token operator">|</span> right<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="综合应用" tabindex="-1"><a class="header-anchor" href="#综合应用" aria-hidden="true">#</a> 综合应用</h3>`,17),Ks={id:"_2939-最大异或乘积",tabindex:"-1"},Us=n("a",{class:"header-anchor",href:"#_2939-最大异或乘积","aria-hidden":"true"},"#",-1),Ws={href:"https://leetcode.cn/problems/maximum-xor-product/",target:"_blank",rel:"noopener noreferrer"},Ys=t(`<p>给你三个整数 <code>a</code> ，<code>b</code> 和 <code>n</code> ，请你返回 <code>(a XOR x) * (b XOR x)</code> 的 <strong>最大值</strong> 且 <code>x</code> 需要满足 <code>0 &lt;= x &lt; 2^n</code>。</p><p>由于答案可能会很大，返回它对 <code>109 + 7</code> <strong>取余</strong> 后的结果。</p><p><strong>注意</strong>，<code>XOR</code> 是按位异或操作。</p><p><strong>示例 1</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：a <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">4</span>
输出：<span class="token number">98</span>
解释：当 x <span class="token operator">=</span> <span class="token number">2</span> <span class="token function">时，</span><span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">14</span> <span class="token function">且</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span> <span class="token function">。所以，</span><span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">98</span> 。
<span class="token number">98</span> 是所有满足 <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">2n</span> <span class="token function">中</span> <span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> 的最大值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：a <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">7</span> <span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">5</span>
输出：<span class="token number">930</span>
解释：当 x <span class="token operator">=</span> <span class="token number">25</span> <span class="token function">时，</span><span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">31</span> <span class="token function">且</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">30</span> <span class="token function">。所以，</span><span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">930</span> 。
<span class="token number">930</span> 是所有满足 <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">2n</span> <span class="token function">中</span> <span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> 的最大值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span>
输出：<span class="token number">12</span>
解释： 当 x <span class="token operator">=</span> <span class="token number">5</span> <span class="token function">时，</span><span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token function">且</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token function">。所以，</span><span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">12</span> 。
<span class="token number">12</span> 是所有满足 <span class="token number">0</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;</span> <span class="token number">2n</span> <span class="token function">中</span> <span class="token punctuation">(</span>a <span class="token constant">XOR</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>b <span class="token constant">XOR</span> x<span class="token punctuation">)</span> 的最大值。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong>：</p><ul><li><code>0 &lt;= a, b &lt; 250</code></li><li><code>0 &lt;= n &lt;= 50</code></li></ul><blockquote><p>思路：</p><p>​ 如果a, b 同位都是0，则异或后为1能使结果更大，如果都是1，也是同理。如果1个是0，1个是1，则需要进行讨论，但是可以发现1的个数是不变的，所以最终结果a + b是一个定值，根据均值定理，基本不等式，a 和 b 越接近，他们的乘积越大。分高位和低为分别进行处理。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 如果a, b 同位都是0，则异或后为1能使结果更大，如果都是1，也是同理。如果1个是0，1个是1，则需要进行讨论，
     * 但是可以发现1的个数是不变的，所以最终结果a + b是一个定值，
     * 根据均值定理，基本不等式，a 和 b 越接近，他们的乘积越大
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumXorProduct</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 保证 a &gt;= b</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> temp <span class="token operator">=</span> b<span class="token punctuation">;</span>
            b <span class="token operator">=</span> a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取最大的能异或改变的值mask</span>
        <span class="token keyword">long</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1e9</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取高位，即不被mask异或影响的部分</span>
        <span class="token keyword">long</span> ax <span class="token operator">=</span> a <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>mask<span class="token punctuation">)</span><span class="token punctuation">,</span> bx <span class="token operator">=</span> b <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取低位</span>
        a <span class="token operator">&amp;=</span> mask<span class="token punctuation">;</span>
        b <span class="token operator">&amp;=</span> mask<span class="token punctuation">;</span>
        <span class="token comment">// 计算a,b同位不相同的位，保存到left中，1表示位不同，0表示相同，相同部分保存到one中，直接加到结果中</span>
        <span class="token keyword">long</span> left <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">,</span> one <span class="token operator">=</span> left <span class="token operator">^</span> mask<span class="token punctuation">;</span>
        ax <span class="token operator">|=</span> one<span class="token punctuation">;</span>
        bx <span class="token operator">|=</span> one<span class="token punctuation">;</span>
        <span class="token comment">// 均值定理，使两个数尽可能相等，如果高位相等，则最高位的1给一个数，其余位的1给另一个数，如果a &gt; b，则把所有的1都给b</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ax <span class="token operator">==</span> bx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> highBit <span class="token operator">=</span> <span class="token number">1L</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">63</span> <span class="token operator">-</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">numberOfLeadingZeros</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ax <span class="token operator">|=</span> highBit<span class="token punctuation">;</span>
            left <span class="token operator">^=</span> highBit<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 无论是a = b, 还是a &gt; b, 剩余的1都给b</span>
        bx <span class="token operator">|=</span> left<span class="token punctuation">;</span>
        <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ax <span class="token operator">%</span> mod<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>bx <span class="token operator">%</span> mod<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,14);function $s(Qs,na){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,k,n("p",null,[s("程序中的所有数在计算机内存中都是以二进制的形式"),n("a",d,[s("储存"),p(a)]),s("的。位运算就是直接对整数在内存中的二进制位进行"),n("a",m,[s("操作"),p(a)]),s("。比如，and 运算本来是一个逻辑"),n("a",v,[s("运算符"),p(a)]),s("，但整数与整数之间也可以进行 and 运算。举个例子，6 的二进制是 110，11 的二进制是 1011，那么 6 and 11 的结果就是 2，它是二进制对应位进行逻辑运算的结果（0 表示 False，1 表示 True，空位都当 0 处理）。")]),b,n("h4",g,[h,s(),n("a",y,[s("89. 格雷编码"),p(a)])]),w,n("h4",f,[x,s(),n("a",j,[s("67. 二进制求和"),p(a)])]),_,n("h4",q,[S,s(),n("a",I,[s("338. 比特位计数"),p(a)])]),A,n("h4",L,[O,s(),n("a",B,[s("342. 4 的幂"),p(a)])]),z,n("h4",M,[E,s(),n("a",R,[s("405. 数字转换为十六进制数"),p(a)])]),n("p",null,[s("给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用 "),n("a",X,[s("补码运算"),p(a)]),s(" 方法。")]),C,n("h4",D,[H,s(),n("a",N,[s("190. 颠倒二进制位"),p(a)])]),T,n("h4",V,[G,s(),n("a",Z,[s("191. 位 1 的个数"),p(a)])]),n("p",null,[s("编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为"),n("a",F,[s("汉明重量"),p(a)]),s("）。")]),P,n("h4",J,[K,s(),n("a",U,[s("476. 数字的补数"),p(a)])]),W,n("h4",Y,[$,s(),n("a",Q,[s("231. 2 的幂"),p(a)])]),nn,n("h4",sn,[an,s(),n("a",pn,[s("326. 3 的幂"),p(a)])]),tn,n("h4",en,[on,s(),n("a",cn,[s("318. 最大单词长度乘积"),p(a)])]),ln,n("h4",un,[rn,s(),n("a",kn,[s("421. 数组中两个数的最大异或值"),p(a)])]),dn,n("h4",mn,[vn,s(),n("a",bn,[s("461. 汉明距离"),p(a)])]),n("p",null,[s("两个整数之间的 "),n("a",gn,[s("汉明距离"),p(a)]),s(" 指的是这两个数字对应二进制位不同的位置的数目。")]),hn,n("h4",yn,[wn,s(),n("a",fn,[s("477. 汉明距离总和"),p(a)])]),n("p",null,[s("两个整数的 "),n("a",xn,[s("汉明距离"),p(a)]),s(" 指的是这两个数字的二进制数对应位不同的数量。")]),jn,n("h4",_n,[qn,s(),n("a",Sn,[s("371. 两整数之和"),p(a)])]),In,n("h4",An,[Ln,s(),n("a",On,[s("526. 优美的排列"),p(a)])]),Bn,n("h4",zn,[Mn,s(),n("a",En,[s("1711. 大餐计数"),p(a)])]),Rn,n("h4",Xn,[Cn,s(),n("a",Dn,[s("1178. 猜字谜"),p(a)])]),Hn,n("h4",Nn,[Tn,s(),n("a",Vn,[s("2275. 按位与结果大于零的最长组合"),p(a)])]),Gn,n("h4",Zn,[Fn,s(),n("a",Pn,[s("2401. 最长优雅子数组"),p(a)])]),Jn,n("h4",Kn,[Un,s(),n("a",Wn,[s("2411. 按位或最大的最小子数组长度"),p(a)])]),Yn,n("h4",$n,[Qn,s(),n("a",ns,[s("2568. 最小无法得到的或值"),p(a)])]),ss,n("h4",as,[ps,s(),n("a",ts,[s("2575. 找出字符串的可整除数组"),p(a)])]),es,os,cs,n("h4",ls,[is,s(),n("a",us,[s("540. 有序数组中的单一元素"),p(a)])]),rs,n("h4",ks,[ds,s(),n("a",ms,[s("136. 只出现一次的数字"),p(a)])]),vs,n("h4",bs,[gs,s(),n("a",hs,[s("137. 只出现一次的数字 II"),p(a)])]),ys,n("h4",ws,[fs,s(),n("a",xs,[s("260. 只出现一次的数字 III"),p(a)])]),js,n("h4",_s,[qs,s(),n("a",Ss,[s("78. 子集"),p(a)])]),Is,As,Ls,n("h4",Os,[Bs,s(),n("a",zs,[s("46. 全排列"),p(a)])]),Ms,n("h4",Es,[Rs,s(),n("a",Xs,[s("1125. 最小的必要团队"),p(a)])]),Cs,Ds,Hs,n("h4",Ns,[Ts,s(),n("a",Vs,[s("77. 组合"),p(a)])]),Gs,n("h4",Zs,[Fs,s(),n("a",Ps,[s("2397. 被列覆盖的最多行数"),p(a)])]),Js,n("h4",Ks,[Us,s(),n("a",Ws,[s("2939. 最大异或乘积"),p(a)])]),Ys])}const aa=e(i,[["render",$s],["__file","bit.html.vue"]]);export{aa as default};
