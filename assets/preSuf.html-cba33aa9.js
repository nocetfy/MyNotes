import{_ as o,H as t,X as c,Y as l,Z as n,a0 as s,a1 as e,$ as p}from"./framework-47f15ee6.js";const r={},u=n("h1",{id:"前后缀分解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前后缀分解","aria-hidden":"true"},"#"),s(" 前后缀分解")],-1),i=n("p",null,"[toc]",-1),d=n("h2",{id:"题目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目","aria-hidden":"true"},"#"),s(" 题目")],-1),k={id:"_42-接雨水",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_42-接雨水","aria-hidden":"true"},"#",-1),b={href:"https://leetcode.cn/problems/trapping-rain-water/submissions/395333595/",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/rainwatertrap-20231204014304900.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">6</span>
解释：上面是由数组 <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 表示的高度图，在这种情况下，可以接 <span class="token number">6</span> 个单位的雨水（蓝色部分表示雨水）。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10^4</code></li><li><code>0 &lt;= height[i] &lt;= 10^5</code></li></ul><blockquote><p>思路：</p><p>​ 前后缀分解，分别得到从前面到当前点的最长边，和从后面到当前点的最长边，根据木桶原理，较短的那个就是木桶高度，再减去木桶自身的高度，则可得到当前这一个桶的乘水量。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> length <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> sufMax <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        preMax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        sufMax<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> height<span class="token punctuation">[</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            preMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>preMax<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            sufMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>sufMax<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>preMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> sufMax<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,11),g={id:"_238-除自身以外数组的乘积",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_238-除自身以外数组的乘积","aria-hidden":"true"},"#",-1),_={href:"https://leetcode.cn/problems/product-of-array-except-self/",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>给你一个整数数组 <code>nums</code>，返回 数组 <code>answer</code> ，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除 <code>nums[i]</code> 之外其余各元素的乘积。</p><p>题目数据 <strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内。</p><p>请 **不要使用除法，**且在 <code>O(*n*)</code> 时间复杂度内完成此题。</p><p><strong>示例 1:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">输入</span><span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^5</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li><strong>保证</strong> 数组 <code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32 位</strong> 整数范围内</li></ul><p>**进阶：**你可以在 <code>O(1)</code> 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 <strong>不被视为</strong> 额外空间。）</p><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,13),q={id:"_1653-使字符串平衡的最少删除次数",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#_1653-使字符串平衡的最少删除次数","aria-hidden":"true"},"#",-1),f={href:"https://leetcode.cn/problems/minimum-deletions-to-make-string-balanced/",target:"_blank",rel:"noopener noreferrer"},y=p(`<p>给你一个字符串 <code>s</code> ，它仅包含字符 <code>&#39;a&#39;</code> 和 <code>&#39;b&#39;</code> 。</p><p>你可以删除 <code>s</code> 中任意数目的字符，使得 <code>s</code> <strong>平衡</strong> 。当不存在下标对 <code>(i,j)</code> 满足 <code>i &lt; j</code> ，且 <code>s[i] = &#39;b&#39;</code> 的同时 <code>s[j]= &#39;a&#39;</code> ，此时认为 <code>s</code> 是 <strong>平衡</strong> 的。</p><p>请你返回使 <code>s</code> <strong>平衡</strong> 的 <strong>最少</strong> 删除次数。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;aababbab&quot;</span>
输出：<span class="token number">2</span>
解释：你可以选择以下任意一种方案：
下标从 <span class="token number">0</span> 开始，删除第 <span class="token number">2</span> 和第 <span class="token number">6</span> 个字符（<span class="token string">&quot;aababbab&quot;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&quot;aaabbb&quot;</span>），
下标从 <span class="token number">0</span> 开始，删除第 <span class="token number">3</span> 和第 <span class="token number">6</span> 个字符（<span class="token string">&quot;aababbab&quot;</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token string">&quot;aabbbb&quot;</span>）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;bbaaaaabb&quot;</span>
输出：<span class="token number">2</span>
解释：唯一的最优解是删除最前面两个字符。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^5</code></li><li><code>s[i]</code> 要么是 <code>&#39;a&#39;</code> 要么是 <code>&#39;b&#39;</code> 。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,12),w={id:"_1930-长度为-3-的不同回文子序列",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#_1930-长度为-3-的不同回文子序列","aria-hidden":"true"},"#",-1),N={href:"https://leetcode.cn/problems/unique-length-3-palindromic-subsequences/",target:"_blank",rel:"noopener noreferrer"},H=p(`<p>给你一个字符串 <code>s</code> ，返回 <code>s</code> 中 <strong>长度为 3</strong> 的<strong>不同回文子序列</strong> 的个数。</p><p>即便存在多种方法来构建相同的子序列，但相同的子序列只计数一次。</p><p><strong>回文</strong> 是正着读和反着读一样的字符串。</p><p><strong>子序列</strong> 是由原字符串删除其中部分字符（也可以不删除）且不改变剩余字符之间相对顺序形成的一个新字符串。</p><ul><li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;***a\\***b***c\\***d***e\\***&quot;</code> 的一个子序列。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;aabca&quot;</span>
输出：<span class="token number">3</span>
解释：长度为 <span class="token number">3</span> 的 <span class="token number">3</span> 个回文子序列分别是：
<span class="token operator">-</span> <span class="token string">&quot;aba&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;aabca&quot;</span> 的子序列<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token string">&quot;aaa&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;aabca&quot;</span> 的子序列<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token string">&quot;aca&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;aabca&quot;</span> 的子序列<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;adc&quot;</span>
输出：<span class="token number">0</span>
解释：<span class="token string">&quot;adc&quot;</span> 不存在长度为 <span class="token number">3</span> 的回文子序列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;bbcbaba&quot;</span>
输出：<span class="token number">4</span>
解释：长度为 <span class="token number">3</span> 的 <span class="token number">4</span> 个回文子序列分别是：
<span class="token operator">-</span> <span class="token string">&quot;bbb&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;bbcbaba&quot;</span> 的子序列<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token string">&quot;bcb&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;bbcbaba&quot;</span> 的子序列<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token string">&quot;bab&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;bbcbaba&quot;</span> 的子序列<span class="token punctuation">)</span>
<span class="token operator">-</span> <span class="token string">&quot;aba&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;bbcbaba&quot;</span> 的子序列<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>3 &lt;= s.length &lt;= 10^5</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,16),Y={id:"_2256-最小平均差",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#_2256-最小平均差","aria-hidden":"true"},"#",-1),z={href:"https://leetcode.cn/problems/minimum-average-difference/",target:"_blank",rel:"noopener noreferrer"},S=p(`<p>给你一个下标从 <strong>0</strong> 开始长度为 <code>n</code> 的整数数组 <code>nums</code> 。</p><p>下标 <code>i</code> 处的 <strong>平均差</strong> 指的是 <code>nums</code> 中 <strong>前</strong> <code>i + 1</code> 个元素平均值和 <strong>后</strong> <code>n - i - 1</code> 个元素平均值的 <strong>绝对差</strong> 。两个平均值都需要 <strong>向下取整</strong> 到最近的整数。</p><p>请你返回产生 <strong>最小平均差</strong> 的下标。如果有多个下标最小平均差相等，请你返回 <strong>最小</strong> 的一个下标。</p><p><strong>注意：</strong></p><ul><li>两个数的 <strong>绝对差</strong> 是两者差的绝对值。</li><li><code>n</code> 个元素的平均值是 <code>n</code> 个元素之 <strong>和</strong> 除以（整数除法） <code>n</code> 。</li><li><code>0</code> 个元素的平均值视为 <code>0</code> 。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">3</span>
解释：
<span class="token operator">-</span> 下标 <span class="token number">0</span> 处的平均差为：<span class="token operator">|</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">2</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">25</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">3</span> 。
<span class="token operator">-</span> 下标 <span class="token number">1</span> 处的平均差为：<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">7</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">20</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">2</span> 。
<span class="token operator">-</span> 下标 <span class="token number">2</span> 处的平均差为：<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">10</span> <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token number">17</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">2</span> 。
<span class="token operator">-</span> 下标 <span class="token number">3</span> 处的平均差为：<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">19</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">0</span> 。 
<span class="token operator">-</span> 下标 <span class="token number">4</span> 处的平均差为：<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">1</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">24</span> <span class="token operator">/</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">/</span> <span class="token number">1</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">1</span> 。
<span class="token operator">-</span> 下标 <span class="token number">5</span> 处的平均差为：<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">27</span> <span class="token operator">/</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">4</span> 。
下标 <span class="token number">3</span> 处的平均差为最小平均差，所以返回 <span class="token number">3</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
解释：
唯一的下标是 <span class="token number">0</span> ，所以我们返回 <span class="token number">0</span> 。
下标 <span class="token number">0</span> 处的平均差为：<span class="token operator">|</span><span class="token number">0</span> <span class="token operator">/</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token operator">|</span><span class="token number">0</span> <span class="token operator">-</span> <span class="token number">0</span><span class="token operator">|</span> <span class="token operator">=</span> <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,14),V={id:"_2483-商店的最少代价",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_2483-商店的最少代价","aria-hidden":"true"},"#",-1),E={href:"https://leetcode.cn/problems/minimum-penalty-for-a-shop/",target:"_blank",rel:"noopener noreferrer"},L=p(`<p>给你一个顾客访问商店的日志，用一个下标从 <strong>0</strong> 开始且只包含字符 <code>&#39;N&#39;</code> 和 <code>&#39;Y&#39;</code> 的字符串 <code>customers</code> 表示：</p><ul><li>如果第 <code>i</code> 个字符是 <code>&#39;Y&#39;</code> ，它表示第 <code>i</code> 小时有顾客到达。</li><li>如果第 <code>i</code> 个字符是 <code>&#39;N&#39;</code> ，它表示第 <code>i</code> 小时没有顾客到达。</li></ul><p>如果商店在第 <code>j</code> 小时关门（<code>0 &lt;= j &lt;= n</code>），代价按如下方式计算：</p><ul><li>在开门期间，如果某一个小时没有顾客到达，代价增加 <code>1</code> 。</li><li>在关门期间，如果某一个小时有顾客到达，代价增加 <code>1</code> 。</li></ul><p>请你返回在确保代价 <strong>最小</strong> 的前提下，商店的 <strong>最早</strong> 关门时间。</p><p>注意，商店在第 <code>j</code> 小时关门表示在第 <code>j</code> 小时以及之后商店处于关门状态。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：customers <span class="token operator">=</span> <span class="token string">&quot;YYNY&quot;</span>
输出：<span class="token number">2</span>
解释：
<span class="token operator">-</span> 第 <span class="token number">0</span> 小时关门，总共 <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> 代价。
<span class="token operator">-</span> 第 <span class="token number">1</span> 小时关门，总共 <span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 代价。
<span class="token operator">-</span> 第 <span class="token number">2</span> 小时关门，总共 <span class="token number">0</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> 代价。
<span class="token operator">-</span> 第 <span class="token number">3</span> 小时关门，总共 <span class="token number">0</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 代价。
<span class="token operator">-</span> 第 <span class="token number">4</span> 小时关门，总共 <span class="token number">0</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1</span> 代价。
在第 <span class="token number">2</span> 或第 <span class="token number">4</span> 小时关门代价都最小。由于第 <span class="token number">2</span> 小时更早，所以最优关门时间是 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：customers <span class="token operator">=</span> <span class="token string">&quot;NNNNN&quot;</span>
输出：<span class="token number">0</span>
解释：最优关门时间是 <span class="token number">0</span> ，因为自始至终没有顾客到达。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：customers <span class="token operator">=</span> <span class="token string">&quot;YYYY&quot;</span>
输出：<span class="token number">4</span>
解释：最优关门时间是 <span class="token number">4</span> ，因为每一小时均有顾客到达。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= customers.length &lt;= 10^5</code></li><li><code>customers</code> 只包含字符 <code>&#39;Y&#39;</code> 和 <code>&#39;N&#39;</code> 。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,17),O={id:"_2420-找到所有好下标",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#_2420-找到所有好下标","aria-hidden":"true"},"#",-1),T={href:"https://leetcode.cn/problems/find-all-good-indices/",target:"_blank",rel:"noopener noreferrer"},X=p(`<p>给你一个大小为 <code>n</code> 下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和一个正整数 <code>k</code> 。</p><p>对于 <code>k &lt;= i &lt; n - k</code> 之间的一个下标 <code>i</code> ，如果它满足以下条件，我们就称它为一个 <strong>好</strong> 下标：</p><ul><li>下标 <code>i</code> <strong>之前</strong> 的 <code>k</code> 个元素是 <strong>非递增的</strong> 。</li><li>下标 <code>i</code> <strong>之后</strong> 的 <code>k</code> 个元素是 <strong>非递减的</strong> 。</li></ul><p>按 <strong>升序</strong> 返回所有好下标。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
解释：数组中有两个好下标：
<span class="token operator">-</span> 下标 <span class="token number">2</span> 。子数组 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 是非递增的，子数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> 是非递减的。
<span class="token operator">-</span> 下标 <span class="token number">3</span> 。子数组 <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 是非递增的，子数组 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> 是非递减的。
注意，下标 <span class="token number">4</span> 不是好下标，因为 <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> 不是非递减的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token punctuation">[</span><span class="token punctuation">]</span>
解释：数组中没有好下标。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>3 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^6</code></li><li><code>1 &lt;= k &lt;= n / 2</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,13),Z={id:"_2167-移除所有载有违禁货物车厢所需的最少时间",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#_2167-移除所有载有违禁货物车厢所需的最少时间","aria-hidden":"true"},"#",-1),A={href:"https://leetcode.cn/problems/minimum-time-to-remove-all-cars-containing-illegal-goods/",target:"_blank",rel:"noopener noreferrer"},D=p(`<p>给你一个下标从 <strong>0</strong> 开始的二进制字符串 <code>s</code> ，表示一个列车车厢序列。<code>s[i] = &#39;0&#39;</code> 表示第 <code>i</code> 节车厢 <strong>不</strong> 含违禁货物，而 <code>s[i] = &#39;1&#39;</code> 表示第 <code>i</code> 节车厢含违禁货物。</p><p>作为列车长，你需要清理掉所有载有违禁货物的车厢。你可以不限次数执行下述三种操作中的任意一个：</p><ol><li>从列车 <strong>左</strong> 端移除一节车厢（即移除 <code>s[0]</code>），用去 1 单位时间。</li><li>从列车 <strong>右</strong> 端移除一节车厢（即移除 <code>s[s.length - 1]</code>），用去 1 单位时间。</li><li>从列车车厢序列的 <strong>任意位置</strong> 移除一节车厢，用去 2 单位时间。</li></ol><p>返回移除所有载有违禁货物车厢所需要的 <strong>最少</strong> 单位时间数。</p><p>注意，空的列车车厢序列视为没有车厢含违禁货物。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;1100101&quot;</span>
输出：<span class="token number">5</span>
解释：
一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 从左端移除一节车厢 <span class="token number">2</span> 次。所用时间是 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
<span class="token operator">-</span> 从右端移除一节车厢 <span class="token number">1</span> 次。所用时间是 <span class="token number">1</span> 。
<span class="token operator">-</span> 移除序列中间位置载有违禁货物的车厢。所用时间是 <span class="token number">2</span> 。
总时间是 <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">5</span> 。

一种替代方法是：
<span class="token operator">-</span> 从左端移除一节车厢 <span class="token number">2</span> 次。所用时间是 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
<span class="token operator">-</span> 从右端移除一节车厢 <span class="token number">3</span> 次。所用时间是 <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> 。
总时间也是 <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">5</span> 。

<span class="token number">5</span> 是移除所有载有违禁货物的车厢所需要的最少单位时间数。
没有其他方法能够用更少的时间移除这些车厢。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;0010&quot;</span>
输出：<span class="token number">2</span>
解释：
一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 从左端移除一节车厢 <span class="token number">3</span> 次。所用时间是 <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> 。
总时间是 <span class="token number">3.</span>

另一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 移除序列中间位置载有违禁货物的车厢。所用时间是 <span class="token number">2</span> 。
总时间是 <span class="token number">2.</span>

另一种从序列中移除所有载有违禁货物的车厢的方法是：
<span class="token operator">-</span> 从右端移除一节车厢 <span class="token number">2</span> 次。所用时间是 <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span> 。
总时间是 <span class="token number">2.</span>

<span class="token number">2</span> 是移除所有载有违禁货物的车厢所需要的最少单位时间数。
没有其他方法能够用更少的时间移除这些车厢。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 10^5</code></li><li><code>s[i]</code> 为 <code>&#39;0&#39;</code> 或 <code>&#39;1&#39;</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),F={id:"_2484-统计回文子序列数目",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#_2484-统计回文子序列数目","aria-hidden":"true"},"#",-1),J={href:"https://leetcode.cn/problems/count-palindromic-subsequences/",target:"_blank",rel:"noopener noreferrer"},K=p(`<p>给你数字字符串 <code>s</code> ，请你返回 <code>s</code> 中长度为 <code>5</code> 的 <strong>回文子序列</strong> 数目。由于答案可能很大，请你将答案对 <code>109 + 7</code> <strong>取余</strong> 后返回。</p><p><strong>提示：</strong></p><ul><li>如果一个字符串从前往后和从后往前读相同，那么它是 <strong>回文字符串</strong> 。</li><li>子序列是一个字符串中删除若干个字符后，不改变字符顺序，剩余字符构成的字符串。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;103301&quot;</span>
输出：<span class="token number">2</span>
解释：
总共有 <span class="token number">6</span> 长度为 <span class="token number">5</span> 的子序列：<span class="token string">&quot;10330&quot;</span> ，<span class="token string">&quot;10331&quot;</span> ，<span class="token string">&quot;10301&quot;</span> ，<span class="token string">&quot;10301&quot;</span> ，<span class="token string">&quot;13301&quot;</span> ，<span class="token string">&quot;03301&quot;</span> 。
它们中有两个（都是 <span class="token string">&quot;10301&quot;</span>）是回文的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;0000000&quot;</span>
输出：<span class="token number">21</span>
解释：所有 <span class="token number">21</span> 个长度为 <span class="token number">5</span> 的子序列都是 <span class="token string">&quot;00000&quot;</span> ，都是回文的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;9999900000&quot;</span>
输出：<span class="token number">2</span>
解释：仅有的两个回文子序列是 <span class="token string">&quot;99999&quot;</span> 和 <span class="token string">&quot;00000&quot;</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 只包含数字字符。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),P={id:"_2552-统计上升四元组",tabindex:"-1"},Q=n("a",{class:"header-anchor",href:"#_2552-统计上升四元组","aria-hidden":"true"},"#",-1),R={href:"https://leetcode.cn/problems/count-increasing-quadruplets/",target:"_blank",rel:"noopener noreferrer"},U=p(`<p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，它包含 <code>1</code> 到 <code>n</code> 的所有数字，请你返回上升四元组的数目。</p><p>如果一个四元组 <code>(i, j, k, l)</code> 满足以下条件，我们称它是上升的：</p><ul><li><code>0 &lt;= i &lt; j &lt; k &lt; l &lt; n</code> 且</li><li><code>nums[i] &lt; nums[k] &lt; nums[j] &lt; nums[l]</code> 。</li></ul><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
输出：<span class="token number">2</span>
解释：
<span class="token operator">-</span> 当 i <span class="token operator">=</span> <span class="token number">0</span> ，j <span class="token operator">=</span> <span class="token number">1</span> ，k <span class="token operator">=</span> <span class="token number">2</span> 且 l <span class="token operator">=</span> <span class="token number">3</span> 时，有 nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> 。
<span class="token operator">-</span> 当 i <span class="token operator">=</span> <span class="token number">0</span> ，j <span class="token operator">=</span> <span class="token number">1</span> ，k <span class="token operator">=</span> <span class="token number">2</span> 且 l <span class="token operator">=</span> <span class="token number">4</span> 时，有 nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> 。
没有其他的四元组，所以我们返回 <span class="token number">2</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
解释：只存在一个四元组 i <span class="token operator">=</span> <span class="token number">0</span> ，j <span class="token operator">=</span> <span class="token number">1</span> ，k <span class="token operator">=</span> <span class="token number">2</span> ，l <span class="token operator">=</span> <span class="token number">3</span> ，但是 nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> ，所以我们返回 <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>4 &lt;= nums.length &lt;= 4000</code></li><li><code>1 &lt;= nums[i] &lt;= nums.length</code></li><li><code>nums</code> 中所有数字 <strong>互不相同</strong> ，<code>nums</code> 是一个排列。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,12),W={id:"_2565-最少得分子序列",tabindex:"-1"},nn=n("a",{class:"header-anchor",href:"#_2565-最少得分子序列","aria-hidden":"true"},"#",-1),sn={href:"https://leetcode.cn/problems/subsequence-with-the-minimum-score/",target:"_blank",rel:"noopener noreferrer"},an=p(`<p>给你两个字符串 <code>s</code> 和 <code>t</code> 。</p><p>你可以从字符串 <code>t</code> 中删除任意数目的字符。</p><p>如果没有从字符串 <code>t</code> 中删除字符，那么得分为 <code>0</code> ，否则：</p><ul><li>令 <code>left</code> 为删除字符中的最小下标。</li><li>令 <code>right</code> 为删除字符中的最大下标。</li></ul><p>字符串的得分为 <code>right - left + 1</code> 。</p><p>请你返回使 <code>t</code> 成为 <code>s</code> 子序列的最小得分。</p><p>一个字符串的 <strong>子序列</strong> 是从原字符串中删除一些字符后（也可以一个也不删除），剩余字符不改变顺序得到的字符串。（比方说 <code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但是 <code>&quot;aec&quot;</code> 不是）。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;abacaba&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token string">&quot;bzaa&quot;</span>
输出：<span class="token number">1</span>
解释：这个例子中，我们删除下标 <span class="token number">1</span> 处的字符 <span class="token string">&quot;z&quot;</span> （下标从 <span class="token number">0</span> 开始）。
字符串 t 变为 <span class="token string">&quot;baa&quot;</span> ，它是字符串 <span class="token string">&quot;abacaba&quot;</span> 的子序列，得分为 <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> 。
<span class="token number">1</span> 是能得到的最小得分。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;cde&quot;</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token string">&quot;xyz&quot;</span>
输出：<span class="token number">3</span>
解释：这个例子中，我们将下标为 <span class="token number">0</span>， <span class="token number">1</span> 和 <span class="token number">2</span> 处的字符 <span class="token string">&quot;x&quot;</span> ，<span class="token string">&quot;y&quot;</span> 和 <span class="token string">&quot;z&quot;</span> 删除（下标从 <span class="token number">0</span> 开始）。
字符串变成 <span class="token string">&quot;&quot;</span> ，它是字符串 <span class="token string">&quot;cde&quot;</span> 的子序列，得分为 <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span> 。
<span class="token number">3</span> 是能得到的最小得分。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li><li><code>s</code> 和 <code>t</code> 都只包含小写英文字母。</li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,16),en={id:"_2680-最大或值",tabindex:"-1"},pn=n("a",{class:"header-anchor",href:"#_2680-最大或值","aria-hidden":"true"},"#",-1),on={href:"https://leetcode.cn/problems/maximum-or/",target:"_blank",rel:"noopener noreferrer"},tn=p(`<p>给你一个下标从 <strong>0</strong> 开始长度为 <code>n</code> 的整数数组 <code>nums</code> 和一个整数 <code>k</code> 。每一次操作中，你可以选择一个数并将它乘 <code>2</code> 。</p><p>你最多可以进行 <code>k</code> 次操作，请你返回 <code>nums[0] | nums[1] | ... | nums[n - 1]</code> 的最大值。</p><p><code>a | b</code> 表示两个整数 <code>a</code> 和 <code>b</code> 的 <strong>按位或</strong> 运算。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>
输出：<span class="token number">30</span>
解释：如果我们对下标为 <span class="token number">1</span> 的元素进行操作，新的数组为 <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span> 。此时得到最优答案为 <span class="token number">12</span> 和 <span class="token number">18</span> 的按位或运算的结果，也就是 <span class="token number">30</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>
输出：<span class="token number">35</span>
解释：如果我们对下标 <span class="token number">0</span> 处的元素进行操作，得到新数组 <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 。此时得到最优答案为 <span class="token number">32</span><span class="token operator">|</span><span class="token number">1</span><span class="token operator">|</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">35</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^9</code></li><li><code>1 &lt;= k &lt;= 15</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,12),cn={id:"_2874-有序三元组中的最大值-ii",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#_2874-有序三元组中的最大值-ii","aria-hidden":"true"},"#",-1),rn={href:"https://leetcode.cn/problems/maximum-value-of-an-ordered-triplet-ii/",target:"_blank",rel:"noopener noreferrer"},un=p(`<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。</p><p>请你从所有满足 <code>i &lt; j &lt; k</code> 的下标三元组 <code>(i, j, k)</code> 中，找出并返回下标三元组的最大值。如果所有满足条件的三元组的值都是负数，则返回 <code>0</code> 。</p><p><strong>下标三元组</strong> <code>(i, j, k)</code> 的值等于 <code>(nums[i] - nums[j]) * nums[k]</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
输出：<span class="token number">77</span>
<span class="token function">解释：下标三元组</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">的值是</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">77</span> 。
可以证明不存在值大于 <span class="token number">77</span> 的有序下标三元组。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">]</span>
输出：<span class="token number">133</span>
<span class="token function">解释：下标三元组</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token function">的值是</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">133</span> 。
可以证明不存在值大于 <span class="token number">133</span> 的有序下标三元组。 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">0</span>
<span class="token function">解释：唯一的下标三元组</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">的值是一个负数，</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span> 。因此，答案是 <span class="token number">0</span> 。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 10^5</code></li><li><code>1 &lt;= nums[i] &lt;= 10^6</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><hr>`,14),dn={id:"_2866-美丽塔-ii",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#_2866-美丽塔-ii","aria-hidden":"true"},"#",-1),mn={href:"https://leetcode.cn/problems/beautiful-towers-ii/",target:"_blank",rel:"noopener noreferrer"},bn=p(`<p>给你一个长度为 <code>n</code> 下标从 <strong>0</strong> 开始的整数数组 <code>maxHeights</code> 。</p><p>你的任务是在坐标轴上建 <code>n</code> 座塔。第 <code>i</code> 座塔的下标为 <code>i</code> ，高度为 <code>heights[i]</code> 。</p><p>如果以下条件满足，我们称这些塔是 <strong>美丽</strong> 的：</p><ol><li><code>1 &lt;= heights[i] &lt;= maxHeights[i]</code></li><li><code>heights</code> 是一个 <strong>山状</strong> 数组。</li></ol><p>如果存在下标 <code>i</code> 满足以下条件，那么我们称数组 <code>heights</code> 是一个 <strong>山状</strong> 数组：</p><ul><li>对于所有 <code>0 &lt; j &lt;= i</code> ，都有 <code>heights[j - 1] &lt;= heights[j]</code></li><li>对于所有 <code>i &lt;= k &lt; n - 1</code> ，都有 <code>heights[k + 1] &lt;= heights[k]</code></li></ul><p>请你返回满足 <strong>美丽塔</strong> 要求的方案中，<strong>高度和的最大值</strong> 。</p><p><strong>示例 1</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：maxHeights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
输出：<span class="token number">13</span>
解释：和最大的美丽塔方案为 heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> ，这是一个美丽塔方案，因为：
<span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> maxHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  
<span class="token operator">-</span> heights 是个山状数组，峰值在 i <span class="token operator">=</span> <span class="token number">0</span> 处。
<span class="token number">13</span> 是所有美丽塔方案中的最大高度和。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：maxHeights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>
输出：<span class="token number">22</span>
解释： 和最大的美丽塔方案为 heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> ，这是一个美丽塔方案，因为：
<span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> maxHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token operator">-</span> heights 是个山状数组，峰值在 i <span class="token operator">=</span> <span class="token number">3</span> 处。
<span class="token number">22</span> 是所有美丽塔方案中的最大高度和。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3</strong>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：maxHeights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
输出：<span class="token number">18</span>
解释：和最大的美丽塔方案为 heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> ，这是一个美丽塔方案，因为：
<span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> maxHeights<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token operator">-</span> heights 是个山状数组，最大值在 i <span class="token operator">=</span> <span class="token number">2</span> 处。
注意，在这个方案中，i <span class="token operator">=</span> <span class="token number">3</span> 也是一个峰值。
<span class="token number">18</span> 是所有美丽塔方案中的最大高度和。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= n == maxHeights &lt;= 10^5</code></li><li><code>1 &lt;= maxHeights[i] &lt;= 10^9</code></li></ul><blockquote><p>思路：</p><p>​</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>`,18);function vn(gn,hn){const a=t("ExternalLinkIcon");return c(),l("div",null,[u,i,d,n("h4",k,[m,s(),n("a",b,[s("42. 接雨水"),e(a)])]),v,n("h4",g,[h,s(),n("a",_,[s("238. 除自身以外数组的乘积"),e(a)])]),j,n("h4",q,[x,s(),n("a",f,[s("1653. 使字符串平衡的最少删除次数"),e(a)])]),y,n("h4",w,[M,s(),n("a",N,[s("1930. 长度为 3 的不同回文子序列"),e(a)])]),H,n("h4",Y,[I,s(),n("a",z,[s("2256. 最小平均差"),e(a)])]),S,n("h4",V,[B,s(),n("a",E,[s("2483. 商店的最少代价"),e(a)])]),L,n("h4",O,[C,s(),n("a",T,[s("2420. 找到所有好下标"),e(a)])]),X,n("h4",Z,[$,s(),n("a",A,[s("2167. 移除所有载有违禁货物车厢所需的最少时间"),e(a)])]),D,n("h4",F,[G,s(),n("a",J,[s("2484. 统计回文子序列数目"),e(a)])]),K,n("h4",P,[Q,s(),n("a",R,[s("2552. 统计上升四元组"),e(a)])]),U,n("h4",W,[nn,s(),n("a",sn,[s("2565. 最少得分子序列"),e(a)])]),an,n("h4",en,[pn,s(),n("a",on,[s("2680. 最大或值"),e(a)])]),tn,n("h4",cn,[ln,s(),n("a",rn,[s("2874. 有序三元组中的最大值 II"),e(a)])]),un,n("h4",dn,[kn,s(),n("a",mn,[s("2866. 美丽塔 II"),e(a)])]),bn])}const jn=o(r,[["render",vn],["__file","preSuf.html.vue"]]);export{jn as default};
