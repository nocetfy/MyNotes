const e=JSON.parse('{"key":"v-54ac0457","path":"/interview/%E6%9E%B6%E6%9E%84/%E9%AB%98%E6%80%A7%E8%83%BD.html","title":"高性能","lang":"zh-CN","frontmatter":{"description":"高性能 “N 高 N 可”，高性能、高并发、高可用、高可靠、可扩展、可维护、可用性等是后台开发耳熟能详的词了，它们中有些词在大部分情况下表达相近意思。本序列文章旨在探讨和总结后台架构设计中常用的技术和方法，并归纳成一套方法论。 前言 本文主要探讨和总结服务架构设计中高性能的技术和方法，如下图的思维导图所示，左边部分主要偏向于编程应用，右边部分偏向于组件应用，文章将按图中的内容展开。","head":[["meta",{"property":"og:url","content":"https://newzone.top/MyNotes/interview/%E6%9E%B6%E6%9E%84/%E9%AB%98%E6%80%A7%E8%83%BD.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"高性能"}],["meta",{"property":"og:description","content":"高性能 “N 高 N 可”，高性能、高并发、高可用、高可靠、可扩展、可维护、可用性等是后台开发耳熟能详的词了，它们中有些词在大部分情况下表达相近意思。本序列文章旨在探讨和总结后台架构设计中常用的技术和方法，并归纳成一套方法论。 前言 本文主要探讨和总结服务架构设计中高性能的技术和方法，如下图的思维导图所示，左边部分主要偏向于编程应用，右边部分偏向于组件应用，文章将按图中的内容展开。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"高性能\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":3,"title":"1 无锁化","slug":"_1-无锁化","link":"#_1-无锁化","children":[]},{"level":3,"title":"2 零拷贝","slug":"_2-零拷贝","link":"#_2-零拷贝","children":[]},{"level":3,"title":"3 序列化","slug":"_3-序列化","link":"#_3-序列化","children":[]},{"level":3,"title":"4 池化","slug":"_4-池化","link":"#_4-池化","children":[]},{"level":3,"title":"5 并发化","slug":"_5-并发化","link":"#_5-并发化","children":[]},{"level":3,"title":"6 异步化","slug":"_6-异步化","link":"#_6-异步化","children":[]},{"level":3,"title":"7 缓存","slug":"_7-缓存","link":"#_7-缓存","children":[]},{"level":3,"title":"8 分片","slug":"_8-分片","link":"#_8-分片","children":[]},{"level":3,"title":"9 存储","slug":"_9-存储","link":"#_9-存储","children":[]},{"level":3,"title":"10 队列","slug":"_10-队列","link":"#_10-队列","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":47.69,"words":14306},"filePathRelative":"interview/架构/高性能.md","excerpt":"<h1> 高性能</h1>\\n<blockquote>\\n<p>“N 高 N 可”，高性能、高并发、高可用、高可靠、可扩展、可维护、可用性等是后台开发耳熟能详的词了，它们中有些词在大部分情况下表达相近意思。本序列文章旨在探讨和总结后台架构设计中常用的技术和方法，并归纳成一套方法论。</p>\\n</blockquote>\\n<h3> 前言</h3>\\n<p>本文主要探讨和总结服务架构设计中高性能的技术和方法，如下图的思维导图所示，左边部分主要偏向于编程应用，右边部分偏向于组件应用，文章将按图中的内容展开。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/nocetfy/image/main/img/202308021211012-20240310203754983.jpeg\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{e as data};
