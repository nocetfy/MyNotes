import{_ as i,X as l,Y as a,$ as e}from"./framework-47f15ee6.js";const h={},r=e('<h1 id="资损防治" tabindex="-1"><a class="header-anchor" href="#资损防治" aria-hidden="true">#</a> 资损防治</h1><h2 id="风险" tabindex="-1"><a class="header-anchor" href="#风险" aria-hidden="true">#</a> 风险</h2><figure><img src="https://raw.githubusercontent.com/nocetfy/image/main/img/image-20240422205832822.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="举措" tabindex="-1"><a class="header-anchor" href="#举措" aria-hidden="true">#</a> 举措</h2><h3 id="职责分离" tabindex="-1"><a class="header-anchor" href="#职责分离" aria-hidden="true">#</a> 职责分离</h3><ol><li>软件变更与软件维护管理全过程由研发和运维角色分别承担，实现权责分离 <ul><li>审批留痕</li><li>上线平台</li><li>提单与审批复核</li></ul></li><li>密文存储</li><li>用户权限管理，研发没有服务器运维权限</li></ol><h3 id="api加固" tabindex="-1"><a class="header-anchor" href="#api加固" aria-hidden="true">#</a> API加固</h3><ol><li>通过密钥通过解决密钥泄漏风险</li><li>通过服务凭证+权限管理解决未授权访问风险</li><li>通过参数签名解决篡改风险</li><li>通过有限期或nonce解决重放风险</li></ol><h2 id="资损场景" tabindex="-1"><a class="header-anchor" href="#资损场景" aria-hidden="true">#</a> 资损场景</h2><ol><li><p>付款(资金出去)：多打款、少打款、重复打款、打款人错误、未及时到账</p></li><li><p>收款(资金进来)：多收款、少收款、重复收款、付款人错误、未及时到账</p></li><li><p>退款(含溢缴款)：重复退、多退、少退、不该退、资金来源与目标、未及时到账</p></li><li><p>息费(手续费、服务费等)：多收费、少收费、未收费却提供服务</p></li><li><p>额度：限额错误、重复扣减额度、未扣减额度、冻结未释放</p></li><li><p>交易：未收款就发货、少收款、未及时发货</p></li><li><p>风控：未拦截、多拦截。因为风控规则，风控系统缺陷，或者上游参数传递错误等</p></li><li><p>用户福利(红包、中奖、优惠券)：次数超限、优惠太大、覆盖范围不正确</p></li><li><p>用户交互：错误的或有误导性的短信或者邮件、文案，重复发送</p></li><li><p>第三方收费服务：多使用了服务、使用方式不正确，如压测线上收费服务</p></li></ol><h2 id="资损点" tabindex="-1"><a class="header-anchor" href="#资损点" aria-hidden="true">#</a> 资损点</h2><h3 id="错误码" tabindex="-1"><a class="header-anchor" href="#错误码" aria-hidden="true">#</a> 错误码</h3><ol><li>多层嵌套错误码需要判断</li><li>正确映射错误码，不可望文生义，成功，失败，未知</li><li>谨防错误码透传</li></ol><h3 id="幂等性" tabindex="-1"><a class="header-anchor" href="#幂等性" aria-hidden="true">#</a> 幂等性</h3><ol><li><p>调用方：幂等id唯一性控制、幂等相关错误码正确处理</p></li><li><p>被调方：命中幂等性，返回明确的幂等性错误码。注意请求过程中，被打断，调用方重试情况的幂等性控制</p></li></ol><h4 id="坑点" tabindex="-1"><a class="header-anchor" href="#坑点" aria-hidden="true">#</a> 坑点</h4><ol><li>保障所有场景，所有入参组合下都生效</li><li>命中幂等，返回幂等相关错误码</li><li>调用方保障id一致</li><li>设计支持拓展，支持重入</li></ol><h3 id="防并发" tabindex="-1"><a class="header-anchor" href="#防并发" aria-hidden="true">#</a> 防并发</h3><ol><li>先锁后判断，再处理</li><li>全局分布式锁</li><li>数据库唯一键限制</li><li>延迟请求，如补单</li></ol><h3 id="一致性" tabindex="-1"><a class="header-anchor" href="#一致性" aria-hidden="true">#</a> 一致性</h3><h4 id="一致性保障手段" tabindex="-1"><a class="header-anchor" href="#一致性保障手段" aria-hidden="true">#</a> 一致性保障手段</h4><ol><li><p>锁(本地锁、分布式锁)</p><ul><li>一锁，二读，三写</li></ul></li><li><p>事务(单机事务，分布式事务)</p><ul><li>慎用嵌套事务</li><li>事务慎用无法回滚操作，如网络RPC、异步线程、写缓存</li></ul></li><li><p>查询 + 补偿模式(如查单接口就是查询模式)</p><ul><li><p>错误码判断，需要确保分类正确</p></li><li><p>存在重复补偿，保障幂等</p></li></ul></li><li><p>异步补偿模式 (定时任务、消息中间件)</p><ul><li>并发不可避免</li><li>存在重复补偿，保障幂等</li></ul></li><li><p>定期校对模式 (对账)</p></li></ol><h4 id="常见坑" tabindex="-1"><a class="header-anchor" href="#常见坑" aria-hidden="true">#</a> 常见坑</h4><ol><li><p>主从延迟</p><ul><li>不合理的系统设计会扩大主从延迟的风险</li><li>系统设计尽量规避主从延迟风险(不能写了立马查)</li></ul></li><li><p>回滚</p><ul><li>不是所以事情都可以回滚</li><li>第三方服务、另一个线程无法回滚</li></ul></li><li><p>无法保准上下游一致性</p><ul><li>没有收到应答，无法知道下游模块状态</li><li>即使收到应答，也不能保证一致</li></ul></li><li><p>异步消息的延迟、丢失和重复</p></li><li><p>程序中断</p></li><li><p>嵌套事务，对声明式事务，未深入理解，避免嵌套</p></li><li><p>上下游数据一致性</p></li></ol><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><ol><li>慎用默认值，对不明确错误进行报警、人工处理与状态推进</li><li>注意0、false、null等默认值</li></ol><h3 id="兼容性" tabindex="-1"><a class="header-anchor" href="#兼容性" aria-hidden="true">#</a> 兼容性</h3><ol><li>数据迁移 <ul><li>关注唯一id一致性，新增字段是否做了兼容</li><li>更换数据库，分析不同DB差异，如数值类型精度</li></ul></li><li>系统升级 <ul><li>升级切换过程中若无法保证状态的准确性，则拒绝依赖状态的业务操作，如账户余额</li><li>关注升级切换过程中存在的读写数据、服务依赖</li><li>严格对比输入输出，对不同的输入输出做兼容和联调</li><li>分析多种场景下(新/老数据/业务 两两组合)业务处理是否符合预期</li></ul></li><li>新增运营活动 <ul><li>新增运营活动是否会影响老活动的资格认定、奖品发放</li><li>新增产品是否应该享受历史活动资格</li></ul></li></ol><h3 id="数据篡改" tabindex="-1"><a class="header-anchor" href="#数据篡改" aria-hidden="true">#</a> 数据篡改</h3><p>业务上下文，session，线程变量被篡改、表单信息被篡改</p><ol><li>支付数据经过外网传输参数，需要有防篡改机制(签名、加密)</li><li>多重校验控制，服务不信赖session，url的值，关键数据(账户、金额、状态)等需做二次校验</li></ol><h3 id="金额计算" tabindex="-1"><a class="header-anchor" href="#金额计算" aria-hidden="true">#</a> 金额计算</h3><ol><li>统一单位</li><li>金额单位统一</li><li>计算类型统一，使用长整型或BigDecimal，防止溢出 <ul><li>防止浮点导致的不精确</li><li>防止溢出出现的负数</li><li>防止精度溢出</li></ul></li><li>存储类型，类型转换</li><li>计算顺序</li><li>中间结果</li><li>截断方式</li><li>多模块计算逻辑统一</li><li>确保依赖的数据源正确，添加校验</li></ol><h3 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机" aria-hidden="true">#</a> 状态机</h3><ol><li><p>保证终态不可逆</p></li><li><p>保证前序状态正确</p></li><li><p>保证状态机设计的合理性</p><ul><li>涉及发资源或者打款的服务要先插入一条状态是发放中/打款中的记录，而不是等法成功再写记录</li></ul></li></ol><h3 id="环境隔离" tabindex="-1"><a class="header-anchor" href="#环境隔离" aria-hidden="true">#</a> 环境隔离</h3><p>服务隔离，网段隔离，数据隔离，权限隔离，禁止线下服务调用线上服务，防止测试中资金流出。</p><hr><h2 id="保障资金安全" tabindex="-1"><a class="header-anchor" href="#保障资金安全" aria-hidden="true">#</a> 保障资金安全</h2><ol><li><p>资金安全意识宣传与考核</p><ul><li>业界重大资损事件宣传</li><li>公司资损事件宣传</li></ul></li><li><p>资损风险分析排查与测试</p><ul><li>项目中的资损风险分析与排查，资损测试</li><li>多产品线资金安全联合排查</li></ul></li><li><p>人工操作风险排查</p></li><li><p>资金对账体系排查</p><ul><li>对账完备性排查</li><li>对账运维排查</li><li>对账监控排查</li></ul></li></ol>',40),d=[r];function n(p,o){return l(),a("div",null,d)}const c=i(h,[["render",n],["__file","资损防治手段.html.vue"]]);export{c as default};
