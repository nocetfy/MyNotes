import{_ as o,X as d,Y as c,Z as e,a0 as n,a1 as t,$ as a,H as r}from"./framework-1ee2252c.js";const i={},l=e("h1",{id:"专题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#专题","aria-hidden":"true"},"#"),n(" 专题")],-1),p=e("p",null,"[toc]",-1),h=e("h2",{id:"_1的子矩阵",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1的子矩阵","aria-hidden":"true"},"#"),n(" 1的子矩阵")],-1),u=e("blockquote",null,[e("p",null,"一般可以通过单调栈来解答，有的题目可以通过前缀和将多维转为1维通过多次单调栈来解答。")],-1),_={id:"_84-柱状图中最大的矩形",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#_84-柱状图中最大的矩形","aria-hidden":"true"},"#",-1),k={href:"https://leetcode.cn/problems/largest-rectangle-in-histogram/",target:"_blank",rel:"noopener noreferrer"},m={id:"_85-最大矩形",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#_85-最大矩形","aria-hidden":"true"},"#",-1),v={href:"https://leetcode.cn/problems/maximal-rectangle/",target:"_blank",rel:"noopener noreferrer"},f={id:"_221-最大正方形",tabindex:"-1"},x=e("a",{class:"header-anchor",href:"#_221-最大正方形","aria-hidden":"true"},"#",-1),q={href:"https://leetcode.cn/problems/maximal-square/",target:"_blank",rel:"noopener noreferrer"},j={id:"_1504-统计全-1-子矩形",tabindex:"-1"},I=e("a",{class:"header-anchor",href:"#_1504-统计全-1-子矩形","aria-hidden":"true"},"#",-1),y={href:"https://leetcode.cn/problems/count-submatrices-with-all-ones/",target:"_blank",rel:"noopener noreferrer"},w={id:"_1277-统计全为-1-的正方形子矩阵",tabindex:"-1"},N=e("a",{class:"header-anchor",href:"#_1277-统计全为-1-的正方形子矩阵","aria-hidden":"true"},"#",-1),V={href:"https://leetcode.cn/problems/count-square-submatrices-with-all-ones/",target:"_blank",rel:"noopener noreferrer"},B={id:"_1727-重新排列后的最大子矩阵",tabindex:"-1"},E=e("a",{class:"header-anchor",href:"#_1727-重新排列后的最大子矩阵","aria-hidden":"true"},"#",-1),L={href:"https://leetcode.cn/problems/largest-submatrix-with-rearrangements/",target:"_blank",rel:"noopener noreferrer"},C=a('<hr><h2 id="计算器" tabindex="-1"><a class="header-anchor" href="#计算器" aria-hidden="true">#</a> 计算器</h2><blockquote><p>计算器问题可以通过将中缀表达式转换为后缀表达式，然后再计算</p></blockquote><h4 id="转换步骤" tabindex="-1"><a class="header-anchor" href="#转换步骤" aria-hidden="true">#</a> 转换步骤</h4><p>中缀表达式转后缀表达式步骤：</p><ol><li><p>初始化两个栈：</p><ul><li>运算符栈：s1</li><li>中间结果栈：s2</li></ul></li><li><p>从左到右扫描中缀表达式</p></li><li><p>遇到操作数时，将其压入 s2</p></li><li><p>遇到运算符时</p><p>比较 它 与 s1 栈顶运算符的优先级：</p><ol><li>如果 s1 为空，或者栈顶运算符号为 <code>(</code> ，则将其压入符号栈 s1</li><li>如果：优先级比栈顶运算符 <strong>高</strong>，也将其压入符号栈 s1</li><li>如果：优先级比栈顶运算符 <strong>低 或 相等</strong>，将 s1 栈顶的运算符 <strong>弹出</strong>，并压入到 s2 中</li></ol><p>再重复第 4.1 步骤，与新的栈顶运算符比较（因为 4.3 将 s1 栈顶运算符弹出了）</p><p>这里重复的步骤在实现的时候有点难以理解，下面进行解说：</p><ol><li><p>如果 <strong>s1 栈顶符号</strong> 优先级比 <strong>当前符号</strong> <strong>高或则等于</strong>，那么就将其 <strong>弹出</strong>，压入 s2 中（循环做，是只要 s1 不为空）</p><p>如果栈顶符号为 <code>(</code>，优先级是 -1，就不会弹出，就跳出循环了</p></li><li><p>跳出循环后，则将当前符号压入 s1</p></li></ol></li><li><p>遇到括号时：</p><ol><li><p>如果是左括号 <code>(</code> ：则直接压入 s1</p></li><li><p>如果是右括号 <code>)</code>：</p><p>则依次弹出 s1 栈顶的运算符，并压入 s2，直到遇到 <strong>左括号</strong> 为止，此时将这一对括号 <strong>丢弃</strong></p></li></ol></li><li><p>重复步骤 2 到 5，直到表达式最右端</p></li><li><p>将 s1 中的运算符依次弹出并压入 s2</p></li><li><p>依次弹出 s2 中的元素并输出，结果的 <strong>逆序</strong> 即为：中缀表达式转后缀表达式</p></li></ol><p>下面进行举例说明：</p><p>将中缀表达式：<code>1+((2+3)*4)-5</code> 转换为后缀表达式</p><table><thead><tr><th>扫描到的元素</th><th>s2 （栈底 -&gt; 栈顶）</th><th>s1（栈底 -&gt; 栈顶）</th><th>说明</th></tr></thead><tbody><tr><td><code>1</code></td><td><code>1</code></td><td>空</td><td>遇到操作数，将其压入 s2</td></tr><tr><td><code>+</code></td><td><code>1</code></td><td><code>+</code></td><td>s1 栈为空，将其压入 s1</td></tr><tr><td><code>(</code></td><td><code>1</code></td><td><code>+ (</code></td><td>是左括号，压入 s1</td></tr><tr><td><code>(</code></td><td><code>1</code></td><td><code>+ ( (</code></td><td>是左括号，压入 s1</td></tr><tr><td><code>2</code></td><td><code>1 2</code></td><td><code>+ ( (</code></td><td>遇到操作数，将其压入 s2</td></tr><tr><td><code>+</code></td><td><code>1 2</code></td><td><code>+ ( ( +</code></td><td>遇到操作符：与 s1 栈顶运算符比较，为 <code>(</code>，将其压入 s1</td></tr><tr><td><code>3</code></td><td><code>1 2 3</code></td><td><code>+ ( ( +</code></td><td>遇到操作数，将其压入 s2</td></tr><tr><td><code>)</code></td><td><code>1 2 3 +</code></td><td><code>+ (</code></td><td>遇到右括号：弹出 s1 中的 <code>+</code> 压入 s2 中，这里去掉这一对小括号</td></tr><tr><td><code>*</code></td><td><code>1 2 3 +</code></td><td><code>+ ( *</code></td><td>遇到操作符：与 s1 栈顶比较，为 <code>(</code>，将其压入 s1 栈</td></tr><tr><td><code>4</code></td><td><code>1 2 3 + 4</code></td><td><code>+ ( *</code></td><td>遇到操作数：将其压入 s2</td></tr><tr><td><code>)</code></td><td><code>1 2 3 + 4 *</code></td><td><code>+</code></td><td>遇到右括号：弹出 s 1 中的 <code>*</code> 压入 s2 中，这里去掉这一队小括号</td></tr><tr><td><code>-</code></td><td><code>1 2 3 + 4 * +</code></td><td><code>-</code></td><td>遇到操作符：与 s1 栈顶比较，优先级一致，将 s1 中的 <code>+</code> 弹出，并压入 s2 中</td></tr><tr><td><code>5</code></td><td><code>1 2 3 + 4 * + 5</code></td><td><code>-</code></td><td>遇到操作数：将其压入 s2</td></tr><tr><td></td><td><code>1 2 3 + 4 * + 5 -</code></td><td>空</td><td>解析完毕，将 s1 中的符号弹出并压入 s2 中</td></tr></tbody></table><p>由于 s2 是一个栈，弹出是从栈顶弹出，因此逆序后结果就是 <code>1 2 3 + 4 * + 5 -</code></p><hr>',11),H={id:"_150-逆波兰表达式求值",tabindex:"-1"},S=e("a",{class:"header-anchor",href:"#_150-逆波兰表达式求值","aria-hidden":"true"},"#",-1),T={href:"https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/",target:"_blank",rel:"noopener noreferrer"},X=e("blockquote",null,[e("p",null,"思路："),e("p",null,"​ 数字入栈，遇到操作数，取出栈顶两个元素，计算后压入栈。")],-1),Y=e("hr",null,null,-1),Z={id:"_224-基本计算器",tabindex:"-1"},$=e("a",{class:"header-anchor",href:"#_224-基本计算器","aria-hidden":"true"},"#",-1),z={href:"https://leetcode.cn/problems/basic-calculator/",target:"_blank",rel:"noopener noreferrer"},A=e("blockquote",null,[e("p",null,"思路："),e("p",null,[n("​ 本题包含负数，需要特殊处理。当运算符是"),e("code",null,"-"),n("时，进行下特殊处理，判断当前是否是第一个字符，或者前一个字符是运算符，是的话，则当前是个负数，将"),e("code",null,"0"),n("先加入后缀表达式，将"),e("code",null,"-"),n("入栈，然后继续循环。")])],-1),D=e("hr",null,null,-1),F={id:"_227-基本计算器-ii",tabindex:"-1"},G=e("a",{class:"header-anchor",href:"#_227-基本计算器-ii","aria-hidden":"true"},"#",-1),J={href:"https://leetcode.cn/problems/basic-calculator-ii/",target:"_blank",rel:"noopener noreferrer"},K=e("blockquote",null,[e("p",null,"思路："),e("p",null,"​ 本题不含括号，所以可以简化转化为中缀表达式的过程，如果遇到数字，直接保存到后缀表达式，如果是运算符，当栈为空或者栈顶运算符优先级更低时，运算符入栈。如果栈顶元素优限级更高或者相等，则把栈顶出栈加入后缀表达式。最后如果栈不为空，则依次出栈并压入后缀表达式。")],-1),M=e("hr",null,null,-1),O={id:"_772-基本计算器-iii",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#_772-基本计算器-iii","aria-hidden":"true"},"#",-1),Q={href:"https://leetcode.cn/problems/basic-calculator-iii",target:"_blank",rel:"noopener noreferrer"},R=a(`<p>实现一个基本的计算器来计算简单的表达式字符串。</p><p>表达式字符串只包含非负整数，算符 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> ，左括号 <code>(</code> 和右括号 <code>)</code> 。整数除法需要 <strong>向下截断</strong> 。</p><p>你可以假定给定的表达式总是有效的。所有的中间结果的范围均满足 <code>[-2^31, 2^31 - 1]</code> 。</p><p>**注意：**你不能使用任何将字符串作为表达式求值的内置函数，比如 <code>eval()</code> 。</p><p><strong>示例 1：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;1+1&quot;</span>
输出：<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;6-4/2&quot;</span>
输出：<span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>输入：s <span class="token operator">=</span> <span class="token string">&quot;2*(5+5*2)/3+(6/2+8)&quot;</span>
输出：<span class="token number">21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s &lt;= 10^4</code></li><li><code>s</code> 由整数、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code>、<code>&#39;/&#39;</code>、<code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 组成</li><li><code>s</code> 是一个 <strong>有效的</strong> 表达式</li></ul><hr><h2 id="大数运算" tabindex="-1"><a class="header-anchor" href="#大数运算" aria-hidden="true">#</a> 大数运算</h2><blockquote><p>见math章节</p></blockquote>`,15),U={id:"_415-字符串相加",tabindex:"-1"},W=e("a",{class:"header-anchor",href:"#_415-字符串相加","aria-hidden":"true"},"#",-1),ee={href:"https://leetcode.cn/problems/add-strings/",target:"_blank",rel:"noopener noreferrer"},ne={id:"字符串减法",tabindex:"-1"},se=e("a",{class:"header-anchor",href:"#字符串减法","aria-hidden":"true"},"#",-1),te={href:"https://www.nowcoder.com/practice/ae4d84312e384a1fa100b613f93f3fe0?tpId=196&tqId=40449&ru=/exam/oj",target:"_blank",rel:"noopener noreferrer"},ae={id:"_43-字符串相乘",tabindex:"-1"},oe=e("a",{class:"header-anchor",href:"#_43-字符串相乘","aria-hidden":"true"},"#",-1),de={href:"https://leetcode.cn/problems/multiply-strings/",target:"_blank",rel:"noopener noreferrer"},ce=e("h4",{id:"字符串除法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#字符串除法","aria-hidden":"true"},"#"),n(" 字符串除法")],-1),re=e("hr",null,null,-1),ie=e("h2",{id:"会议问题",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#会议问题","aria-hidden":"true"},"#"),n(" 会议问题")],-1),le=e("blockquote",null,[e("p",null,"会议问题类似区间合并问题，可以先对区间按左端点或右端点进行排序，用堆辅助进行运算。")],-1),pe={id:"_1353-最多可以参加的会议数目",tabindex:"-1"},he=e("a",{class:"header-anchor",href:"#_1353-最多可以参加的会议数目","aria-hidden":"true"},"#",-1),ue={href:"https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended/",target:"_blank",rel:"noopener noreferrer"},_e={id:"_1751-最多可以参加的会议数目-ii",tabindex:"-1"},be=e("a",{class:"header-anchor",href:"#_1751-最多可以参加的会议数目-ii","aria-hidden":"true"},"#",-1),ke={href:"https://leetcode.cn/problems/maximum-number-of-events-that-can-be-attended-ii/",target:"_blank",rel:"noopener noreferrer"},me={id:"_252-会议室",tabindex:"-1"},ge=e("a",{class:"header-anchor",href:"#_252-会议室","aria-hidden":"true"},"#",-1),ve={href:"https://leetcode.cn/problems/meeting-rooms/",target:"_blank",rel:"noopener noreferrer"},fe=a(`<p>给定一个会议时间安排的数组 <code>intervals</code> ，每个会议时间都会包括开始和结束的时间<code>intervals[i] = [start_i, end_i]</code> ，请你判断一个人是否能够参加这里面的全部会议。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>示例 <span class="token number">1</span>：
输入：intervals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token boolean">false</span>

示例 <span class="token number">2</span>：
输入：intervals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
输出：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),xe={id:"_253-会议室-ii",tabindex:"-1"},qe=e("a",{class:"header-anchor",href:"#_253-会议室-ii","aria-hidden":"true"},"#",-1),je={href:"https://leetcode.cn/problems/meeting-rooms-ii/",target:"_blank",rel:"noopener noreferrer"},Ie=a(`<p>给定一个会议时间安排的数组 <code>intervals</code> ，每个会议时间都会包括开始和结束的时间<code> intervals[i] = [start_i, end_i]</code>，为避免会议冲突，同时要考虑充分利用会议室资源，请你计算至少需要多少间会议室，才能满足这些会议安排。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>示例 <span class="token number">1</span><span class="token operator">:</span>
<span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">2</span>

示例 <span class="token number">2</span><span class="token operator">:</span>
<span class="token literal-property property">输入</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token literal-property property">输出</span><span class="token operator">:</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ye={id:"_2402-会议室-iii",tabindex:"-1"},we=e("a",{class:"header-anchor",href:"#_2402-会议室-iii","aria-hidden":"true"},"#",-1),Ne={href:"https://leetcode.cn/problems/meeting-rooms-iii/",target:"_blank",rel:"noopener noreferrer"};function Ve(Be,Ee){const s=r("ExternalLinkIcon");return d(),c("div",null,[l,p,h,u,e("h4",_,[b,n(),e("a",k,[n("84. 柱状图中最大的矩形"),t(s)])]),e("h4",m,[g,n(),e("a",v,[n("85. 最大矩形"),t(s)])]),e("h4",f,[x,n(),e("a",q,[n("221. 最大正方形"),t(s)])]),e("h4",j,[I,n(),e("a",y,[n("1504. 统计全 1 子矩形"),t(s)])]),e("h4",w,[N,n(),e("a",V,[n("1277. 统计全为 1 的正方形子矩阵"),t(s)])]),e("h4",B,[E,n(),e("a",L,[n("1727. 重新排列后的最大子矩阵"),t(s)])]),C,e("h4",H,[S,n(),e("a",T,[n("150. 逆波兰表达式求值"),t(s)])]),X,Y,e("h4",Z,[$,n(),e("a",z,[n("224. 基本计算器"),t(s)])]),A,D,e("h4",F,[G,n(),e("a",J,[n("227. 基本计算器 II"),t(s)])]),K,M,e("h4",O,[P,n(),e("a",Q,[n("772. 基本计算器 III"),t(s)])]),R,e("h4",U,[W,n(),e("a",ee,[n("415. 字符串相加"),t(s)])]),e("h4",ne,[se,n(),e("a",te,[n("字符串减法"),t(s)])]),e("h4",ae,[oe,n(),e("a",de,[n("43. 字符串相乘"),t(s)])]),ce,re,ie,le,e("h4",pe,[he,n(),e("a",ue,[n("1353. 最多可以参加的会议数目"),t(s)])]),e("h4",_e,[be,n(),e("a",ke,[n("1751. 最多可以参加的会议数目 II"),t(s)])]),e("h4",me,[ge,n(),e("a",ve,[n("252.会议室"),t(s)])]),fe,e("h4",xe,[qe,n(),e("a",je,[n("253.会议室 II"),t(s)])]),Ie,e("h4",ye,[we,n(),e("a",Ne,[n("2402. 会议室 III"),t(s)])])])}const Ce=o(i,[["render",Ve],["__file","专题.html.vue"]]);export{Ce as default};
