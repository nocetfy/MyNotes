export const data = JSON.parse("{\"key\":\"v-358f243f\",\"path\":\"/leetcode/tree/segament.html\",\"title\":\"线段树\",\"lang\":\"zh-CN\",\"frontmatter\":{\"description\":\"线段树 介绍 线段树是算法竞赛中常用的用来维护 区间信息 的数据结构。 线段树可以在 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。 模板 class Node { Node left; Node right; int l; int r; int mid; int v; int add; public Node(int l, int r) { this.l = l; this.r = r; this.mid = (l + r) &gt;&gt; 1; } } class SegmentTree { private Node root = new Node(1, (int) 1e9); public SegmentTree() { } public void modify(int l, int r, int v) { modify(l, r, v, root); } public void modify(int l, int r, int v, Node node) { if (l &gt; r) { return; } if (node.l &gt;= l &amp;&amp; node.r &lt;= r) { node.v = v; node.add = v; return; } pushdown(node); if (l &lt;= node.mid) { modify(l, r, v, node.left); } if (r &gt; node.mid) { modify(l, r, v, node.right); } pushup(node); } public void pushup(Node node) { node.v = Math.max(node.left.v, node.right.v); } public void pushdown(Node node) { if (node.left == null) { node.left = new Node(node.l, node.mid); } if (node.right == null) { node.right = new Node(node.mid + 1, node.r); } if (node.add != 0) { Node left = node.left, right = node.right; left.add = node.add; right.add = node.add; left.v = node.add; right.v = node.add; node.add = 0; } } public int query(int l, int r) { return query(l, r, root); } public int query(int l, int r, Node node) { if (l &gt; r) { return 0; } if (node.l &gt;= l &amp;&amp; node.r &lt;= r) { return node.v; } pushdown(node); int v = 0; if (l &lt;= node.mid) { v = Math.max(v, query(l, r, node.left)); } if (r &gt; node.mid) { v = Math.max(v, query(l, r, node.right)); } return v; } } }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://newzone.top/leetcode/tree/segament.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"nocetfy\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"线段树\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"线段树 介绍 线段树是算法竞赛中常用的用来维护 区间信息 的数据结构。 线段树可以在 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。 模板 class Node { Node left; Node right; int l; int r; int mid; int v; int add; public Node(int l, int r) { this.l = l; this.r = r; this.mid = (l + r) &gt;&gt; 1; } } class SegmentTree { private Node root = new Node(1, (int) 1e9); public SegmentTree() { } public void modify(int l, int r, int v) { modify(l, r, v, root); } public void modify(int l, int r, int v, Node node) { if (l &gt; r) { return; } if (node.l &gt;= l &amp;&amp; node.r &lt;= r) { node.v = v; node.add = v; return; } pushdown(node); if (l &lt;= node.mid) { modify(l, r, v, node.left); } if (r &gt; node.mid) { modify(l, r, v, node.right); } pushup(node); } public void pushup(Node node) { node.v = Math.max(node.left.v, node.right.v); } public void pushdown(Node node) { if (node.left == null) { node.left = new Node(node.l, node.mid); } if (node.right == null) { node.right = new Node(node.mid + 1, node.r); } if (node.add != 0) { Node left = node.left, right = node.right; left.add = node.add; right.add = node.add; left.v = node.add; right.v = node.add; node.add = 0; } } public int query(int l, int r) { return query(l, r, root); } public int query(int l, int r, Node node) { if (l &gt; r) { return 0; } if (node.l &gt;= l &amp;&amp; node.r &lt;= r) { return node.v; } pushdown(node); int v = 0; if (l &lt;= node.mid) { v = Math.max(v, query(l, r, node.left)); } if (r &gt; node.mid) { v = Math.max(v, query(l, r, node.right)); } return v; } } }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"线段树\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"介绍\",\"slug\":\"介绍\",\"link\":\"#介绍\",\"children\":[]}],\"git\":{\"createdTime\":null,\"updatedTime\":null,\"contributors\":[]},\"readingTime\":{\"minutes\":0.96,\"words\":289},\"filePathRelative\":\"leetcode/tree/segament.md\",\"excerpt\":\"<h1> 线段树</h1>\\n<h2> 介绍</h2>\\n<p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p>\\n<p>线段树可以在 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。</p>\\n<h4> 模板</h4>\\n<div class=\\\"language-java line-numbers-mode\\\" data-ext=\\\"java\\\"><pre class=\\\"language-java\\\"><code>    <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Node</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">Node</span> left<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">Node</span> right<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> l<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> r<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> mid<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> v<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">int</span> add<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> l<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>l <span class=\\\"token operator\\\">=</span> l<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>r <span class=\\\"token operator\\\">=</span> r<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>mid <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">+</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&gt;&gt;</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">SegmentTree</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">private</span> <span class=\\\"token class-name\\\">Node</span> root <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token number\\\">1e9</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">SegmentTree</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">modify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> l<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> r<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> v<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token function\\\">modify</span><span class=\\\"token punctuation\\\">(</span>l<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> v<span class=\\\"token punctuation\\\">,</span> root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">modify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> l<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> r<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> v<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Node</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&gt;</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>l <span class=\\\"token operator\\\">&gt;=</span> l <span class=\\\"token operator\\\">&amp;&amp;</span> node<span class=\\\"token punctuation\\\">.</span>r <span class=\\\"token operator\\\">&lt;=</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                node<span class=\\\"token punctuation\\\">.</span>v <span class=\\\"token operator\\\">=</span> v<span class=\\\"token punctuation\\\">;</span>\\n                node<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">=</span> v<span class=\\\"token punctuation\\\">;</span>\\n                <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">pushdown</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&lt;=</span> node<span class=\\\"token punctuation\\\">.</span>mid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">modify</span><span class=\\\"token punctuation\\\">(</span>l<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> v<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">&gt;</span> node<span class=\\\"token punctuation\\\">.</span>mid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token function\\\">modify</span><span class=\\\"token punctuation\\\">(</span>l<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> v<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">pushup</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">pushup</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Node</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            node<span class=\\\"token punctuation\\\">.</span>v <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Math</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">.</span>v<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">.</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">pushdown</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Node</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                node<span class=\\\"token punctuation\\\">.</span>left <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>l<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>mid<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>right <span class=\\\"token operator\\\">==</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                node<span class=\\\"token punctuation\\\">.</span>right <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Node</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>mid <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>r<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">!=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token class-name\\\">Node</span> left <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">;</span>\\n                left<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">;</span>\\n                right<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">;</span>\\n\\n                left<span class=\\\"token punctuation\\\">.</span>v <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">;</span>\\n                right<span class=\\\"token punctuation\\\">.</span>v <span class=\\\"token operator\\\">=</span> node<span class=\\\"token punctuation\\\">.</span>add<span class=\\\"token punctuation\\\">;</span>\\n                node<span class=\\\"token punctuation\\\">.</span>add <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> l<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>l<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n\\n        <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">int</span> <span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> l<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">int</span> r<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token class-name\\\">Node</span> node<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&gt;</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">.</span>l <span class=\\\"token operator\\\">&gt;=</span> l <span class=\\\"token operator\\\">&amp;&amp;</span> node<span class=\\\"token punctuation\\\">.</span>r <span class=\\\"token operator\\\">&lt;=</span> r<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> node<span class=\\\"token punctuation\\\">.</span>v<span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token function\\\">pushdown</span><span class=\\\"token punctuation\\\">(</span>node<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">int</span> v <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>l <span class=\\\"token operator\\\">&lt;=</span> node<span class=\\\"token punctuation\\\">.</span>mid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                v <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Math</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>l<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>left<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>r <span class=\\\"token operator\\\">&gt;</span> node<span class=\\\"token punctuation\\\">.</span>mid<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                v <span class=\\\"token operator\\\">=</span> <span class=\\\"token class-name\\\">Math</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">max</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function\\\">query</span><span class=\\\"token punctuation\\\">(</span>l<span class=\\\"token punctuation\\\">,</span> r<span class=\\\"token punctuation\\\">,</span> node<span class=\\\"token punctuation\\\">.</span>right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n            <span class=\\\"token keyword\\\">return</span> v<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
