export const pagesRoutes = [
  ["v-8daa1a0e","/",{"e":"<p>ff</p>\n","r":{"minutes":0,"words":1},"y":"a","title":""},["/index.html","/README.md"]],
  ["v-6bbce1f7","/leetcode/a-base/base.html",{"e":"<ul>\n<li>GCD</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 最大公约数</span>\n<span class=\"token class-name\">BigInteger</span>#<span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.1,"words":30},"y":"a","title":""},["/leetcode/a-base/base","/leetcode/a-base/base.md"]],
  ["v-4cfc448e","/leetcode/a-base/skill.html",{"e":"<h1> 技巧</h1>\n<p>[TOC]</p>\n<h2> 常用技巧</h2>\n<h4> 1. 二维数组压缩维度转一维</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>\t\t<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> ints <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatMapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":15.51,"words":4653},"y":"a","title":"技巧"},["/leetcode/a-base/skill","/leetcode/a-base/skill.md"]],
  ["v-5ba5e092","/leetcode/array/array.html",{"e":"<h1> 数组</h1>\n<p>[TOC]</p>\n<h2> 数组基础</h2>\n<p>数组是非常基础的数据结构，在面试中，考察数组的题目一般在思维上都不难，主要是考察对代码的掌控能力</p>\n<p>也就是说，想法很简单，但实现起来 可能就不是那么回事了。</p>\n<p>首先要知道数组在内存中的存储方式，这样才能真正理解数组相关的面试题</p>\n<p><strong>数组是存放在连续内存空间上的相同类型数据的集合。</strong></p>\n<p>数组可以方便的通过下标索引的方式获取到下标下对应的数据。</p>\n<p>举一个字符数组的例子，如图所示：</p>\n<figure><img src=\"https://raw.githubusercontent.com/nocetfy/image/main/img/pRwqGv54BtaPKsL-20221205152224555.png\" alt=\"算法通关数组\" tabindex=\"0\" loading=\"lazy\"><figcaption>算法通关数组</figcaption></figure>","r":{"minutes":51.5,"words":15450},"y":"a","title":"数组"},["/leetcode/array/array","/leetcode/array/array.md"]],
  ["v-6f1636b0","/leetcode/array/suffixArray.html",{"e":"<h1> 后缀数组</h1>\n","r":{"minutes":0.01,"words":4},"y":"a","title":"后缀数组"},["/leetcode/array/suffixArray","/leetcode/array/suffixArray.md"]],
  ["v-43231962","/leetcode/bit/bit.html",{"e":"<h1> 位运算</h1>\n<p>[TOC]</p>\n<h2> 位运算简介：</h2>\n<p>程序中的所有数在计算机内存中都是以二进制的形式<a href=\"https://baike.baidu.com/item/%E5%82%A8%E5%AD%98/2446499\" target=\"_blank\" rel=\"noopener noreferrer\">储存</a>的。位运算就是直接对整数在内存中的二进制位进行<a href=\"https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C/33052\" target=\"_blank\" rel=\"noopener noreferrer\">操作</a>。比如，and 运算本来是一个逻辑<a href=\"https://baike.baidu.com/item/%E8%BF%90%E7%AE%97%E7%AC%A6\" target=\"_blank\" rel=\"noopener noreferrer\">运算符</a>，但整数与整数之间也可以进行 and 运算。举个例子，6 的二进制是 110，11 的二进制是 1011，那么 6 and 11 的结果就是 2，它是二进制对应位进行逻辑运算的结果（0 表示 False，1 表示 True，空位都当 0 处理）。</p>","r":{"minutes":31.22,"words":9365},"y":"a","title":"位运算"},["/leetcode/bit/bit","/leetcode/bit/bit.md"]],
  ["v-04afd68b","/leetcode/backtracking/A_.html",{"e":"<h2> 介绍</h2>\n<p><a href=\"https://paul.pub/a-star-algorithm/\" target=\"_blank\" rel=\"noopener noreferrer\">A*介绍</a></p>\n<h2> 题目</h2>\n<h4> <a href=\"https://leetcode.cn/problems/k-similar-strings/\" target=\"_blank\" rel=\"noopener noreferrer\">854. 相似度为 K 的字符串</a></h4>\n<p>对于某些非负整数 <code>k</code> ，如果交换 <code>s1</code> 中两个字母的位置恰好 <code>k</code> 次，能够使结果字符串等于 <code>s2</code> ，则认为字符串 <code>s1</code> 和 <code>s2</code> 的 <strong>相似度为</strong> <code>k</code> <strong>。</strong></p>","r":{"minutes":1.62,"words":487},"y":"a","title":""},["/leetcode/backtracking/A_","/leetcode/backtracking/A*.html","/leetcode/backtracking/A*.md"]],
  ["v-41f7dbaa","/leetcode/backtracking/backtracking.html",{"e":"<h1> 回溯算法</h1>\n<p>[TOC]</p>\n<h2> 什么是回溯法</h2>\n<p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。</p>\n<p>在二叉树系列中，我们已经不止一次，提到了回溯，例如<a href=\"https://programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E9%80%92%E5%BD%92%E5%B8%A6%E7%9D%80%E5%9B%9E%E6%BA%AF.html\" target=\"_blank\" rel=\"noopener noreferrer\">二叉树：以为使用了递归，其实还隐藏着回溯</a>。</p>","r":{"minutes":30.43,"words":9130},"y":"a","title":"回溯算法"},["/leetcode/backtracking/backtracking","/leetcode/backtracking/backtracking.md"]],
  ["v-4bb5cf4c","/leetcode/backtracking/bfs.html",{"e":"<h4> <a href=\"https://leetcode.cn/problems/k-similar-strings/\" target=\"_blank\" rel=\"noopener noreferrer\">854. 相似度为 K 的字符串</a></h4>\n<p>对于某些非负整数 <code>k</code> ，如果交换 <code>s1</code> 中两个字母的位置恰好 <code>k</code> 次，能够使结果字符串等于 <code>s2</code> ，则认为字符串 <code>s1</code> 和 <code>s2</code> 的 <strong>相似度为</strong> <code>k</code> <strong>。</strong></p>","r":{"minutes":3.19,"words":958},"y":"a","title":""},["/leetcode/backtracking/bfs","/leetcode/backtracking/bfs.md"]],
  ["v-78372a2b","/leetcode/dp/dp.html",{"e":"<h1> 动态规划</h1>\n<p>[TOC]</p>\n<h2> 动态规划原理</h2>\n<p>能用动态规划解决的问题，需要满足三个条件：最优子结构，无后效性和子问题重叠。</p>\n<h3> 最优子结构</h3>\n<p>具有最优子结构也可能是适合用贪心的方法求解。</p>\n<p>注意要确保我们考察了最优解中用到的所有子问题。</p>\n<ol>\n<li>证明问题最优解的第一个组成部分是做出一个选择；</li>\n<li>对于一个给定问题，在其可能的第一步选择中，假定你已经知道哪种选择才会得到最优解。你现在并不关心这种选择具体是如何得到的，只是假定已经知道了这种选择；</li>\n<li>给定可获得的最优解的选择后，确定这次选择会产生哪些子问题，以及如何最好地刻画子问题空间；</li>\n<li>证明作为构成原问题最优解的组成部分，每个子问题的解就是它本身的最优解。方法是反证法，考虑加入某个子问题的解不是其自身的最优解，那么就可以从原问题的解中用该子问题的最优解替换掉当前的非最优解，从而得到原问题的一个更优的解，从而与原问题最优解的假设矛盾。</li>\n</ol>","r":{"minutes":132.4,"words":39719},"y":"a","title":"动态规划"},["/leetcode/dp/dp","/leetcode/dp/dp.md"]],
  ["v-659d6601","/leetcode/graph/dijkstra.html",{"y":"a","title":""},["/leetcode/graph/dijkstra","/leetcode/graph/dijkstra.md"]],
  ["v-62ff07cd","/leetcode/graph/graph.html",{"e":"<h1> 图</h1>\n<h4> <a href=\"https://leetcode-cn.com/problems/clone-graph/\" target=\"_blank\" rel=\"noopener noreferrer\">133. 克隆图</a></h4>\n<p>给你无向 <strong><a href=\"https://baike.baidu.com/item/%E8%BF%9E%E9%80%9A%E5%9B%BE/6460995?fr=aladdin\" target=\"_blank\" rel=\"noopener noreferrer\">连通</a></strong> 图中一个节点的引用，请你返回该图的 <a href=\"https://baike.baidu.com/item/%E6%B7%B1%E6%8B%B7%E8%B4%9D/22785317?fr=aladdin\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>深拷贝</strong></a>（克隆）。</p>","r":{"minutes":2.12,"words":635},"y":"a","title":"图"},["/leetcode/graph/graph","/leetcode/graph/graph.md"]],
  ["v-fa1cbdaa","/leetcode/greedy/greedy.html",{"e":"<h1> 贪心算法</h1>\n<p>[TOC]</p>\n<h2> 什么是贪心</h2>\n<p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p>\n<p>这么说有点抽象，来举一个例子：</p>\n<p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p>\n<p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p>\n<p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p>\n<p>再举一个例子如果是 有一堆盒子，你有一个背包体积为 n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。动态规划的问题在下一个系列会详细讲解。</p>","r":{"minutes":33.03,"words":9910},"y":"a","title":"贪心算法"},["/leetcode/greedy/greedy","/leetcode/greedy/greedy.md"]],
  ["v-221bfac8","/leetcode/hash/extendible%20hashing.html",{"e":"<h1> 原地哈希</h1>\n<h4> <a href=\"https://leetcode.cn/problems/first-missing-positive/\" target=\"_blank\" rel=\"noopener noreferrer\">41. 缺失的第一个正数</a></h4>\n<p>给你一个未排序的整数数组 <code>nums</code> ，请你找出其中没有出现的最小的正整数。</p>\n<p>请你实现时间复杂度为 <code>O(n)</code> 并且只使用常数级别额外空间的解决方案。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code>输入：nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n输出：<span class=\"token number\">3</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":1.57,"words":470},"y":"a","title":"原地哈希"},["/leetcode/hash/extendible hashing.html","/leetcode/hash/extendible%20hashing","/leetcode/hash/extendible hashing.md","/leetcode/hash/extendible%20hashing.md"]],
  ["v-3c88ad2b","/leetcode/hash/hash.html",{"e":"<h1> 哈希</h1>\n<p>[TOC]</p>\n<h2> 哈希表</h2>\n<p>首先什么是 哈希表，哈希表（英文名字为 Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指 hash table 就可以了）。</p>\n<blockquote>\n<p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>\n</blockquote>\n<p>这么这官方的解释可能有点懵，其实直白来讲其实数组就是一张哈希表。</p>\n<p>哈希表中关键码就是数组的索引下表，然后通过下表直接访问数组中的元素，如下图所示：</p>\n<figure><img src=\"https://i.loli.net/2021/11/25/1kHucrljwvpf7Z3.png\" alt=\"哈希表1\" tabindex=\"0\" loading=\"lazy\"><figcaption>哈希表1</figcaption></figure>","r":{"minutes":20.82,"words":6245},"y":"a","title":"哈希"},["/leetcode/hash/hash","/leetcode/hash/hash.md"]],
  ["v-d74f668e","/leetcode/hash/string%20hash.html",{"e":"<h1> 字符串哈希</h1>\n","r":{"minutes":0.02,"words":5},"y":"a","title":"字符串哈希"},["/leetcode/hash/string hash.html","/leetcode/hash/string%20hash","/leetcode/hash/string hash.md","/leetcode/hash/string%20hash.md"]],
  ["v-513499aa","/leetcode/list/list.html",{"e":"<h1> 链表</h1>\n<p>[TOC]</p>\n<h2> 前置了解</h2>\n<p>什么是链表，链表是一种通过指针串联在一起的线性结构，每一个节点是又两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向 null（空指针的意思）。</p>\n<p>链接的入口点称为列表的头结点也就是 <strong>head</strong>。</p>\n<p>如图所示：</p>\n<figure><img src=\"https://i.loli.net/2021/11/25/kBwMF2jOHArnXuh.png\" alt=\"链表1\" tabindex=\"0\" loading=\"lazy\"><figcaption>链表1</figcaption></figure>","r":{"minutes":28.25,"words":8475},"y":"a","title":"链表"},["/leetcode/list/list","/leetcode/list/list.md"]],
  ["v-018213d9","/leetcode/prefix/differenceArray.html",{"e":"<h1> 差分</h1>\n<h3> 差分</h3>\n<p>差分是一种和前缀和相对的策略，可以当做是求和的逆运算。对差分数组求前缀和，即可得到原数组，相当于导数与积分的关系。</p>\n<h3> 二维差分</h3>\n","r":{"minutes":0.2,"words":60},"y":"a","title":"差分"},["/leetcode/prefix/differenceArray","/leetcode/prefix/differenceArray.md"]],
  ["v-57128fbc","/leetcode/prefix/prefixSum.html",{"e":"<h1> 前缀和</h1>\n<p>[TOC]</p>\n<h3> 简介</h3>\n<p>前缀和是一种重要的预处理，能大大降低查询的时间复杂度。可以简单理解为<code>数列的前n项的和</code>。</p>\n<h4> <a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\" target=\"_blank\" rel=\"noopener noreferrer\">560. 和为 K 的子数组</a></h4>\n<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <em>该数组中和为 <code>k</code> 的子数组的个数</em> 。</p>","r":{"minutes":11.24,"words":3371},"y":"a","title":"前缀和"},["/leetcode/prefix/prefixSum","/leetcode/prefix/prefixSum.md"]],
  ["v-47d2d9aa","/leetcode/sort/sort.html",{"e":"<h1> 排序</h1>\n<p>[TOC]</p>\n<h3> 基础排序算法</h3>\n<h4> 1. 冒泡排序</h4>\n<hr>\n<h4> 2. 选择排序</h4>\n<hr>\n<h4> 3. 插入排序</h4>\n<ul>\n<li>数组</li>\n</ul>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div></div></div>","r":{"minutes":5.28,"words":1584},"y":"a","title":"排序"},["/leetcode/sort/sort","/leetcode/sort/sort.md"]],
  ["v-40f5fe4b","/leetcode/string/string.html",{"e":"<h1> 字符串</h1>\n<p>[TOC]</p>\n<h4> <a href=\"https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer 05. 替换空格</a></h4>\n<p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成<code>\"%20\"</code>。</p>\n<p><strong>示例 1：</strong></p>\n<div class=\"language-javascript line-numbers-mode\" data-ext=\"js\"><pre class=\"language-javascript\"><code>输入：s <span class=\"token operator\">=</span> <span class=\"token string\">\"We are happy.\"</span>\n输出：<span class=\"token string\">\"We%20are%20happy.\"</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.55,"words":1365},"y":"a","title":"字符串"},["/leetcode/string/string","/leetcode/string/string.md"]],
  ["v-8dbc9712","/leetcode/stack/monotonic.html",{"e":"<h1> 单调队列与单调栈</h1>\n<p>[TOC]</p>\n<h2> 单调队列</h2>\n<h4> <a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/\" target=\"_blank\" rel=\"noopener noreferrer\">剑指 Offer 59 - II. 队列的最大值</a></h4>\n<p>请定义一个队列并实现函数 <code>max_value</code> 得到队列里的最大值，要求函数 <code>max_value</code>、<code>push_back</code> 和<code>pop_front</code> 的<strong>均摊</strong>时间复杂度都是 O (1)。</p>","r":{"minutes":10.13,"words":3039},"y":"a","title":"单调队列与单调栈"},["/leetcode/stack/monotonic","/leetcode/stack/monotonic.md"]],
  ["v-d53cdd4e","/leetcode/stack/stack.html",{"e":"<h1> 栈与队列</h1>\n<p>[TOC]</p>\n<h4> <a href=\"https://leetcode-cn.com/problems/implement-queue-using-stacks/\" target=\"_blank\" rel=\"noopener noreferrer\">232. 用栈实现队列</a></h4>\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p>\n<p>实现 MyQueue 类：</p>\n<ul>\n<li>void push(int x) 将元素 x 推到队列的末尾</li>\n<li>int pop() 从队列的开头移除并返回元素</li>\n<li>int peek() 返回队列开头的元素</li>\n<li>boolean empty() 如果队列为空，返回 true ；否则，返回 false</li>\n</ul>","r":{"minutes":6.06,"words":1817},"y":"a","title":"栈与队列"},["/leetcode/stack/stack","/leetcode/stack/stack.md"]],
  ["v-1c45489a","/leetcode/tree/BinaryIndexTree.html",{"e":"<h1> 树状数组</h1>\n","r":{"minutes":0.01,"words":4},"y":"a","title":"树状数组"},["/leetcode/tree/BinaryIndexTree","/leetcode/tree/BinaryIndexTree.md"]],
  ["v-c719ecb8","/leetcode/tree/Red%E2%80%93black%20tree.html",{"e":"<h1> 红黑树</h1>\n","r":{"minutes":0.01,"words":3},"y":"a","title":"红黑树"},["/leetcode/tree/Red–black tree.html","/leetcode/tree/Red%E2%80%93black%20tree","/leetcode/tree/Red–black tree.md","/leetcode/tree/Red%E2%80%93black%20tree.md"]],
  ["v-358f243f","/leetcode/tree/segament.html",{"e":"<h1> 线段树</h1>\n<h2> 介绍</h2>\n<p>线段树是算法竞赛中常用的用来维护 <strong>区间信息</strong> 的数据结构。</p>\n<p>线段树可以在 的时间复杂度内实现单点修改、区间修改、区间查询（区间求和，求区间最大值，求区间最小值）等操作。</p>\n<h4> 模板</h4>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mid<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> add<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>l <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">SegmentTree</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> root <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1e9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SegmentTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>l <span class=\"token operator\">&gt;=</span> l <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>r <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n                node<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> node<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pushup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>add <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">Node</span> left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                left<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">;</span>\n                right<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">;</span>\n\n                left<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">;</span>\n                right<span class=\"token punctuation\">.</span>v <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">;</span>\n                node<span class=\"token punctuation\">.</span>add <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>l <span class=\"token operator\">&gt;=</span> l <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token punctuation\">.</span>r <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>v<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">pushdown</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> node<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                v <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&gt;</span> node<span class=\"token punctuation\">.</span>mid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                v <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":0.96,"words":289},"y":"a","title":"线段树"},["/leetcode/tree/segament","/leetcode/tree/segament.md"]],
  ["v-6eafd32b","/leetcode/tree/tree.html",{"e":"<h1> 二叉树</h1>\n<p>[TOC]</p>\n<h2> 二叉树的种类</h2>\n<p>在我们解题过程中二叉树有两种主要的形式：满二叉树和完全二叉树。</p>\n<h3> 满二叉树</h3>\n<p>满二叉树：如果一棵二叉树只有度为 0 的结点和度为 2 的结点，并且度为 0 的结点在同一层上，则这棵二叉树为满二叉树。</p>\n<p>如图所示：</p>\n<figure><img src=\"https://i.loli.net/2021/11/25/sg8fo3XQHmFWN5a.png\" alt=\"img\" tabindex=\"0\" loading=\"lazy\"><figcaption>img</figcaption></figure>","r":{"minutes":44.51,"words":13353},"y":"a","title":"二叉树"},["/leetcode/tree/tree","/leetcode/tree/tree.md"]],
  ["v-4248c02f","/leetcode/tree/trie.html",{"e":"<h1> 字典树 前缀树</h1>\n<h3> Trie</h3>\n<h4> <a href=\"https://leetcode.cn/problems/implement-trie-prefix-tree/\" target=\"_blank\" rel=\"noopener noreferrer\">208. 实现 Trie (前缀树)</a></h4>\n<p><code>Trie</code>（发音类似 \"try\"）或者说 <code>前缀树</code> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\n<p>请你实现 <code>trie</code> 类：</p>","r":{"minutes":1.66,"words":499},"y":"a","title":"字典树 前缀树"},["/leetcode/tree/trie","/leetcode/tree/trie.md"]],
  ["v-6725d240","/leetcode/unionfind/uf.html",{"e":"<h1> 并查集</h1>\n<h3> 模板</h3>\n<div class=\"language-java line-numbers-mode\" data-ext=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 开启了路径压缩和按秩合并的并查集</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UnionFind</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span><span class=\"token comment\">//顶点数目</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parent<span class=\"token punctuation\">;</span><span class=\"token comment\">//每个顶点所在连通分量的代表</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> size<span class=\"token punctuation\">;</span><span class=\"token comment\">//可以简单地理解为每个连通分量中的顶点个数</span>\n    <span class=\"token keyword\">int</span> branchCount<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前连通分支数目</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UnionFind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>branchCount <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            parent<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 路径压缩</span>\n        <span class=\"token keyword\">return</span> parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 按秩合并</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        parent<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        size<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">--</span>branchCount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">branchCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> branchCount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><div class=\"line-numbers\" aria-hidden=\"true\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.48,"words":1044},"y":"a","title":"并查集"},["/leetcode/unionfind/uf","/leetcode/unionfind/uf.md"]],
  ["v-3706649a","/404.html",{"y":"p","title":""},["/404"]],
  ["v-4092245e","/leetcode/a-base/",{"y":"p","title":"A Base"},["/leetcode/a-base/index.html"]],
  ["v-31987621","/leetcode/",{"y":"p","title":"Leetcode"},["/leetcode/index.html"]],
  ["v-3c977257","/leetcode/array/",{"y":"p","title":"Array"},["/leetcode/array/index.html"]],
  ["v-266ca263","/leetcode/bit/",{"y":"p","title":"Bit"},["/leetcode/bit/index.html"]],
  ["v-ddd8e260","/leetcode/backtracking/",{"y":"p","title":"Backtracking"},["/leetcode/backtracking/index.html"]],
  ["v-7d1c4f62","/leetcode/dp/",{"y":"p","title":"Dp"},["/leetcode/dp/index.html"]],
  ["v-46cd0202","/leetcode/graph/",{"y":"p","title":"Graph"},["/leetcode/graph/index.html"]],
  ["v-d9f2d364","/leetcode/greedy/",{"y":"p","title":"Greedy"},["/leetcode/greedy/index.html"]],
  ["v-b10ed140","/leetcode/hash/",{"y":"p","title":"Hash"},["/leetcode/hash/index.html"]],
  ["v-b096cc60","/leetcode/list/",{"y":"p","title":"List"},["/leetcode/list/index.html"]],
  ["v-6f1f329c","/leetcode/prefix/",{"y":"p","title":"Prefix"},["/leetcode/prefix/index.html"]],
  ["v-afcc1660","/leetcode/sort/",{"y":"p","title":"Sort"},["/leetcode/sort/index.html"]],
  ["v-11f434fd","/leetcode/string/",{"y":"p","title":"String"},["/leetcode/string/index.html"]],
  ["v-5b632808","/leetcode/stack/",{"y":"p","title":"Stack"},["/leetcode/stack/index.html"]],
  ["v-afad9260","/leetcode/tree/",{"y":"p","title":"Tree"},["/leetcode/tree/index.html"]],
  ["v-57235508","/leetcode/unionfind/",{"y":"p","title":"Unionfind"},["/leetcode/unionfind/index.html"]],
  ["v-5bc93818","/category/",{"y":"p","title":"分类"},["/category/index.html"]],
  ["v-744d024e","/tag/",{"y":"p","title":"标签"},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"y":"p","title":"文章"},["/article/index.html"]],
  ["v-154dc4c4","/star/",{"y":"p","title":"收藏"},["/star/index.html"]],
  ["v-01560935","/timeline/",{"y":"p","title":"时间轴"},["/timeline/index.html"]],
]
