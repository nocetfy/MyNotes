const e=JSON.parse('{"key":"v-4248c02f","path":"/leetcode/tree/trie.html","title":"字典树 前缀树","lang":"zh-CN","frontmatter":{"description":"字典树 前缀树 Trie 208. 实现 Trie (前缀树) Trie（发音类似 \\"try\\"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。 请你实现 trie 类：","head":[["meta",{"property":"og:url","content":"https://newzone.top/myNotes/leetcode/tree/trie.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"字典树 前缀树"}],["meta",{"property":"og:description","content":"字典树 前缀树 Trie 208. 实现 Trie (前缀树) Trie（发音类似 \\"try\\"）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。 请你实现 trie 类："}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字典树 前缀树\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":3,"title":"Trie","slug":"trie","link":"#trie","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":1.66,"words":499},"filePathRelative":"leetcode/tree/trie.md","excerpt":"<h1> 字典树 前缀树</h1>\\n<h3> Trie</h3>\\n<h4> <a href=\\"https://leetcode.cn/problems/implement-trie-prefix-tree/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">208. 实现 Trie (前缀树)</a></h4>\\n<p><code>Trie</code>（发音类似 \\"try\\"）或者说 <code>前缀树</code> 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>\\n<p>请你实现 <code>trie</code> 类：</p>","autoDesc":true}');export{e as data};
