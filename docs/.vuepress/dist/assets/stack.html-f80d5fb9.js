const e=JSON.parse('{"key":"v-d53cdd4e","path":"/leetcode/stack/stack.html","title":"栈与队列","lang":"zh-CN","frontmatter":{"description":"栈与队列 [TOC] 232. 用栈实现队列 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开头移除并返回元素 int peek() 返回队列开头的元素 boolean empty() 如果队列为空，返回 true ；否则，返回 false","head":[["meta",{"property":"og:url","content":"https://newzone.top/myNotes/leetcode/stack/stack.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"栈与队列"}],["meta",{"property":"og:description","content":"栈与队列 [TOC] 232. 用栈实现队列 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）： 实现 MyQueue 类： void push(int x) 将元素 x 推到队列的末尾 int pop() 从队列的开头移除并返回元素 int peek() 返回队列开头的元素 boolean empty() 如果队列为空，返回 true ；否则，返回 false"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"栈与队列\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":6.06,"words":1817},"filePathRelative":"leetcode/stack/stack.md","excerpt":"<h1> 栈与队列</h1>\\n<p>[TOC]</p>\\n<h4> <a href=\\"https://leetcode-cn.com/problems/implement-queue-using-stacks/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">232. 用栈实现队列</a></h4>\\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（push、pop、peek、empty）：</p>\\n<p>实现 MyQueue 类：</p>\\n<ul>\\n<li>void push(int x) 将元素 x 推到队列的末尾</li>\\n<li>int pop() 从队列的开头移除并返回元素</li>\\n<li>int peek() 返回队列开头的元素</li>\\n<li>boolean empty() 如果队列为空，返回 true ；否则，返回 false</li>\\n</ul>","autoDesc":true}');export{e as data};
