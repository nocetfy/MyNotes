const e=JSON.parse('{"key":"v-fa1cbdaa","path":"/leetcode/greedy/greedy.html","title":"贪心算法","lang":"zh-CN","frontmatter":{"description":"贪心算法 [TOC] 什么是贪心 贪心的本质是选择每一阶段的局部最优，从而达到全局最优。 这么说有点抽象，来举一个例子： 例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？ 指定每次拿最大的，最终结果就是拿走最大数额的钱。 每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。 再举一个例子如果是 有一堆盒子，你有一个背包体积为 n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。动态规划的问题在下一个系列会详细讲解。","head":[["meta",{"property":"og:url","content":"https://newzone.top/myNotes/leetcode/greedy/greedy.html"}],["meta",{"property":"og:site_name","content":"nocetfy"}],["meta",{"property":"og:title","content":"贪心算法"}],["meta",{"property":"og:description","content":"贪心算法 [TOC] 什么是贪心 贪心的本质是选择每一阶段的局部最优，从而达到全局最优。 这么说有点抽象，来举一个例子： 例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？ 指定每次拿最大的，最终结果就是拿走最大数额的钱。 每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。 再举一个例子如果是 有一堆盒子，你有一个背包体积为 n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。动态规划的问题在下一个系列会详细讲解。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"贪心算法\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[]}"]]},"headers":[{"level":2,"title":"什么是贪心","slug":"什么是贪心","link":"#什么是贪心","children":[]},{"level":2,"title":"贪心的套路（什么时候用贪心）","slug":"贪心的套路-什么时候用贪心","link":"#贪心的套路-什么时候用贪心","children":[]},{"level":2,"title":"贪心一般解题步骤","slug":"贪心一般解题步骤","link":"#贪心一般解题步骤","children":[]},{"level":2,"title":"简单题目","slug":"简单题目","link":"#简单题目","children":[]},{"level":2,"title":"数学问题","slug":"数学问题","link":"#数学问题","children":[]},{"level":2,"title":"序列问题","slug":"序列问题","link":"#序列问题","children":[]},{"level":2,"title":"股票问题","slug":"股票问题","link":"#股票问题","children":[]},{"level":2,"title":"两个维度解决问题","slug":"两个维度解决问题","link":"#两个维度解决问题","children":[]},{"level":2,"title":"区间问题","slug":"区间问题","link":"#区间问题","children":[]},{"level":2,"title":"困难问题","slug":"困难问题","link":"#困难问题","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":33.03,"words":9910},"filePathRelative":"leetcode/greedy/greedy.md","excerpt":"<h1> 贪心算法</h1>\\n<p>[TOC]</p>\\n<h2> 什么是贪心</h2>\\n<p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p>\\n<p>这么说有点抽象，来举一个例子：</p>\\n<p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p>\\n<p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p>\\n<p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p>\\n<p>再举一个例子如果是 有一堆盒子，你有一个背包体积为 n，如何把背包尽可能装满，如果还每次选最大的盒子，就不行了。这时候就需要动态规划。动态规划的问题在下一个系列会详细讲解。</p>","autoDesc":true}');export{e as data};
